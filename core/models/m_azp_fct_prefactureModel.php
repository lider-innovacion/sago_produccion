<?php
	# Seguridad
	defined('INDEX_DIR') OR exit('Desarrollador Programador');
	//------------------------------------------------
	final class m_azp_fct_prefactureModel extends Models implements OCREND {
		/*=========================================================================================================================*/
		public function __construct() {
			parent::__construct(DATABASE['name'], DATABASE['motor'], true);
		}

		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_by_create() {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " AS 'lbl_azp_fct_prefacture_id_azp_fct_prefacture',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_created . " AS 'lbl_azp_fct_prefacture_m_date_created',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_modified . " AS 'lbl_azp_fct_prefacture_m_date_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_description . " AS 'lbl_azp_fct_prefacture_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_certificate . " AS 'lbl_azp_fct_prefacture_t_certificate',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_request . " AS 'lbl_azp_fct_prefacture_t_date_request',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_send . " AS 'lbl_azp_fct_prefacture_t_date_send',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_honorary . " AS 'lbl_azp_fct_prefacture_t_honorary',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_purchase . " AS 'lbl_azp_fct_prefacture_t_purchase',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_repayment . " AS 'lbl_azp_fct_prefacture_t_repayment',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " AS 'lbl_azp_fct_prefacture_t_request',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
					tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
					tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
					tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
					tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
					tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
					= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
						= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
						= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
						= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_deleted . " = '1'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_state . " = 'Activo'
				ORDER BY tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_change() {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azs_fct_prefacture." . d_azs_fct_prefacture_id_azs_fct_prefacture . " AS 'lbl_azs_fct_prefacture_id_azs_fct_prefacture',
					tc_azs_fct_prefacture." . d_azs_fct_prefacture_m_date_modified . " AS 'lbl_azs_fct_prefacture_m_date_modified',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azs_fct_prefacture." . d_azs_fct_prefacture_m_date_created . " AS 'lbl_azs_fct_prefacture_m_date_created',
					tc_azs_fct_prefacture." . d_azs_fct_prefacture_m_date_modified . " AS 'lbl_azs_fct_prefacture_m_date_modified',
					tc_azs_fct_prefacture." . d_azs_fct_prefacture_m_description . " AS 'lbl_azs_fct_prefacture_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azs_fct_prefacture." . d_azs_fct_prefacture_t_honorary . " AS 'lbl_azs_fct_prefacture_t_honorary',
					tc_azs_fct_prefacture." . d_azs_fct_prefacture_t_repayment . " AS 'lbl_azs_fct_prefacture_t_repayment'
				FROM " . t_azs_fct_prefacture . " tc_azs_fct_prefacture
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azs_fct_prefacture." . d_azs_fct_prefacture_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azs_fct_prefacture." . d_azs_fct_prefacture_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azs_fct_prefacture." . d_azs_fct_prefacture_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azs_fct_prefacture." . d_azs_fct_prefacture_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				WHERE tc_azs_fct_prefacture." . d_azs_fct_prefacture_v_id_azp_fct_prefacture . " = '" . $this->id . "'
				ORDER BY tc_azs_fct_prefacture." . d_azs_fct_prefacture_m_date_modified . " DESC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_delete() : array {
			# Seleccionar los registros de la tabla
			$var_sql = $this->db->query("
				SELECT * FROM " . t_azp_fct_prefacture . "
				WHERE " . d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $this->id . "'
					AND " . d_azp_fct_prefacture_m_deleted . " = '2'
				LIMIT 1
			");
			$var_result = $var_sql->fetchAll();
			$var_sql->closeCursor();
			if (false != $var_result) {
				return $var_result[0];
			} else {
				# Redireccionar a una pagina segun el metodo cargado
				Func::redir(URL . url_query_azp_fct_prefacture);
				# Detener la ejecucion
				exit();
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_detail() {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " AS 'lbl_azp_fct_prefacture_id_azp_fct_prefacture',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_created . " AS 'lbl_azp_fct_prefacture_m_date_created',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_modified . " AS 'lbl_azp_fct_prefacture_m_date_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_description . " AS 'lbl_azp_fct_prefacture_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_certificate . " AS 'lbl_azp_fct_prefacture_t_certificate',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_request . " AS 'lbl_azp_fct_prefacture_t_date_request',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_send . " AS 'lbl_azp_fct_prefacture_t_date_send',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_honorary . " AS 'lbl_azp_fct_prefacture_t_honorary',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_purchase . " AS 'lbl_azp_fct_prefacture_t_purchase',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_repayment . " AS 'lbl_azp_fct_prefacture_t_repayment',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " AS 'lbl_azp_fct_prefacture_t_request',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
					tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
					tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
					tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
					tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
					tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
					= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
						= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
						= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
						= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $this->id . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_deleted . " = '1'
				LIMIT 1
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_eliminate() {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " AS 'lbl_azp_fct_prefacture_id_azp_fct_prefacture',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_created . " AS 'lbl_azp_fct_prefacture_m_date_created',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_modified . " AS 'lbl_azp_fct_prefacture_m_date_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_description . " AS 'lbl_azp_fct_prefacture_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_certificate . " AS 'lbl_azp_fct_prefacture_t_certificate',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_request . " AS 'lbl_azp_fct_prefacture_t_date_request',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_send . " AS 'lbl_azp_fct_prefacture_t_date_send',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_honorary . " AS 'lbl_azp_fct_prefacture_t_honorary',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_purchase . " AS 'lbl_azp_fct_prefacture_t_purchase',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_repayment . " AS 'lbl_azp_fct_prefacture_t_repayment',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " AS 'lbl_azp_fct_prefacture_t_request',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
					tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
					tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
					tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
					tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
					tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
					= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
						= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
						= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
						= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_deleted . " = '3'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_state . " = 'Activo'
				ORDER BY tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_read() {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " AS 'lbl_azp_fct_prefacture_id_azp_fct_prefacture',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_created . " AS 'lbl_azp_fct_prefacture_m_date_created',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_modified . " AS 'lbl_azp_fct_prefacture_m_date_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_description . " AS 'lbl_azp_fct_prefacture_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_certificate . " AS 'lbl_azp_fct_prefacture_t_certificate',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_request . " AS 'lbl_azp_fct_prefacture_t_date_request',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_send . " AS 'lbl_azp_fct_prefacture_t_date_send',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_honorary . " AS 'lbl_azp_fct_prefacture_t_honorary',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_purchase . " AS 'lbl_azp_fct_prefacture_t_purchase',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_repayment . " AS 'lbl_azp_fct_prefacture_t_repayment',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " AS 'lbl_azp_fct_prefacture_t_request',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
					tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
					tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
					tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
					tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
					tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
					= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
						= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
						= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
						= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_deleted . " = '1'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_state . " = 'Activo'
				ORDER BY tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_remove() {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " AS 'lbl_azp_fct_prefacture_id_azp_fct_prefacture',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_created . " AS 'lbl_azp_fct_prefacture_m_date_created',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_modified . " AS 'lbl_azp_fct_prefacture_m_date_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_description . " AS 'lbl_azp_fct_prefacture_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_certificate . " AS 'lbl_azp_fct_prefacture_t_certificate',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_request . " AS 'lbl_azp_fct_prefacture_t_date_request',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_send . " AS 'lbl_azp_fct_prefacture_t_date_send',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_honorary . " AS 'lbl_azp_fct_prefacture_t_honorary',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_purchase . " AS 'lbl_azp_fct_prefacture_t_purchase',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_repayment . " AS 'lbl_azp_fct_prefacture_t_repayment',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " AS 'lbl_azp_fct_prefacture_t_request',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
					tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
					tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
					tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
					tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
					tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
					= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
						= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
						= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
						= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_deleted . " = '2'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_state . " = 'Activo'
				ORDER BY tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_update() {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " AS 'lbl_azp_fct_prefacture_id_azp_fct_prefacture',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " AS 'lbl_azp_fct_prefacture_m_by_created',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_modified . " AS 'lbl_azp_fct_prefacture_m_by_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_created . " AS 'lbl_azp_fct_prefacture_m_date_created',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_modified . " AS 'lbl_azp_fct_prefacture_m_date_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_description . " AS 'lbl_azp_fct_prefacture_m_description',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_level . " AS 'lbl_azp_fct_prefacture_m_level',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_status . " AS 'lbl_azp_fct_prefacture_m_status',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_certificate . " AS 'lbl_azp_fct_prefacture_t_certificate',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_request . " AS 'lbl_azp_fct_prefacture_t_date_request',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_send . " AS 'lbl_azp_fct_prefacture_t_date_send',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_honorary . " AS 'lbl_azp_fct_prefacture_t_honorary',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_purchase . " AS 'lbl_azp_fct_prefacture_t_purchase',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_repayment . " AS 'lbl_azp_fct_prefacture_t_repayment',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " AS 'lbl_azp_fct_prefacture_t_request',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " AS 'lbl_azp_fct_prefacture_v_id_azp_fct_tariff'
				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $this->id . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_deleted . " = '1'
				LIMIT 1
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_group_by() {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " AS 'lbl_azp_fct_prefacture_id_azp_fct_prefacture',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_created . " AS 'lbl_azp_fct_prefacture_m_date_created',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_modified . " AS 'lbl_azp_fct_prefacture_m_date_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_description . " AS 'lbl_azp_fct_prefacture_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_certificate . " AS 'lbl_azp_fct_prefacture_t_certificate',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_request . " AS 'lbl_azp_fct_prefacture_t_date_request',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_send . " AS 'lbl_azp_fct_prefacture_t_date_send',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_honorary . " AS 'lbl_azp_fct_prefacture_t_honorary',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_purchase . " AS 'lbl_azp_fct_prefacture_t_purchase',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_repayment . " AS 'lbl_azp_fct_prefacture_t_repayment',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " AS 'lbl_azp_fct_prefacture_t_request',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
					tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
					tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
					tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
					tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
					tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name',
					SUM(tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_honorary . ") AS 'lbl_azp_fct_prefacture_t_sum'
				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
					= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
						= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
						= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
						= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_deleted . " = '1'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_state . " = 'Activo'
				-- ---------------------------------------------------------------
				GROUP BY tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " ASC,
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " ASC
				-- ---------------------------------------------------------------
				ORDER BY tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_data_client() {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'lbl_azp_fct_client_id_azp_fct_client',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_client." . d_azp_fct_client_m_date_created . " AS 'lbl_azp_fct_client_m_date_created',
					tc_azp_fct_client." . d_azp_fct_client_m_date_modified . " AS 'lbl_azp_fct_client_m_date_modified',
					tc_azp_fct_client." . d_azp_fct_client_m_description . " AS 'lbl_azp_fct_client_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_client." . d_azp_fct_client_w_document . " AS 'lbl_azp_fct_client_w_document',
					tc_azp_fct_client." . d_azp_fct_client_w_error . " AS 'lbl_azp_fct_client_w_error',
					tc_azp_fct_client." . d_azp_fct_client_w_folder . " AS 'lbl_azp_fct_client_w_folder',
					tc_azp_fct_client." . d_azp_fct_client_w_name . " AS 'lbl_azp_fct_client_w_name',
					tc_azp_fct_client." . d_azp_fct_client_w_route . " AS 'lbl_azp_fct_client_w_route',
					tc_azp_fct_client." . d_azp_fct_client_w_size . " AS 'lbl_azp_fct_client_w_size',
					tc_azp_fct_client." . d_azp_fct_client_w_tmp_name . " AS 'lbl_azp_fct_client_w_tmp_name',
					tc_azp_fct_client." . d_azp_fct_client_w_type . " AS 'lbl_azp_fct_client_w_type',
					tc_azp_fct_sector." . d_azp_fct_sector_t_name . " AS 'lbl_azp_fct_sector_t_name'
				FROM " . t_azp_fct_client . " tc_azp_fct_client
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_client." . d_azp_fct_client_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_client." . d_azp_fct_client_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_client." . d_azp_fct_client_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_client." . d_azp_fct_client_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sector . " tc_azp_fct_sector
					ON tc_azp_fct_client." . d_azp_fct_client_v_id_azp_fct_sector . "
						= tc_azp_fct_sector." . d_azp_fct_sector_id_azp_fct_sector . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_client." . d_azp_fct_client_m_deleted . " = '1'
				ORDER BY tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_client() {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " AS 'lbl_azp_fct_prefacture_id_azp_fct_prefacture',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_created . " AS 'lbl_azp_fct_prefacture_m_date_created',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_modified . " AS 'lbl_azp_fct_prefacture_m_date_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_description . " AS 'lbl_azp_fct_prefacture_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_certificate . " AS 'lbl_azp_fct_prefacture_t_certificate',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_request . " AS 'lbl_azp_fct_prefacture_t_date_request',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_send . " AS 'lbl_azp_fct_prefacture_t_date_send',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_honorary . " AS 'lbl_azp_fct_prefacture_t_honorary',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_purchase . " AS 'lbl_azp_fct_prefacture_t_purchase',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_repayment . " AS 'lbl_azp_fct_prefacture_t_repayment',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " AS 'lbl_azp_fct_prefacture_t_request',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
					tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
					tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
					tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
					tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
					tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
					= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
						= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
						= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
						= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_deleted . " = '1'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_state . " = 'Activo'
				-- ---------------------------------------------------------------
				GROUP BY tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " ASC
				-- ---------------------------------------------------------------
				ORDER BY tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_graphic($var_service) {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " AS 'lbl_azp_fct_prefacture_id_azp_fct_prefacture',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_created . " AS 'lbl_azp_fct_prefacture_m_date_created',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_modified . " AS 'lbl_azp_fct_prefacture_m_date_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_description . " AS 'lbl_azp_fct_prefacture_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_certificate . " AS 'lbl_azp_fct_prefacture_t_certificate',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_request . " AS 'lbl_azp_fct_prefacture_t_date_request',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_send . " AS 'lbl_azp_fct_prefacture_t_date_send',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_honorary . " AS 'lbl_azp_fct_prefacture_t_honorary',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_purchase . " AS 'lbl_azp_fct_prefacture_t_purchase',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_repayment . " AS 'lbl_azp_fct_prefacture_t_repayment',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " AS 'lbl_azp_fct_prefacture_t_request',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
					tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
					tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
					tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
					tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
					tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name',
					SUM(tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_honorary . ") AS 'lbl_azp_fct_prefacture_t_sum'
				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
					= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
						= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
						= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
						= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_deleted . " = '1'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_state . " = 'Activo'
					AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'
				-- ---------------------------------------------------------------
				GROUP BY tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " ASC,
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " ASC
				-- ---------------------------------------------------------------
				ORDER BY tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Control Errores Update
		final private function error_sql_fct_prefacture_delete(array $data) {
			try {
				#-------------------------------------------------------------------------#
				if (!isset($data['field_id_delete'])) { throw new Exception('<b>Error:</b> El campo de id esta prohibido modificar.'); }
				#-------------------------------------------------------------------------#
				$empty_id = $this->db->scape($data['field_id_delete']);
				#-------------------------------------------------------------------------#
				if (isset($_SESSION['pe_time']) and end($_SESSION['pe_time']) >= time()) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('No puedes realizar tantas acciones seguidas.');
				}
				#-------------------------------------------------------------------------#
				if (Func::emp($empty_id) || $empty_id == 0) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de id es obligatorio.');
				}
				#-------------------------------------------------------------------------#
				if (!is_numeric($empty_id)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de id solo permite numeros.');
				}
				#-------------------------------------------------------------------------#
				# Verificar si el registro existe en la tabla
				$sql_id = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (false == $sql_id) {
					# Verificar si el resultado devuleto no existe para asignar un valor especifico
					if (strtolower($sql_id) == '') { $sql_id[0][0] = 0; }
					# Verificiar si el valor recibido de la sql es diferente del digitado
					if (strtolower($sql_id[0][0]) != strtolower($empty_id)) {
						# Informar un mensaje al usuario por medio de una excepcion
						throw new Exception('<b>Error:</b> El registro que está eliminando no se encuentra registrado.');
					}
				}
				#-------------------------------------------------------------------------#
				# Verificar si el registro existe en la tabla
				$sql_id = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "' AND " . d_azp_fct_prefacture_m_deleted . " = '2'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (false == $sql_id) {
					# Verificar si el resultado devuleto no existe para asignar un valor especifico
					if (strtolower($sql_id) == '') { $sql_id[0][0] = 0; }
					# Verificiar si el valor recibido de la sql es diferente del digitado
					if (strtolower($sql_id[0][0]) != strtolower($empty_id)) {
						# Informar un mensaje al usuario por medio de una excepcion
						throw new Exception('<b>Error:</b> El registro que está eliminando ya se encuentra eliminado.');
					}
				}
				#-------------------------------------------------------------------------#
				# Verificar si el registro fue creado por el usuario root
				$sql_session = $this->db->select('*', t_azp_fct_prefacture,
					d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "' AND " .
					d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
					d_azp_fct_prefacture_m_level . " = '1'"
				);
				# Verificar si el registro creado es igual el valor del campo nivel al valor dos
				$sql_level = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "' AND " . d_azp_fct_prefacture_m_level . " = '2'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (false == $sql_session && false == $sql_level) {
					# Verificiar si el valor recibido de la sql es diferente del digitado
					throw new Exception('<b>Error:</b> No tienes suficientes permisos superiores para actualizar el registro.');
				}
				#-------------------------------------------------------------------------#
				return false;
			} catch (Exception $e) {
				return array('success' => 0, 'message' => $e->getMessage());
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Update
		final public function sql_azp_fct_prefacture_delete(array $data) : array {
			$var_error = $this->error_sql_azp_fct_prefacture_delete($data);
			if (!is_bool($var_error)) { return $var_error; }
			if (!isset($_SESSION[SESS_APP_ID])) {
				# Redireccionar a una pagina segun el metodo cargado
				return array('error' => 1, 'message' => '<b>Error:</b> La sesión ha caducado, vuelve a iniciar sesión dando clic <a href="' . URL . 'login/?field_id=session">aqui</a>.');
			} else {
				#-------------------------------------------------------------------------#
				# Control para caracteres especiales recibidos
				$empty_id = $this->db->scape($data['field_id_delete']);
				#-------------------------------------------------------------------------#
				# Array para asignar argumentos o valores a los elementos
				$var_array = array(d_azp_fct_prefacture_m_deleted => '3',);
				# Query Sql Update: Actualizar valores de la tabla segun sus campos
				$this->db->update(t_azp_fct_prefacture, $var_array, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "'");
				#-------------------------------------------------------------------------#
				# Retornar el mensaje una vez ejecutada la rutina del proceso
				return array('success' => 1, 'message' => '<b>Exito:</b> Registro eliminado correctamente.');
			}
		}

		/*=========================================================================================================================*/
		# Control Errores Insert
		final private function error_sql_azp_fct_prefacture_insert(array $data) {
			try {
				#-------------------------------------------------------------------------#
				if (!isset($data['field_cr_description'])) { throw new Exception('<b>Error:</b> El campo de descripcion esta prohibido modificar.'); }
				if (!isset($data['field_cr_purchase'])) { throw new Exception('<b>Error:</b> El campo de comprados esta prohibido modificar.'); }
				if (!isset($data['field_cr_tariff'])) { throw new Exception('<b>Error:</b> El campo de servicio esta prohibido modificar.'); }
				#-------------------------------------------------------------------------#
				$empty_description = $this->db->scape($data['field_cr_description']);
				$empty_purchase = $this->db->scape($data['field_cr_purchase']);
				$empty_tariff = $this->db->scape($data['field_cr_tariff']);
				#-------------------------------------------------------------------------#
				if (isset($_SESSION['pe_time']) and end($_SESSION['pe_time']) >= time()) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('No puedes realizar tantas acciones seguidas.');
				}
				#-------------------------------------------------------------------------#
				if (Func::emp($empty_purchase)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de comprados es obligatorio.');
				}
				#---------------------------------------------#
				if (!is_numeric($empty_purchase)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de comprados solo permite letras.');
				}
				#---------------------------------------------#
				if (strlen($empty_purchase) > 255) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de comprados permite maximo hasta 255 caracteres.');
				}
				#---------------------------------------------#
				/*if (strpos($empty_purchase, '  ')) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de comprados no permite tener más de un espacio en blanco seguido.');
				}*/
				#---------------------------------------------#
				/*if (preg_match('/^\s|\s$/', $empty_purchase)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de comprados no permite tener espacios en blanco al principio o al final.');
				}*/
				#-------------------------------------------------------------------------#
				if (Func::emp($empty_tariff) || strtolower($empty_tariff) == strtolower('seleccionar') || $empty_tariff == 0) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de tarifas es obligatorio.');
				}
				#---------------------------------------------#
				if (!is_numeric($empty_tariff)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de tarifas solo permite numeros.');
				}
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$sql_found = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $empty_tariff . "'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (true != $sql_found) { throw new Exception('<b>Error:</b> El tarifario seleccionado no se encuentra registrado.'); }
				#-------------------------------------------------------------------------#
				return false;
			} catch (Exception $e) {
				return array('success' => 0, 'message' => $e->getMessage());
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Insert
		final public function sql_azp_fct_prefacture_insert(array $data) : array {
			$var_error = $this->error_sql_azp_fct_prefacture_insert($data);
			if (!is_bool($var_error)) { return $var_error; }
			if (!isset($_SESSION[SESS_APP_ID])) {
				# Redireccionar a una pagina segun el metodo cargado
				return array('error' => 1, 'message' => '<b>Error:</b> La sesión ha caducado, vuelve a iniciar sesión dando clic <a href="' . URL . 'login/?field_id=session">aqui</a>.');
			} else {
				#-------------------------------------------------------------------------#
				$var_search = array(' ', '$', ',', '.00'); $var_replace = array('', '', '', '');
				#-------------------------------------------------------------------------#
				$empty_description = $this->db->scape($data['field_cr_description']);
				$empty_purchase = $this->db->scape($data['field_cr_purchase']);
				$empty_tariff = $this->db->scape($data['field_cr_tariff']);
				#-------------------------------------------------------------------------#
				# Array para asignar argumentos o valores a los elementos
				$var_array = array(
					d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
					d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
					d_azp_fct_prefacture_m_date_created => DATE_HOUR,
					d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
					d_azp_fct_prefacture_m_deleted => '1',
					d_azp_fct_prefacture_m_description => $empty_description,
					d_azp_fct_prefacture_m_level => '2',
					d_azp_fct_prefacture_m_status => '1',
					d_azp_fct_prefacture_m_temp => '2',
					d_azp_fct_prefacture_t_honorary => '0',
					d_azp_fct_prefacture_t_purchase => $empty_purchase,
					d_azp_fct_prefacture_t_repayment => '0',
					d_azp_fct_prefacture_v_id_azp_fct_tariff => $empty_tariff,
				);
				# Query Sql Insert: Registrar valores en la tabla segun sus campos
				$this->db->insert(t_azp_fct_prefacture, $var_array);
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_purchase = $value[d_azp_fct_prefacture_t_purchase]; endforeach; } else { $var_purchase = 0; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff]; endforeach; } else { $var_tariff = 0; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
					foreach ($var_sql as $key => $value):
						# Asignacion de valores a nuevas variables
						$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
						$var_honorary = $var_purchase * $var_value;
						# Array para asignar argumentos o valores a los elementos
						$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
						# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
						$this->db->update(t_azp_fct_prefacture, $var_array,
							d_azp_fct_prefacture_m_temp . " = '2' AND " .
							d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
						);
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Array para asignar argumentos o valores a los elementos
				$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
				# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
				$this->db->update(t_azp_fct_prefacture, $var_array,
					d_azp_fct_prefacture_m_temp . " = '2' AND " .
					d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
				);
				#-------------------------------------------------------------------------#
				# Retornar el mensaje una vez ejecutada la rutina del proceso
				return array('success' => 1, 'message' => '<b>Exito:</b> Registro completado correctamente.');
			}
		}

		/*=========================================================================================================================*/
		# Control Errores Update
		final private function error_sql_azp_fct_prefacture_remove(array $data) {
			try {
				#-------------------------------------------------------------------------#
				if (!isset($data['field_id_remove'])) { throw new Exception('<b>Error:</b> El campo de id esta prohibido modificar.'); }
				#-------------------------------------------------------------------------#
				$empty_id = $this->db->scape($data['field_id_remove']);
				#-------------------------------------------------------------------------#
				if (isset($_SESSION['pe_time']) and end($_SESSION['pe_time']) >= time()) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('No puedes realizar tantas acciones seguidas.');
				}
				#-------------------------------------------------------------------------#
				if (Func::emp($empty_id) || $empty_id == 0) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de id es obligatorio.');
				}
				#-------------------------------------------------------------------------#
				if (!is_numeric($empty_id)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de id solo permite numeros.');
				}
				#-------------------------------------------------------------------------#
				# Verificar si el registro existe en la tabla
				$sql_id = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (false == $sql_id) {
					# Verificar si el resultado devuleto no existe para asignar un valor especifico
					if (strtolower($sql_id) == '') { $sql_id[0][0] = 0; }
					# Verificiar si el valor recibido de la sql es diferente del digitado
					if (strtolower($sql_id[0][0]) != strtolower($empty_id)) {
						# Informar un mensaje al usuario por medio de una excepcion
						throw new Exception('<b>Error:</b> El registro que está removiendo no se encuentra registrado.');
					}
				}
				#-------------------------------------------------------------------------#
				# Verificar si el registro existe en la tabla
				$sql_id = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "' AND " . d_azp_fct_prefacture_m_deleted . " = '1'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (false == $sql_id) {
					# Verificar si el resultado devuleto no existe para asignar un valor especifico
					if (strtolower($sql_id) == '') { $sql_id[0][0] = 0; }
					# Verificiar si el valor recibido de la sql es diferente del digitado
					if (strtolower($sql_id[0][0]) != strtolower($empty_id)) {
						# Informar un mensaje al usuario por medio de una excepcion
						throw new Exception('<b>Error:</b> El registro que está removiendo ya se encuentra removido.');
					}
				}
				#-------------------------------------------------------------------------#
				# Verificar si el registro fue creado por el usuario root
				$sql_session = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "' AND " . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_level . " = '1'");
				# Verificar si el registro creado es igual el valor del campo nivel al valor dos
				$sql_level = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "' AND " . d_azp_fct_prefacture_m_level . " = '2'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (false == $sql_session && false == $sql_level) {
					# Verificiar si el valor recibido de la sql es diferente del digitado
					throw new Exception('<b>Error:</b> No tienes suficientes permisos superiores para actualizar el registro.');
				}
				#-------------------------------------------------------------------------#
				return false;
			} catch (Exception $e) {
				return array('success' => 0, 'message' => $e->getMessage());
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Update
		final public function sql_azp_fct_prefacture_remove(array $data) : array {
			$var_error = $this->error_sql_azp_fct_prefacture_remove($data);
			if (!is_bool($var_error)) { return $var_error; }
			if (!isset($_SESSION[SESS_APP_ID])) {
				# Redireccionar a una pagina segun el metodo cargado
				return array('error' => 1, 'message' => '<b>Error:</b> La sesión ha caducado, vuelve a iniciar sesión dando clic <a href="' . URL . 'login/?field_id=session">aqui</a>.');
			} else {
				#-------------------------------------------------------------------------#
				# Control para caracteres especiales recibidos
				$empty_id = $this->db->scape($data['field_id_remove']);
				#-------------------------------------------------------------------------#
				# Array para asignar argumentos o valores a los elementos
				$var_array = array(d_azp_fct_prefacture_m_deleted => '2',);
				# Query Sql Update: Actualizar valores de la tabla segun sus campos
				$this->db->update(t_azp_fct_prefacture, $var_array, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "'");
				#-------------------------------------------------------------------------#
				# Retornar el mensaje una vez ejecutada la rutina del proceso
				return array('success' => 1, 'message' => '<b>Exito:</b> Registro removido correctamente.');
			}
		}

		/*=========================================================================================================================*/
		# Control Errores Update
		final private function error_sql_azp_fct_prefacture_restore(array $data) {
			try {
				#-------------------------------------------------------------------------#
				if (!isset($data['field_id_restore'])) { throw new Exception('<b>Error:</b> El campo de id esta prohibido modificar.'); }
				#-------------------------------------------------------------------------#
				$empty_id = $this->db->scape($data['field_id_restore']);
				#-------------------------------------------------------------------------#
				if (isset($_SESSION['pe_time']) and end($_SESSION['pe_time']) >= time()) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('No puedes realizar tantas acciones seguidas.');
				}
				#-------------------------------------------------------------------------#
				if (Func::emp($empty_id) || $empty_id == 0) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de id es obligatorio.');
				}
				#-------------------------------------------------------------------------#
				if (!is_numeric($empty_id)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de id solo permite numeros.');
				}
				#-------------------------------------------------------------------------#
				# Verificar si el registro existe en la tabla
				$sql_id = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (false == $sql_id) {
					# Verificar si el resultado devuleto no existe para asignar un valor especifico
					if (strtolower($sql_id) == '') { $sql_id[0][0] = 0; }
					# Verificiar si el valor recibido de la sql es diferente del digitado
					if (strtolower($sql_id[0][0]) != strtolower($empty_id)) {
						# Informar un mensaje al usuario por medio de una excepcion
						throw new Exception('<b>Error:</b> El registro que está restaurando no se encuentra registrado.');
					}
				}
				#-------------------------------------------------------------------------#
				# Verificar si el registro existe en la tabla
				$sql_id = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "' AND " . d_azp_fct_prefacture_m_deleted . " = '2'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (false == $sql_id) {
					# Verificar si el resultado devuleto no existe para asignar un valor especifico
					if (strtolower($sql_id) == '') { $sql_id[0][0] = 0; }
					# Verificiar si el valor recibido de la sql es diferente del digitado
					if (strtolower($sql_id[0][0]) != strtolower($empty_id)) {
						# Informar un mensaje al usuario por medio de una excepcion
						throw new Exception('<b>Error:</b> El registro que está restaurando ya se encuentra restaurado.');
					}
				}
				#-------------------------------------------------------------------------#
				# Verificar si el registro fue creado por el usuario root
				$sql_session = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "' AND " . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_level . " = '1'");
				# Verificar si el registro creado es igual el valor del campo nivel al valor dos
				$sql_level = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "' AND " . d_azp_fct_prefacture_m_level . " = '2'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (false == $sql_session && false == $sql_level) {
					# Verificiar si el valor recibido de la sql es diferente del digitado
					throw new Exception('<b>Error:</b> No tienes suficientes permisos superiores para actualizar el registro.');
				}
				#-------------------------------------------------------------------------#
				return false;
			} catch (Exception $e) {
				return array('success' => 0, 'message' => $e->getMessage());
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Update
		final public function sql_azp_fct_prefacture_restore(array $data) : array {
			$var_error = $this->error_sql_azp_fct_prefacture_restore($data);
			if (!is_bool($var_error)) { return $var_error; }
			if (!isset($_SESSION[SESS_APP_ID])) {
				# Redireccionar a una pagina segun el metodo cargado
				return array('error' => 1, 'message' => '<b>Error:</b> La sesión ha caducado, vuelve a iniciar sesión dando clic <a href="' . URL . 'login/?field_id=session">aqui</a>.');
			} else {
				#-------------------------------------------------------------------------#
				# Control para caracteres especiales recibidos
				$empty_id = $this->db->scape($data['field_id_restore']);
				#-------------------------------------------------------------------------#
				# Array para asignar argumentos o valores a los elementos
				$var_array = array(d_azp_fct_prefacture_m_deleted => '1',);
				# Query Sql Update: Actualizar valores de la tabla segun sus campos
				$this->db->update(t_azp_fct_prefacture, $var_array, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "'");
				#-------------------------------------------------------------------------#
				# Retornar el mensaje una vez ejecutada la rutina del proceso
				return array('success' => 1, 'message' => '<b>Exito:</b> Registro restaurado correctamente.');
			}
		}

		/*=========================================================================================================================*/
		# Control Errores Update
		final private function error_sql_azp_fct_prefacture_update(array $data) {
			try {
				#-------------------------------------------------------------------------#
				if (!isset($data['field_up_id'])) { throw new Exception('<b>Error:</b> El campo de id esta prohibido modificar.'); }
				if (!isset($data['field_up_description'])) { throw new Exception('<b>Error:</b> El campo de descripcion esta prohibido modificar.'); }
				if (!isset($data['field_up_state'])) { throw new Exception('<b>Error:</b> El campo de estado esta prohibido modificar.'); }
				#-------------------------------------------------------------------------#
				$empty_id = $this->db->scape($data['field_up_id']);
				$empty_description = $this->db->scape($data['field_up_description']);
				$empty_state = $this->db->scape($data['field_up_state']);
				#-------------------------------------------------------------------------#
				if (!isset($data['field_up_name'])) { throw new Exception('<b>Error:</b> El campo de nombre esta prohibido modificar.'); }
				if (!isset($data['field_up_service'])) { throw new Exception('<b>Error:</b> El campo de servicio esta prohibido modificar.'); }
				#-------------------------------------------------------------------------#
				$empty_identification = $this->db->scape($data['field_up_name']);
				$empty_service = $this->db->scape($data['field_up_service']);
				#-------------------------------------------------------------------------#
				if (isset($_SESSION['pe_time']) and end($_SESSION['pe_time']) >= time()) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('No puedes realizar tantas acciones seguidas.');
				}
				#-------------------------------------------------------------------------#
				if (Func::emp($empty_id) || $empty_id == 0) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de id es obligatorio.');
				}
				#---------------------------------------------#
				if (!is_numeric($empty_id)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de id solo permite numeros.');
				}
				#-------------------------------------------------------------------------#
				if (Func::emp($empty_identification)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de nombre es obligatorio.');
				}
				#---------------------------------------------#
				if (!Strings::only_letters($empty_identification)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de nombre solo permite letras.');
				}
				#---------------------------------------------#
				if (strlen($empty_identification) > 255) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de nombre permite maximo hasta 255 caracteres.');
				}
				#---------------------------------------------#
				if (strpos($empty_identification, '  ')) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de nombre no permite tener más de un espacio en blanco seguido.');
				}
				#---------------------------------------------#
				if (preg_match('/^\s|\s$/', $empty_identification)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de nombre no permite tener espacios en blanco al principio o al final.');
				}
				#-------------------------------------------------------------------------#
				if (Func::emp($empty_service) || strtolower($empty_service) == strtolower('seleccionar') || $empty_service == 0) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de servicio es obligatorio.');
				}
				#---------------------------------------------#
				if (!is_numeric($empty_service)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de servicio solo permite numeros.');
				}
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$sql_found = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $empty_service . "'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (true != $sql_found) { throw new Exception('<b>Error:</b> El servicio seleccionado no se encuentra registrado.'); }
				#-------------------------------------------------------------------------#
				if (Func::emp($empty_state) || strtolower($empty_state) == strtolower('seleccionar') || $empty_state == 0) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de estado es obligatorio.');
				}
				#---------------------------------------------#
				if (!is_numeric($empty_state)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de estado solo permite numeros.');
				}
				#-------------------------------------------------------------------------#
				# Verificar si el registro existe en la tabla
				$sql_id = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (false == $sql_id) {
					# Verificar si el resultado devuleto no existe para asignar un valor especifico
					if (strtolower($sql_id) == '') { $sql_id[0][0] = 0; }
					# Verificiar si el valor recibido de la sql es diferente del digitado
					if (strtolower($sql_id[0][0]) != strtolower($empty_id)) {
						# Informar un mensaje al usuario por medio de una excepcion
						throw new Exception('<b>Error:</b> El registro que está actualizando no se encuentra registrado.');
					}
				}
				#-------------------------------------------------------------------------#
				# Verificar si el registro fue creado por el usuario root
				$sql_session = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "' AND " . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_level . " = '1'");
				# Verificar si el registro creado es igual el valor del campo nivel al valor dos
				$sql_level = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "' AND " . d_azp_fct_prefacture_m_level . " = '2'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (false == $sql_session && false == $sql_level) {
					# Verificiar si el valor recibido de la sql es diferente del digitado
					throw new Exception('<b>Error:</b> No tienes suficientes permisos superiores para actualizar el registro.');
				}
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$sql_state = $this->db->select('*', t_azp_sys_state, d_azp_sys_state_id_azp_sys_state . " = '" . $empty_state . "'");
				# Verificar si el resultado de la sql es verdadero o falso
				if (false == $sql_state) {
					# Verificar si el resultado devuleto no existe para asignar un valor especifico
					if (strtolower($sql_state) == '') { $sql_state[0][0] = 0; }
					# Verificiar si el valor recibido de la sql es diferente del digitado
					if (strtolower($sql_state[0][0]) != strtolower($empty_state)) {
						# Informar un mensaje al usuario por medio de una excepcion
						throw new Exception('<b>Error:</b> El estado seleccionado no se encuentra registrado.');
					}
				}
				#-------------------------------------------------------------------------#
				return false;
			} catch (Exception $e) {
				return array('success' => 0, 'message' => $e->getMessage());
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Update
		final public function sql_azp_fct_prefacture_update(array $data) : array {
			$var_error = $this->error_sql_azp_fct_prefacture_update($data);
			if (!is_bool($var_error)) { return $var_error; }
			if (!isset($_SESSION[SESS_APP_ID])) {
				# Redireccionar a una pagina segun el metodo cargado
				return array('error' => 1, 'message' => '<b>Error:</b> La sesión ha caducado, vuelve a iniciar sesión dando clic <a href="' . URL . 'login/?field_id=session">aqui</a>.');
			} else {
				#-------------------------------------------------------------------------#
				$empty_id = $this->db->scape($data['field_up_id']);
				$empty_description = $this->db->scape($data['field_up_description']);
				$empty_state = $this->db->scape($data['field_up_state']);
				#-------------------------------------------------------------------------#
				$empty_identification = $this->db->scape($data['field_up_name']);
				$empty_service = $this->db->scape($data['field_up_service']);
				#-------------------------------------------------------------------------#
				# Linea de codigo con una variable y array para seleccionar los datos de la tabla segun el id
				$var_sql_select = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "'");
				# Validar si la sentencia query ejecutada es correcta y no falsa
				if (false != $var_sql_select) {
					# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
					foreach ($var_sql_select as $key_sql_select):
						$var_array = array(
							d_azs_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
							d_azs_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
							d_azs_fct_prefacture_m_date_created => DATE_HOUR,
							d_azs_fct_prefacture_m_date_modified => DATE_HOUR,
							d_azs_fct_prefacture_m_deleted => $key_sql_select[d_azp_fct_prefacture_m_deleted],
							d_azs_fct_prefacture_m_description => $key_sql_select[d_azp_fct_prefacture_m_description],
							d_azs_fct_prefacture_m_level => $key_sql_select[d_azp_fct_prefacture_m_level],
							d_azs_fct_prefacture_m_status => $key_sql_select[d_azp_fct_prefacture_m_status],
							d_azs_fct_prefacture_m_temp => $key_sql_select[d_azp_fct_prefacture_m_temp],
							d_azs_fct_prefacture_t_honorary => strtoupper($key_sql_select[d_azp_fct_prefacture_t_honorary]),
							d_azs_fct_prefacture_u_fct_tariff => strtoupper($key_sql_select[d_azp_fct_prefacture_v_id_azp_fct_tariff]),
							d_azs_fct_prefacture_v_id_azp_fct_prefacture => $empty_id,
						);
						# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
						$this->db->insert(t_azs_fct_prefacture, $var_array);
					endforeach;
				}
				# Array para asignar argumentos o valores a los elementos
				$var_array = array(
					d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
					d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
					d_azp_fct_prefacture_m_description => $empty_description,
					d_azp_fct_prefacture_m_status => $empty_state,
					d_azp_fct_prefacture_t_honorary => strtoupper($empty_identification),
					d_azp_fct_prefacture_v_id_azp_fct_tariff => strtoupper($empty_service),
				);
				# Query Sql Update: Actualizar valores de la tabla segun sus campos
				$this->db->update(t_azp_fct_prefacture, $var_array, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "'");
				#-------------------------------------------------------------------------#
				# Retornar el mensaje una vez ejecutada la rutina del proceso
				return array('success' => 1, 'message' => '<b>Exito:</b> Registro actualizado correctamente.');
			}
		}
		
		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_select_tc_azp_fct_tariff() {
			# Seleccionar los registros de la tabla
			return $this->db->select('*', t_azp_fct_tariff,
				d_azp_fct_tariff_m_deleted . " = '1' AND " .
				d_azp_fct_tariff_m_status . " = '1'"
			);
		}

		/*=========================================================================================================================*/
		# Control Errores Update
		final private function error_sql_azp_fct_prefacture_invoice(array $data) {
			try {
				#-------------------------------------------------------------------------#
				if (!isset($data['field_iv_number'])) { throw new Exception('<b>Error:</b> El campo de numero factura esta prohibido modificar.'); }
				#-------------------------------------------------------------------------#
				$empty_number = $this->db->scape($data['field_iv_number']);
				#-------------------------------------------------------------------------#
				if (isset($_SESSION['pe_time']) and end($_SESSION['pe_time']) >= time()) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('No puedes realizar tantas acciones seguidas.');
				}
				#-------------------------------------------------------------------------#
				if (Func::emp($empty_number)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de numero factura es oblgitario.');
				}
				#---------------------------------------------#
				/*if (!Strings::only_letters($empty_number)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de numero factura solo permite letras.');
				}*/
				#---------------------------------------------#
				if (strlen($empty_number) > 255) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de numero factura permite maximo hasta 255 caracteres.');
				}
				#---------------------------------------------#
				if (strpos($empty_number, ' ')) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de numero factura no permite tener más de un espacio en blanco seguido.');
				}
				#---------------------------------------------#
				if (preg_match('/^\s|\s$/', $empty_number)) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de numero factura no permite tener ningun espacio en blanco.');
				}
				#-------------------------------------------------------------------------#
				return false;
			} catch (Exception $e) {
				return array('success' => 0, 'message' => $e->getMessage());
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Update
		final public function sql_azp_fct_prefacture_invoice(array $data) : array {
			$var_error = $this->error_sql_azp_fct_prefacture_invoice($data);
			if (!is_bool($var_error)) { return $var_error; }
			if (!isset($_SESSION[SESS_APP_ID])) {
				# Redireccionar a una pagina segun el metodo cargado
				return array('error' => 1, 'message' => '<b>Error:</b> La sesión ha caducado, vuelve a iniciar sesión dando clic <a href="' . URL . 'login/?field_id=session">aqui</a>.');
			} else {
				#-------------------------------------------------------------------------#
				$var_check = $data['field_iv_check'];
				//$var_register = $data['field_tb_id'];
				$var_number = $data['field_iv_number'];
				#-------------------------------------------------------------------------#
				# Separar la cadena usando un delimitador
				$var_array = explode(",", $var_check);
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_array as $key => $value) {
					# Asignacion de valores a nuevas variables
					$empty_id = $this->db->scape($value);
					$empty_number = $this->db->scape($var_number);
					# Linea de codigo con una variable y array para seleccionar los datos de la tabla segun el id
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "'");
					# Validar si la sentencia query ejecutada es correcta y no falsa
					if (false != $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key_sql => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_invoice_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_invoice_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_invoice_m_date_created => DATE_HOUR,
								d_azp_fct_invoice_m_date_modified => DATE_HOUR,
								d_azp_fct_invoice_m_deleted => '1',
								d_azp_fct_invoice_m_description => '',
								d_azp_fct_invoice_m_level => '2',
								d_azp_fct_invoice_m_status => '1',
								d_azp_fct_invoice_m_temp => '2',
								d_azp_fct_invoice_s_iva => '',
								d_azp_fct_invoice_s_value => '',
								d_azp_fct_invoice_t_certificate => $value[d_azp_fct_prefacture_t_certificate],
								d_azp_fct_invoice_t_city => $value[d_azp_fct_prefacture_t_city],
								d_azp_fct_invoice_t_coverage => $value[d_azp_fct_prefacture_t_coverage],
								d_azp_fct_invoice_t_date_request => $value[d_azp_fct_prefacture_t_date_request],
								d_azp_fct_invoice_t_honorary => $value[d_azp_fct_prefacture_t_honorary],
								d_azp_fct_invoice_t_number => $var_number,
								d_azp_fct_invoice_t_purchase => $value[d_azp_fct_prefacture_t_purchase],
								d_azp_fct_invoice_t_repayment => $value[d_azp_fct_prefacture_t_repayment],
								d_azp_fct_invoice_t_request => $value[d_azp_fct_prefacture_t_request],
								d_azp_fct_invoice_t_state => 'Facturado',
								d_azp_fct_invoice_v_id_azp_fct_client => $value[d_azp_fct_prefacture_v_id_azp_fct_client],
								d_azp_fct_invoice_v_id_azp_fct_service => $value[d_azp_fct_prefacture_v_id_azp_fct_service],
								d_azp_fct_invoice_v_id_azp_fct_tariff => $value[d_azp_fct_prefacture_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_invoice, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Linea de codigo con una variable y array para seleccionar los datos de la tabla segun el id
					$var_sql = $this->db->select('*', t_azp_fct_invoice, d_azp_fct_invoice_m_temp . " = '2'");
					# Validar si la sentencia query ejecutada es correcta y no falsa
					if (false != $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key_sql => $value):
							# Asignacion de valores a nuevas variables
							$var_invoice = $value[d_azp_fct_invoice_id_azp_fct_invoice];
							$var_tariff = $value[d_azp_fct_invoice_v_id_azp_fct_tariff];
						endforeach;
					} else { $var_invoice = ''; $var_tariff = ''; }
					#-------------------------------------------------------------------------#
					# Linea de codigo con una variable y array para seleccionar los datos de la tabla segun el id
					$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
					# Validar si la sentencia query ejecutada es correcta y no falsa
					if (false != $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key_sql => $value):
							# Asignacion de valores a nuevas variables
							$var_iva = $value[d_azp_fct_tariff_t_iva];
							$var_value = $value[d_azp_fct_tariff_t_value];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_invoice_s_iva => $var_iva, d_azp_fct_invoice_s_value => $var_value,);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_invoice, $var_array, d_azp_fct_invoice_id_azp_fct_invoice . " = '" . $var_invoice . "'");
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_t_state => 'Facturado',);
					# Query Sql Update: Actualizar valores de la tabla segun sus campos
					$this->db->update(t_azp_fct_prefacture, $var_array, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $empty_id . "'");
				}
				#-------------------------------------------------------------------------#
				# Array para asignar argumentos o valores a los elementos
				$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
				# Query Sql Update: Actualizar valores de la tabla segun sus campos
				$this->db->update(t_azp_fct_prefacture, $var_array,
					d_azp_fct_prefacture_m_temp . " = '2' AND " .
					d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
				);
				#-------------------------------------------------------------------------#
				# Recorrer los datos uno por uno segun los seleccionados
				//for ($i = 0; $i < count($var_register); $i++) {
				//	$empty_id = $this->db->scape($var_register[$i]);
				//	$empty_number = $this->db->scape($var_number[$i]);
				//}
				#-------------------------------------------------------------------------#
				# Retornar el mensaje una vez ejecutada la rutina del proceso
				return array('success' => 1, 'message' => '<b>Exito:</b> Base calculada correctamente.');
			}
		}

		/*=========================================================================================================================*/
		# Control Errores Update
		final private function error_sql_azp_fct_prefacture_calculate(array $data) {
			try {
				#-------------------------------------------------------------------------#
				if (!isset($data['field_ct_since'])) { throw new Exception('<b>Error:</b> El campo de fecha inicio esta prohibido modificar.'); }
				if (!isset($data['field_ct_until'])) { throw new Exception('<b>Error:</b> El campo de fecha fin esta prohibido modificar.'); }
				if (!isset($data['field_ct_certificate'])) { throw new Exception('<b>Error:</b> El campo de modulo certificados esta prohibido modificar.'); }
				if (!isset($data['field_ct_defunction'])) { throw new Exception('<b>Error:</b> El campo de modulo defuncion esta prohibido modificar.'); }
				if (!isset($data['field_ct_investigation'])) { throw new Exception('<b>Error:</b> El campo de modulo investigacion esta prohibido modificar.'); }
				#-------------------------------------------------------------------------#
				$empty_since = $this->db->scape($data['field_ct_since']);
				$empty_until = $this->db->scape($data['field_ct_until']);
				$empty_certificate = $this->db->scape($data['field_ct_certificate']);
				$empty_defunction = $this->db->scape($data['field_ct_defunction']);
				$empty_investigation = $this->db->scape($data['field_ct_investigation']);
				$empty_client = $this->db->scape($data['field_ct_client']);
				#-------------------------------------------------------------------------#
				if (isset($_SESSION['pe_time']) and end($_SESSION['pe_time']) >= time()) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('No puedes realizar tantas acciones seguidas.');
				}
				#-------------------------------------------------------------------------#
				if (Func::emp($empty_since) || $empty_since == 'aaaa-mm-dd') {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de fecha inicio es oblgitario.');
				}
				#---------------------------------------------#
				if (strlen($empty_since) < 10 || strlen($empty_since) > 10) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de fecha inicio está mal diligenciado, debe ser aaaa-mm-dd.');
				}
				#-------------------------------------------------------------------------#
				if (Func::emp($empty_until) || $empty_until == 'aaaa-mm-dd') {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de fecha fin es oblgitario.');
				}
				#---------------------------------------------#
				if (strlen($empty_until) < 10 || strlen($empty_until) > 10) {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> El campo de fecha fin está mal diligenciado, debe ser aaaa-mm-dd.');
				}
				#-------------------------------------------------------------------------#
				if ($empty_certificate == 'NO' && $empty_defunction == 'NO' && $empty_investigation == 'NO') {
					# Informar un mensaje al usuario por medio de una excepcion
					throw new Exception('<b>Error:</b> Se debe seleccionar minimo un modulo para realizar el calculo.');
				}
				#-------------------------------------------------------------------------#
				return false;
			} catch (Exception $e) {
				return array('success' => 0, 'message' => $e->getMessage());
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Update
		final public function sql_azp_fct_prefacture_calculate(array $data) : array {
			$var_error = $this->error_sql_azp_fct_prefacture_calculate($data);
			if (!is_bool($var_error)) { return $var_error; }
			if (!isset($_SESSION[SESS_APP_ID])) {
				# Redireccionar a una pagina segun el metodo cargado
				return array('error' => 1, 'message' => '<b>Error:</b> La sesión ha caducado, vuelve a iniciar sesión dando clic <a href="' . URL . 'login/?field_id=session">aqui</a>.');
			} else {
				#-------------------------------------------------------------------------#
				$empty_since = $this->db->scape($data['field_ct_since']);
				$empty_until = $this->db->scape($data['field_ct_until']);
				$empty_certificate = $this->db->scape($data['field_ct_certificate']);
				$empty_defunction = $this->db->scape($data['field_ct_defunction']);
				$empty_investigation = $this->db->scape($data['field_ct_investigation']);
				$empty_client = $this->db->scape($data['field_ct_client']);
				#-------------------------------------------------------------------------#
				if ($empty_certificate == 'SI') { $empty_scertificate = $this->db->scape($data['field_cs_certificate']); } else { $empty_scertificate = ''; }
				if ($empty_defunction == 'SI') { $empty_sdefunction = $this->db->scape($data['field_cs_defunction']); } else { $empty_sdefunction = ''; }
				if ($empty_investigation == 'SI') { $empty_sinvestigation = $this->db->scape($data['field_cs_investigation']); } else { $empty_sinvestigation = ''; }
				#-------------------------------------------------------------------------#
				# Instanciando el modelo en una variable
				$var_model = new m_azp_fct_prefactureModel;
				$var_model->sql_azp_fct_prefacture_drop_delete();
				if ($empty_certificate == 'SI') { $var_model->sql_azp_fct_prefacture_certificate($empty_client, $empty_since, $empty_until, $empty_scertificate); }
				if ($empty_defunction == 'SI') { $var_model->sql_azp_fct_prefacture_defunction($empty_client, $empty_since, $empty_until, $empty_sdefunction); }
				if ($empty_investigation == 'SI') { $var_model->sql_azp_fct_prefacture_investigation($empty_client, $empty_since, $empty_until, $empty_sinvestigation); }
				$var_model->sql_azp_fct_prefacture_invoicing();
				#-------------------------------------------------------------------------#
				# Retornar el mensaje una vez ejecutada la rutina del proceso
				return array('success' => 1, 'message' => '<b>Exito:</b> Base calculada correctamente.');
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_azp_fct_prefacture_drop_delete() {
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_prefacture . " WHERE " . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
			//$var_sql = $this->db->query("ALTER TABLE " . t_azp_fct_prefacture . " AUTO_INCREMENT = 1;");
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_azp_fct_prefacture_certificate(string $empty_client, string $var_since, string $var_until, string $var_subservice) {
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_subservice . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_subrservice = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_subrservice = ''; }
			# Verificar si el resultado de la sql es verdadero o falso
			if ($var_subrservice == 'TODO') { $var_query_sub = ''; } else { $var_query_sub = "AND tc_azp_crt_request_type." . d_azp_crt_request_type_t_name . " = '" . $var_subrservice . "'"; }
			#-------------------------------------------------------------------------#
			$var_search = array(' ', '$', ',', '.00'); $var_replace = array('', '', '', '');
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("
				SELECT
					tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'lbl_azp_fct_client_id_azp_fct_client',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_crt_city." . d_azp_crt_city_t_name . " AS 'lbl_azp_crt_city_t_name',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " AS 'lbl_azp_crt_request_data_t_date_delivery',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_date . " AS 'lbl_azp_crt_request_data_t_request_date',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " AS 'lbl_azp_crt_request_data_t_request_nro',
					tc_azp_crt_request_type." . d_azp_crt_request_type_id_azp_crt_request_type . " AS 'lbl_azp_crt_request_type_id_azp_crt_request_type',
					tc_azp_crt_request_type." . d_azp_crt_request_type_t_name . " AS 'lbl_azp_crt_request_type_t_name',
					tc_azp_crt_phase." . d_azp_crt_phase_t_name . " AS 'lbl_azp_crt_phase_t_name',
					COUNT(tc_azp_crt_request_data." . d_azp_crt_request_data_id_azp_crt_request_data . ") AS 'lbl_azp_crt_request_data_id_azp_crt_request_data'
				FROM " . t_azp_crt_request_data . " tc_azp_crt_request_data

				INNER JOIN " . t_azp_crt_client . " tc_azp_crt_client
					ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_client . "
						= tc_azp_crt_client." . d_azp_crt_client_id_azp_crt_client . "

				INNER JOIN " . t_azp_crt_city . " tc_azp_crt_city
					ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_city . "
						= tc_azp_crt_city." . d_azp_crt_city_id_azp_crt_city . "

				INNER JOIN " . t_azp_crt_request_type . " tc_azp_crt_request_type
					ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_request_type . "
						= tc_azp_crt_request_type." . d_azp_crt_request_type_id_azp_crt_request_type . "

				INNER JOIN " . t_azp_crt_bank . " tc_azp_crt_bank
					ON tc_azp_crt_client." . d_azp_crt_client_v_id_azp_crt_bank . "
						= tc_azp_crt_bank." . d_azp_crt_bank_id_azp_crt_bank . "

				INNER JOIN " . t_azp_crt_phase . " tc_azp_crt_phase
					ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_phase . "
						= tc_azp_crt_phase." . d_azp_crt_phase_id_azp_crt_phase . "
						
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_crt_bank." . d_azp_crt_bank_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

				WHERE tc_azp_crt_request_data." . d_azp_crt_request_data_m_deleted . " = '1'
					AND tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_phase . " = 4 " . $var_query_sub . "
					AND tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_request_type . " >= 2
					AND (tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " >= '" . $var_since . "'
						AND tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " <= '" . $var_until . "')
					AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")
				GROUP BY tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_client . " ASC,
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " ASC,
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " ASC,
					tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_request_type . " ASC,
					tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_city . " ASC
			");
			#-------------------------------------------------------------------------#
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(
						d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
						d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
						d_azp_fct_honorary_m_date_created => DATE_HOUR,
						d_azp_fct_honorary_m_date_modified => DATE_HOUR,
						d_azp_fct_honorary_m_deleted => '1',
						d_azp_fct_honorary_m_description => '',
						d_azp_fct_honorary_m_level => '2',
						d_azp_fct_honorary_m_status => '1',
						d_azp_fct_honorary_m_temp => '2',
						d_azp_fct_honorary_t_certificate => $value['lbl_azp_crt_request_type_t_name'],
						d_azp_fct_honorary_t_city => $value['lbl_azp_crt_city_t_name'],
						d_azp_fct_honorary_t_coverage => '',
						d_azp_fct_honorary_t_date_request => $value['lbl_azp_crt_request_data_t_request_date'],
						d_azp_fct_honorary_t_date_send => $value['lbl_azp_crt_request_data_t_date_delivery'],
						d_azp_fct_honorary_t_honorary => '0',
						d_azp_fct_honorary_t_number => '0',
						d_azp_fct_honorary_t_purchase => $value['lbl_azp_crt_request_data_id_azp_crt_request_data'],
						d_azp_fct_honorary_t_repayment => '0',
						d_azp_fct_honorary_t_request => $value['lbl_azp_crt_request_data_t_request_nro'],
						d_azp_fct_honorary_t_state => 'Activo',
						d_azp_fct_honorary_v_id_azp_fct_client => $value['lbl_azp_fct_client_id_azp_fct_client'],
						d_azp_fct_honorary_v_id_azp_fct_service => '1',
						d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
					);
					# Query Sql Insert: Registrar valores en la tabla segun sus campos
					$this->db->insert(t_azp_fct_honorary, $var_array);
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary, d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_honorary_m_temp . " = '2'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
					$var_city = $value[d_azp_fct_honorary_t_city];
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
							# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_m_temp . " = '2' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
							);
						endforeach;
					} else {
						# Array para asignar argumentos o valores a los elementos
						$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
						# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
						$this->db->update(t_azp_fct_honorary, $var_array,
							d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
							d_azp_fct_honorary_m_temp . " = '2' AND " .
							d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
						);
					}
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("
				SELECT
					tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
				FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
					AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '1'
				-- ---------------------------------------------------------------
				GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
					tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
			");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
					$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_t_number => '1',);
					# Query Sql Insert: Registrar valores en la tabla segun sus campos
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
						d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
					);
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary,
				d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
				d_azp_fct_honorary_m_temp . " = '2' AND " .
				d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
				d_azp_fct_honorary_t_number . " = '1'"
			);
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary,
				d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
				d_azp_fct_honorary_m_temp . " = '2' AND " .
				d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
				d_azp_fct_honorary_t_number . " = '1'"
			);
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary,
				d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
				d_azp_fct_honorary_m_temp . " = '2' AND " .
				d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
				d_azp_fct_honorary_t_number . " = '1'"
			);
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary,
				d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
				d_azp_fct_honorary_m_temp . " = '2' AND " .
				d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
				d_azp_fct_honorary_t_number . " = '1'"
			);
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary,
				d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
				d_azp_fct_honorary_m_temp . " = '2' AND " .
				d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
				d_azp_fct_honorary_t_number . " = '1'"
			);
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary,
				d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
				d_azp_fct_honorary_m_temp . " = '2' AND " .
				d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
				d_azp_fct_honorary_t_number . " = '1'"
			);
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary,
				d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
				d_azp_fct_honorary_m_temp . " = '2' AND (" .
					$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
					$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
					d_azp_fct_honorary_t_coverage . " = '_'
				)
			");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(
						d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
						d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
						d_azp_fct_honorary_m_date_created => DATE_HOUR,
						d_azp_fct_honorary_m_date_modified => DATE_HOUR,
						d_azp_fct_honorary_m_deleted => '1',
						d_azp_fct_honorary_m_description => '',
						d_azp_fct_honorary_m_level => '2',
						d_azp_fct_honorary_m_status => '1',
						d_azp_fct_honorary_m_temp => '1',
						d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
						d_azp_fct_honorary_t_city => 'NACIONAL',
						d_azp_fct_honorary_t_coverage => 'TODO',
						d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
						d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
						d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
						d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
						d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
						d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
						d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
						d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
						d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
						d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
					);
					# Query Sql Insert: Registrar valores en la tabla segun sus campos
					$this->db->insert(t_azp_fct_honorary, $var_array);
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("
				SELECT
					" . d_azp_fct_honorary_t_certificate . ",
					" . d_azp_fct_honorary_t_city . ",
					" . d_azp_fct_honorary_t_coverage . ",
					" . d_azp_fct_honorary_t_date_request . ",
					" . d_azp_fct_honorary_t_date_send . ",
					" . d_azp_fct_honorary_t_honorary . ",
					SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
					" . d_azp_fct_honorary_t_repayment . ",
					" . d_azp_fct_honorary_t_request . ",
					" . d_azp_fct_honorary_t_state . ",
					" . d_azp_fct_honorary_v_id_azp_fct_client . ",
					" . d_azp_fct_honorary_v_id_azp_fct_service . ",
					" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
				FROM " . t_azp_fct_honorary . "
				WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
				GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
					" . d_azp_fct_honorary_t_certificate . " ASC,
					" . d_azp_fct_honorary_t_coverage . " ASC,
					" . d_azp_fct_honorary_t_request . " ASC,
					" . d_azp_fct_honorary_t_date_request . " ASC
				ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
					" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
					" . d_azp_fct_honorary_t_request . " ASC,
					" . d_azp_fct_honorary_t_date_request . " ASC
			");
			#-------------------------------------------------------------------------#
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(
						d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
						d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
						d_azp_fct_prefacture_m_date_created => DATE_HOUR,
						d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
						d_azp_fct_prefacture_m_deleted => '1',
						d_azp_fct_prefacture_m_description => '',
						d_azp_fct_prefacture_m_level => '2',
						d_azp_fct_prefacture_m_status => '1',
						d_azp_fct_prefacture_m_temp => '2',
						d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
						d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
						d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
						d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
						d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
						d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
						d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
						d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
						d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
						d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
						d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
						d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
						d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
					);
					# Query Sql Insert: Registrar valores en la tabla segun sus campos
					$this->db->insert(t_azp_fct_prefacture, $var_array);
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
					$var_city = $value[d_azp_fct_prefacture_t_city];
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
							# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
							$this->db->update(t_azp_fct_prefacture, $var_array,
								d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_prefacture_m_temp . " = '2' AND " .
								d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
							);
						endforeach;
					} else {
						# Array para asignar argumentos o valores a los elementos
						$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
						# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
						$this->db->update(t_azp_fct_prefacture, $var_array,
							d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
							d_azp_fct_prefacture_m_temp . " = '2' AND " .
							d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
						);
					}
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_city = $value[d_azp_fct_prefacture_t_city];
					$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
					$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
					$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
					$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
							tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
							tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
							tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
							tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
							tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
							tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
							tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
							tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
							tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
						FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
								= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
								= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
								= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
								= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
								= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
							AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'

							AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
							AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
								AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

							AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
							AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = '" . $var_certificate . "'
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
							//$var_client = $value['lbl_azp_fct_client_t_name'];
							$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
							$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
							$var_result = $value['lbl_azp_fct_result_t_name'];
							$var_max = $value['lbl_azp_fct_scale_t_max'];
							$var_min = $value['lbl_azp_fct_scale_t_min'];
							$var_scale = $value['lbl_azp_fct_scale_t_name'];
							//$var_service = $value['lbl_azp_fct_service_t_name'];
							$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
							# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
							$this->db->update(t_azp_fct_prefacture, $var_array,
								d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_prefacture_m_temp . " = '2' AND " .
								d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
							);
						endforeach;
					}
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
					$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
							$var_honorary = $var_purchase * $var_value;
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
							# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
							$this->db->update(t_azp_fct_prefacture, $var_array,
								d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_prefacture_m_temp . " = '2' AND " .
								d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
						endforeach;
					}
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Array para asignar argumentos o valores a los elementos
			$var_array = array(d_azp_fct_honorary_m_temp => '1',);
			# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
			$this->db->update(t_azp_fct_honorary, $var_array,
				d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
				d_azp_fct_honorary_m_temp . " = '2'"
			);
			#-------------------------------------------------------------------------#
			# Array para asignar argumentos o valores a los elementos
			$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
			# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
			$this->db->update(t_azp_fct_prefacture, $var_array,
				d_azp_fct_prefacture_m_temp . " = '2' AND " .
				d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
			);
			#-------------------------------------------------------------------------#
			# Defincion de valores a nuevas variables
			$var_certificate = ''; $var_date_request = ''; $var_date_send = ''; $var_request = ''; $var_tariff = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_date_send = $value[d_azp_fct_prefacture_t_date_send];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
					#-------------------------------------------------------------------------#
					# Defincion de valores a nuevas variables
					$var_client = ''; $var_coverage = ''; $var_investigation = ''; $var_result = ''; $var_scale = ''; $var_service = ''; $var_sub_coverage = ''; $var_sub_service = '';
					$var_ct_3 = ''; $var_ct_4 = ''; $var_ct_5 = ''; $var_ct_6 = ''; $var_ct_7 = ''; $var_ct_8 = '';
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_client = $value[d_azp_fct_tariff_v_id_azp_fct_client];
							$var_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_coverage];
							$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
							$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
							$var_scale = $value[d_azp_fct_tariff_v_id_azp_fct_scale];
							$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
							$var_sub_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_sub_coverage];
							$var_sub_service = $value[d_azp_fct_tariff_v_id_azp_fct_sub_service];
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_coverage, d_azp_fct_coverage_id_azp_fct_coverage . " = '" . $var_coverage . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_coverage = $value[d_azp_fct_coverage_t_name]; endforeach; } else { $var_id_coverage = ''; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_investigation, d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_investigation = $value[d_azp_fct_investigation_t_name]; endforeach; } else { $var_id_investigation = ''; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_result, d_azp_fct_result_id_azp_fct_result . " = '" . $var_result . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_result = $value[d_azp_fct_result_t_name]; endforeach; } else { $var_id_result = ''; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_scale, d_azp_fct_scale_id_azp_fct_scale . " = '" . $var_scale . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_scale = $value[d_azp_fct_scale_t_name]; endforeach; } else { $var_id_scale = ''; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_service, d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_service = $value[d_azp_fct_service_t_name]; endforeach; } else { $var_id_service = ''; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '" . $var_sub_coverage . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_coverage = $value[d_azp_fct_sub_coverage_t_name]; endforeach; } else { $var_id_sub_coverage = ''; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_service = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_id_sub_service = ''; }
					#-------------------------------------------------------------------------#
					if ($var_id_sub_coverage == 'NO APLICA') {
						$var_qy_sub_coverage = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " = '" . $var_id_coverage . "'";
					} else if ($var_id_sub_coverage == 'TODO') {
						# Verificar en la base de datos si existen el registro
						$var_sql = $this->db->query("
							SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
							FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
							INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
								ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
									= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
							WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
								AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
								AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '3'
								AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						");
						# Recorrer los datos de la consulta de la tabla y encodificarlos
						if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_3 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_3 = ''; }
						#-------------------------------------------------------------------------#
						# Verificar en la base de datos si existen el registro
						$var_sql = $this->db->query("
							SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
							FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
							INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
								ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
									= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
							WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
								AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
								AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '4'
								AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						");
						# Recorrer los datos de la consulta de la tabla y encodificarlos
						if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_4 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_4 = ''; }
						#-------------------------------------------------------------------------#
						# Verificar en la base de datos si existen el registro
						$var_sql = $this->db->query("
							SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
							FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
							INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
								ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
									= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
							WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
								AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
								AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '5'
								AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						");
						# Recorrer los datos de la consulta de la tabla y encodificarlos
						if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_5 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_5 = ''; }
						#-------------------------------------------------------------------------#
						# Verificar en la base de datos si existen el registro
						$var_sql = $this->db->query("
							SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
							FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
							INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
								ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
									= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
							WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
								AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
								AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '6'
								AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						");
						# Recorrer los datos de la consulta de la tabla y encodificarlos
						if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_6 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_6 = ''; }
						#-------------------------------------------------------------------------#
						# Verificar en la base de datos si existen el registro
						$var_sql = $this->db->query("
							SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
							FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
							INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
								ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
									= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
							WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
								AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
								AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '7'
								AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						");
						# Recorrer los datos de la consulta de la tabla y encodificarlos
						if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_7 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_7 = ''; }
						#-------------------------------------------------------------------------#
						# Verificar en la base de datos si existen el registro
						$var_sql = $this->db->query("
							SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
							FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
							INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
								ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
									= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
							WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
								AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
								AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '8'
								AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						");
						# Recorrer los datos de la consulta de la tabla y encodificarlos
						if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_8 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_8 = ''; }
						#-------------------------------------------------------------------------#
						$var_qy_sub_coverage = "AND (tc_azp_crt_city." . d_azp_crt_city_t_name . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
					} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
						$var_qy_sub_coverage = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " = '" . $var_id_sub_coverage . "'";
					}
					#-------------------------------------------------------------------------#
					# Seleccionar los registros de la tabla
					$var_sql = $this->db->query("
						SELECT 
							tc_azp_crt_request_data." . d_azp_crt_request_data_id_azp_crt_request_data . " AS 'lbl_azp_crt_request_data_id_azp_crt_request_data',
							tc_azp_crt_request_data." . d_azp_crt_request_data_s_date . " AS 'lbl_azp_crt_request_data_s_date',
							tc_azp_crt_request_data." . d_azp_crt_request_data_s_plaque . " AS 'lbl_azp_crt_request_data_s_plaque',
							tc_azp_crt_request_data." . d_azp_crt_request_data_s_validate . " AS 'lbl_azp_crt_request_data_s_validate',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_applicant_code . " AS 'lbl_azp_crt_request_data_t_applicant_code',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_applicant_entity . " AS 'lbl_azp_crt_request_data_t_applicant_entity',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_bilable . " AS 'lbl_azp_crt_request_data_t_bilable',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_certificate_type . " AS 'lbl_azp_crt_request_data_t_certificate_type',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_city . " AS 'lbl_azp_crt_request_data_t_city',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_client_code . " AS 'lbl_azp_crt_request_data_t_client_code',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_client_name . " AS 'lbl_azp_crt_request_data_t_client_name',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_date_image . " AS 'lbl_azp_crt_request_data_t_crt_date_image',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_date_load . " AS 'lbl_azp_crt_request_data_t_crt_date_load',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_document . " AS 'lbl_azp_crt_request_data_t_crt_document',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_error . " AS 'lbl_azp_crt_request_data_t_crt_error',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_mark_image . " AS 'lbl_azp_crt_request_data_t_crt_mark_image',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_name . " AS 'lbl_azp_crt_request_data_t_crt_name',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_route . " AS 'lbl_azp_crt_request_data_t_crt_route',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_size . " AS 'lbl_azp_crt_request_data_t_crt_size',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_tmp_name . " AS 'lbl_azp_crt_request_data_t_crt_tmp_name',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_type . " AS 'lbl_azp_crt_request_data_t_crt_type',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " AS 'lbl_azp_crt_request_data_t_date_delivery',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_entity_dispatcher . " AS 'lbl_azp_crt_request_data_t_entity_dispatcher',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_full_name . " AS 'lbl_azp_crt_request_data_t_full_name',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_identification . " AS 'lbl_azp_crt_request_data_t_identification',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_nro_oblitation . " AS 'lbl_azp_crt_request_data_t_nro_oblitation',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_observation . " AS 'lbl_azp_crt_request_data_t_observation',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_plaque_enrollment . " AS 'lbl_azp_crt_request_data_t_plaque_enrollment',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_process . " AS 'lbl_azp_crt_request_data_t_process',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_provider_class . " AS 'lbl_azp_crt_request_data_t_provider_class',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_provider_name . " AS 'lbl_azp_crt_request_data_t_provider_name',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_amount . " AS 'lbl_azp_crt_request_data_t_rcb_amount',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_date_load . " AS 'lbl_azp_crt_request_data_t_rcb_date_load',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_document . " AS 'lbl_azp_crt_request_data_t_rcb_document',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_error . " AS 'lbl_azp_crt_request_data_t_rcb_error',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_name . " AS 'lbl_azp_crt_request_data_t_rcb_name',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_nro_receipt . " AS 'lbl_azp_crt_request_data_t_rcb_nro_receipt',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_receipt . " AS 'lbl_azp_crt_request_data_t_rcb_receipt',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_route . " AS 'lbl_azp_crt_request_data_t_rcb_route',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_service . " AS 'lbl_azp_crt_request_data_t_rcb_service',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_size . " AS 'lbl_azp_crt_request_data_t_rcb_size',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_tmp_name . " AS 'lbl_azp_crt_request_data_t_rcb_tmp_name',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_type . " AS 'lbl_azp_crt_request_data_t_rcb_type',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_refundable . " AS 'lbl_azp_crt_request_data_t_refundable',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_date . " AS 'lbl_azp_crt_request_data_t_request_date',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_id . " AS 'lbl_azp_crt_request_data_t_request_id',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " AS 'lbl_azp_crt_request_data_t_request_nro',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_send_city . " AS 'lbl_azp_crt_request_data_t_send_city',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_supplier_date_delivery . " AS 'lbl_azp_crt_request_data_t_supplier_date_delivery',
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_supplier_date_request . " AS 'lbl_azp_crt_request_data_t_supplier_date_request',
							tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_city . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_city',
							tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_client . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_client',
							tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_expiration . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_expiration',
							tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_observation_type . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_observation_type',
							tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_phase . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_phase',
							tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_request_type . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_request_type',

							tc_azp_crt_bank." . d_azp_crt_bank_t_name . " AS 'lbl_azp_crt_bank_t_name',
							tc_azp_crt_city." . d_azp_crt_city_t_name . " AS 'lbl_azp_crt_city_t_name',
							tc_azp_crt_client." . d_azp_crt_client_t_code . " AS 'lbl_azp_crt_client_t_code',
							tc_azp_crt_expiration." . d_azp_crt_expiration_t_name . " AS 'lbl_azp_crt_expiration_t_name',
							tc_azp_crt_observation_type." . d_azp_crt_observation_type_t_name . " AS 'lbl_azp_crt_observation_type_t_name',
							tc_azp_crt_phase." . d_azp_crt_phase_t_name . " AS 'lbl_azp_crt_phase_t_name',
							tc_azp_crt_request_type." . d_azp_crt_request_type_t_name . " AS 'lbl_azp_crt_request_type_t_name',

							tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
							tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
							tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
						FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
						-- ------------------------------------------------------------------------ 
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
						-- ------------------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
						    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
							= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ------------------------------------------------------------------------ 
						INNER JOIN " . t_azp_crt_bank . " tc_azp_crt_bank
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_crt_bank." . d_azp_crt_bank_v_id_azp_fct_client . "
						-- ------------------------------------------------------------------------ 
						INNER JOIN " . t_azp_crt_client . " tc_azp_crt_client
							ON tc_azp_crt_bank." . d_azp_crt_bank_id_azp_crt_bank . "
								= tc_azp_crt_client." . d_azp_crt_client_v_id_azp_crt_bank . "
						-- ------------------------------------------------------------------------ 
						INNER JOIN " . t_azp_crt_request_data . " tc_azp_crt_request_data
							ON tc_azp_crt_client." . d_azp_crt_client_id_azp_crt_client . "
								= tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_client . "
						-- ------------------------------------------------------------------------ 
						INNER JOIN " . t_azp_crt_city . " tc_azp_crt_city
							ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_city . "
								= tc_azp_crt_city." . d_azp_crt_city_id_azp_crt_city . "
						-- ------------------------------------------------------------------------ 
						INNER JOIN " . t_azp_crt_expiration . " tc_azp_crt_expiration
							ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_expiration . "
								= tc_azp_crt_expiration." . d_azp_crt_expiration_id_azp_crt_expiration . "
						-- ------------------------------------------------------------------------ 
						INNER JOIN " . t_azp_crt_observation_type . " tc_azp_crt_observation_type
							ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_observation_type . "
								= tc_azp_crt_observation_type." . d_azp_crt_observation_type_id_azp_crt_observation_type . "
						-- ------------------------------------------------------------------------ 
						INNER JOIN " . t_azp_crt_phase . " tc_azp_crt_phase
							ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_phase . "
								= tc_azp_crt_phase." . d_azp_crt_phase_id_azp_crt_phase . "
						-- ------------------------------------------------------------------------ 
						INNER JOIN " . t_azp_crt_request_type . " tc_azp_crt_request_type
							ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_request_type . "
								= tc_azp_crt_request_type." . d_azp_crt_request_type_id_azp_crt_request_type . "
						-- ------------------------------------------------------------------------ 
						WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '1' " . $var_qy_sub_coverage . "
							AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
							AND (tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " >= '" . $var_date_send . "'
								AND tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " <= '" . $var_date_send . "')
							AND tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_date . " = '" . $var_date_request . "'
							AND tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " = '" . $var_request . "'
							AND tc_azp_crt_request_type." . d_azp_crt_request_type_t_name . " = '" . $var_certificate . "'
							AND tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_phase . " = '4'
							AND tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'
						-- ------------------------------------------------------------------------ 
						GROUP BY tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " ASC,
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_identification . " ASC
						-- ------------------------------------------------------------------------ 
						ORDER BY tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " ASC,
							tc_azp_crt_request_data." . d_azp_crt_request_data_t_identification . " ASC
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_register = $value['lbl_azp_crt_request_data_id_azp_crt_request_data'];
							$var_service = $value['lbl_azp_fct_tariff_t_value'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_crt_request_data_t_fct_service => $var_service,);
							# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
							$this->db->update(t_azp_crt_request_data, $var_array, d_azp_crt_request_data_id_azp_crt_request_data . " = '" . $var_register . "'");
						endforeach;
					}
				endforeach;
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_azp_fct_prefacture_defunction(string $empty_client, string $var_since, string $var_until, string $var_subservice) {
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
			#-------------------------------------------------------------------------#
			$var_search = array(' ', '$', ',', '.00'); $var_replace = array('', '', '', '');
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("
				SELECT
					tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'lbl_azp_fct_client_id_azp_fct_client',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_gsc_request." . d_azp_gsc_request_t_city . " AS 'lbl_azp_gsc_request_t_city',
					tc_azp_gsc_request." . d_azp_gsc_request_t_request_date . " AS 'lbl_azp_gsc_request_t_request_date',
					tc_azp_gsc_request." . d_azp_gsc_request_t_shipping_date . " AS 'lbl_azp_gsc_request_t_shipping_date',
					tc_azp_gsc_request." . d_azp_gsc_request_t_number_request . " AS 'lbl_azp_gsc_request_t_number_request',
					tc_azp_gsc_phase." . d_azp_gsc_phase_t_name . " AS 'lbl_azp_gsc_phase_t_name',
					COUNT(tc_azp_gsc_request." . d_azp_gsc_request_id_azp_gsc_request . ") AS 'lbl_azp_gsc_request_id_azp_gsc_request'
				FROM azp_gsc_request tc_azp_gsc_request

				INNER JOIN azp_gsc_client tc_azp_gsc_client
					ON tc_azp_gsc_request. " . d_azp_gsc_request_v_id_azp_gsc_client . "
						= tc_azp_gsc_client. " . d_azp_gsc_client_id_azp_gsc_client . "

				INNER JOIN azp_gsc_phase tc_azp_gsc_phase
					ON tc_azp_gsc_request. " . d_azp_gsc_request_v_id_azp_gsc_phase . "
						= tc_azp_gsc_phase. " . d_azp_gsc_phase_id_azp_gsc_phase . "
						
				INNER JOIN azp_fct_client tc_azp_fct_client
					ON tc_azp_gsc_client. " . d_azp_gsc_client_v_id_azp_fct_client . "
						= tc_azp_fct_client. " . d_azp_fct_client_id_azp_fct_client . "
						
				WHERE tc_azp_gsc_request." . d_azp_gsc_request_m_deleted . " = '1'
					AND tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_phase . " = 10
					AND (tc_azp_gsc_request." . d_azp_gsc_request_t_shipping_date . " >= '" . $var_since . "'
						AND tc_azp_gsc_request." . d_azp_gsc_request_t_shipping_date . " <= '" . $var_until . "')
					AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")
				GROUP BY tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_client . " ASC,
					tc_azp_gsc_request." . d_azp_gsc_request_t_number_request . " ASC,
					tc_azp_gsc_request." . d_azp_gsc_request_t_shipping_date . " ASC,
					tc_azp_gsc_request." . d_azp_gsc_request_t_city . " ASC
			");
			#-------------------------------------------------------------------------#
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(
						d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
						d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
						d_azp_fct_honorary_m_date_created => DATE_HOUR,
						d_azp_fct_honorary_m_date_modified => DATE_HOUR,
						d_azp_fct_honorary_m_deleted => '1',
						d_azp_fct_honorary_m_description => '',
						d_azp_fct_honorary_m_level => '2',
						d_azp_fct_honorary_m_status => '1',
						d_azp_fct_honorary_m_temp => '2',
						d_azp_fct_honorary_t_certificate => '',
						d_azp_fct_honorary_t_city => $value['lbl_azp_gsc_request_t_city'],
						d_azp_fct_honorary_t_coverage => '',
						d_azp_fct_honorary_t_date_request => $value['lbl_azp_gsc_request_t_request_date'],
						d_azp_fct_honorary_t_date_send => $value['lbl_azp_gsc_request_t_shipping_date'],
						d_azp_fct_honorary_t_honorary => '0',
						d_azp_fct_honorary_t_number => '0',
						d_azp_fct_honorary_t_purchase => $value['lbl_azp_gsc_request_id_azp_gsc_request'],
						d_azp_fct_honorary_t_repayment => '0',
						d_azp_fct_honorary_t_request => $value['lbl_azp_gsc_request_t_number_request'],
						d_azp_fct_honorary_t_state => 'Activo',
						d_azp_fct_honorary_v_id_azp_fct_client => $value['lbl_azp_fct_client_id_azp_fct_client'],
						d_azp_fct_honorary_v_id_azp_fct_service => '2',
						d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
					);
					# Query Sql Insert: Registrar valores en la tabla segun sus campos
					$this->db->insert(t_azp_fct_honorary, $var_array);
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary,
				d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
				d_azp_fct_honorary_m_temp . " = '2'"
			);
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
					$var_city = $value[d_azp_fct_honorary_t_city];
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
							# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_m_temp . " = '2' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
							);
						endforeach;
					} else {
						# Array para asignar argumentos o valores a los elementos
						$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
						# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
						$this->db->update(t_azp_fct_honorary, $var_array,
							d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
							d_azp_fct_honorary_m_temp . " = '2' AND " .
							d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
						);
					}
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("
				SELECT
					tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
				FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
					AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '2'
				-- ---------------------------------------------------------------
				GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
					tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
			");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
					$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_t_number => '1',);
					# Query Sql Insert: Registrar valores en la tabla segun sus campos
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
						d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
					);
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			/*$var_sql = $this->db->select('*', t_azp_fct_honorary, d_azp_fct_honorary_m_temp . " = '2' AND " . d_azp_fct_honorary_t_coverage . " = 'CALI' AND " . d_azp_fct_honorary_t_number . " = '1'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary, d_azp_fct_honorary_m_temp . " = '2' AND " . d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " . d_azp_fct_honorary_t_number . " = '1'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary, d_azp_fct_honorary_m_temp . " = '2' AND " . d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " . d_azp_fct_honorary_t_number . " = '1'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary, d_azp_fct_honorary_m_temp . " = '2' AND " . d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " . d_azp_fct_honorary_t_number . " = '1'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary, d_azp_fct_honorary_m_temp . " = '2' AND " . d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " . d_azp_fct_honorary_t_number . " = '1'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary, d_azp_fct_honorary_m_temp . " = '2' AND " . d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " . d_azp_fct_honorary_t_number . " = '1'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary,
				d_azp_fct_honorary_m_temp . " = '2' AND (" .
					$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
					$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
					d_azp_fct_honorary_t_coverage . " = '_'
				)
			");*/
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_honorary,
				d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
				d_azp_fct_honorary_m_temp . " = '2' AND (" .
					d_azp_fct_honorary_t_coverage . " = 'CALI' OR " .
					d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR " .
					d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR " .
					d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR " .
					d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR " .
					d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR " .
					d_azp_fct_honorary_t_coverage . " = 'BOGOTA'
				)
			");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(
						d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
						d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
						d_azp_fct_honorary_m_date_created => DATE_HOUR,
						d_azp_fct_honorary_m_date_modified => DATE_HOUR,
						d_azp_fct_honorary_m_deleted => '1',
						d_azp_fct_honorary_m_description => '',
						d_azp_fct_honorary_m_level => '2',
						d_azp_fct_honorary_m_status => '1',
						d_azp_fct_honorary_m_temp => '1',
						d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
						d_azp_fct_honorary_t_city => 'NACIONAL',
						d_azp_fct_honorary_t_coverage => 'TODO',
						d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
						d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
						d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
						d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
						d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
						d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
						d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
						d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
						d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
						d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
					);
					# Query Sql Insert: Registrar valores en la tabla segun sus campos
					$this->db->insert(t_azp_fct_honorary, $var_array);
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("
				SELECT
					" . d_azp_fct_honorary_t_certificate . ",
					" . d_azp_fct_honorary_t_city . ",
					" . d_azp_fct_honorary_t_coverage . ",
					" . d_azp_fct_honorary_t_date_request . ",
					" . d_azp_fct_honorary_t_date_send . ",
					" . d_azp_fct_honorary_t_honorary . ",
					SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
					" . d_azp_fct_honorary_t_repayment . ",
					" . d_azp_fct_honorary_t_request . ",
					" . d_azp_fct_honorary_t_state . ",
					" . d_azp_fct_honorary_v_id_azp_fct_client . ",
					" . d_azp_fct_honorary_v_id_azp_fct_service . ",
					" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
				FROM " . t_azp_fct_honorary . "
				WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
				GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
					" . d_azp_fct_honorary_t_certificate . " ASC,
					" . d_azp_fct_honorary_t_coverage . " ASC,
					" . d_azp_fct_honorary_t_request . " ASC,
					" . d_azp_fct_honorary_t_date_request . " ASC
				ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
					" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
					" . d_azp_fct_honorary_t_request . " ASC,
					" . d_azp_fct_honorary_t_date_request . " ASC
			");
			#-------------------------------------------------------------------------#
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(
						d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
						d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
						d_azp_fct_prefacture_m_date_created => DATE_HOUR,
						d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
						d_azp_fct_prefacture_m_deleted => '1',
						d_azp_fct_prefacture_m_description => '',
						d_azp_fct_prefacture_m_level => '2',
						d_azp_fct_prefacture_m_status => '1',
						d_azp_fct_prefacture_m_temp => '2',
						d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
						d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
						d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
						d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
						d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
						d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
						d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
						d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
						d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
						d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
						d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
						d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
						d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
					);
					# Query Sql Insert: Registrar valores en la tabla segun sus campos
					$this->db->insert(t_azp_fct_prefacture, $var_array);
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
					$var_city = $value[d_azp_fct_prefacture_t_city];
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
							# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
							$this->db->update(t_azp_fct_prefacture, $var_array,
								d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_prefacture_m_temp . " = '2' AND " .
								d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
							);
						endforeach;
					} else {
						# Array para asignar argumentos o valores a los elementos
						$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
						# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
						$this->db->update(t_azp_fct_prefacture, $var_array,
							d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
							d_azp_fct_prefacture_m_temp . " = '2' AND " .
							d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
						);
					}
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_city = $value[d_azp_fct_prefacture_t_city];
					$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
					$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
					$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
					$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
							tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
							tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
							tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
							tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
							tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
							tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
							tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
							tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
							tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
							tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
						FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
								= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
								= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
								= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
								= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
								= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
							AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
							AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

							AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
							AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
								AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

							AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
							AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'NO APLICA'
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
							//$var_client = $value['lbl_azp_fct_client_t_name'];
							$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
							$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
							$var_result = $value['lbl_azp_fct_result_t_name'];
							$var_max = $value['lbl_azp_fct_scale_t_max'];
							$var_min = $value['lbl_azp_fct_scale_t_min'];
							$var_scale = $value['lbl_azp_fct_scale_t_name'];
							//$var_service = $value['lbl_azp_fct_service_t_name'];
							$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
							# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
							$this->db->update(t_azp_fct_prefacture, $var_array,
								d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_prefacture_m_temp . " = '2' AND " .
								d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
							);
						endforeach;
					}
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
					$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
							$var_honorary = $var_purchase * $var_value;
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
							# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
							$this->db->update(t_azp_fct_prefacture, $var_array,
								d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_prefacture_m_temp . " = '2' AND " .
								d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
						endforeach;
					}
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Array para asignar argumentos o valores a los elementos
			$var_array = array(d_azp_fct_honorary_m_temp => '1',);
			# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
			$this->db->update(t_azp_fct_honorary, $var_array,
				d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
				d_azp_fct_honorary_m_temp . " = '2'"
			);
			#-------------------------------------------------------------------------#
			# Array para asignar argumentos o valores a los elementos
			$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
			# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
			$this->db->update(t_azp_fct_prefacture, $var_array,
				d_azp_fct_prefacture_m_temp . " = '2' AND " .
				d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
			);
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_azp_fct_prefacture_investigation(string $empty_client, string $var_since, string $var_until, string $var_subservice) {
			# Buscar y reemplazar valores encontrados
			$var_search = array(' ', '$', ',', '.00'); $var_replace = array('', '', '', '');
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_subservice . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_subrservice = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_subrservice = ''; }
			#-------------------------------------------------------------------------#
			if ($var_subrservice == 'CAMARAS' || $var_subrservice == 'TODO') {
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '9' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '4'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '4' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_camera." . d_azp_ibn_camera_id_azp_ibn_camera . ") AS 'Cantidad'
						FROM " . t_azp_ibn_camera . " tc_azp_ibn_camera

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND (tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_effective . " = 'POSITIVO'
								OR tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_effective . " = 'NEGATIVO')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_identification . " ASC,
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'CAMARAS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'CAMARAS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}





				#-------------------------------------------------------------------------#





				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '9' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '4'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '4' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_camera." . d_azp_ibn_camera_id_azp_ibn_camera . ") AS 'Cantidad'
						FROM " . t_azp_ibn_camera . " tc_azp_ibn_camera

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND (tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_viability . " = 'POSITIVO'
								OR tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_viability . " = 'NEGATIVO')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_identification . " ASC,
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'CAMARAS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'CAMARAS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}





				#-------------------------------------------------------------------------#





				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '9' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '2'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '2' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_camera." . d_azp_ibn_camera_id_azp_ibn_camera . ") AS 'Cantidad'
						FROM " . t_azp_ibn_camera . " tc_azp_ibn_camera

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_effective . " = 'POSITIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_identification . " ASC,
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'CAMARAS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'CAMARAS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '9' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '2'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '2' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_camera." . d_azp_ibn_camera_id_azp_ibn_camera . ") AS 'Cantidad'
						FROM " . t_azp_ibn_camera . " tc_azp_ibn_camera

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_viability . " = 'POSITIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_identification . " ASC,
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'CAMARAS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];

							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'CAMARAS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '9' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '3'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '3' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_camera." . d_azp_ibn_camera_id_azp_ibn_camera . ") AS 'Cantidad'
						FROM " . t_azp_ibn_camera . " tc_azp_ibn_camera

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_effective . " = 'NEGATIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_identification . " ASC,
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'CAMARAS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'CAMARAS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '9' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '3'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '3' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_camera." . d_azp_ibn_camera_id_azp_ibn_camera . ") AS 'Cantidad'
						FROM " . t_azp_ibn_camera . " tc_azp_ibn_camera

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_viability . " = 'NEGATIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_identification . " ASC,
							tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'CAMARAS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'CAMARAS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}
			}
			#-------------------------------------------------------------------------#
			if ($var_subrservice == 'INMUEBLES' || $var_subrservice == 'TODO') {
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '10' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '4'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '4' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_property." . d_azp_ibn_property_id_azp_ibn_property . ") AS 'Cantidad'
						FROM " . t_azp_ibn_property . " tc_azp_ibn_property

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_property." . d_azp_ibn_property_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND (tc_azp_ibn_property." . d_azp_ibn_property_t_policy_effective . " = 'POSITIVO'
								OR tc_azp_ibn_property." . d_azp_ibn_property_t_policy_effective . " = 'NEGATIVO')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_property." . d_azp_ibn_property_t_identification . " ASC,
							tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'INMUEBLES',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'INMUEBLES'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}





				#-------------------------------------------------------------------------#





				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '10' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '4'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '4' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_property." . d_azp_ibn_property_id_azp_ibn_property . ") AS 'Cantidad'
						FROM " . t_azp_ibn_property . " tc_azp_ibn_property

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_property." . d_azp_ibn_property_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND (tc_azp_ibn_property." . d_azp_ibn_property_t_policy_viability . " = 'POSITIVO'
								OR tc_azp_ibn_property." . d_azp_ibn_property_t_policy_viability . " = 'NEGATIVO')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_property." . d_azp_ibn_property_t_identification . " ASC,
							tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'INMUEBLES',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'INMUEBLES'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}





				#-------------------------------------------------------------------------#





				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '10' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '2'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '2' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_property." . d_azp_ibn_property_id_azp_ibn_property . ") AS 'Cantidad'
						FROM " . t_azp_ibn_property . " tc_azp_ibn_property

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_property." . d_azp_ibn_property_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_property." . d_azp_ibn_property_t_policy_effective . " = 'POSITIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_property." . d_azp_ibn_property_t_identification . " ASC,
							tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'INMUEBLES',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'INMUEBLES'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '10' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '2'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '2' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_property." . d_azp_ibn_property_id_azp_ibn_property . ") AS 'Cantidad'
						FROM " . t_azp_ibn_property . " tc_azp_ibn_property

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_property." . d_azp_ibn_property_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_property." . d_azp_ibn_property_t_policy_viability . " = 'POSITIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_property." . d_azp_ibn_property_t_identification . " ASC,
							tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'INMUEBLES',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];

							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'INMUEBLES'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '10' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '3'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '3' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_property." . d_azp_ibn_property_id_azp_ibn_property . ") AS 'Cantidad'
						FROM " . t_azp_ibn_property . " tc_azp_ibn_property

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_property." . d_azp_ibn_property_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_property." . d_azp_ibn_property_t_policy_effective . " = 'NEGATIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_property." . d_azp_ibn_property_t_identification . " ASC,
							tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'INMUEBLES',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'INMUEBLES'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '10' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '3'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '3' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_property." . d_azp_ibn_property_id_azp_ibn_property . ") AS 'Cantidad'
						FROM " . t_azp_ibn_property . " tc_azp_ibn_property

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_property." . d_azp_ibn_property_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_property." . d_azp_ibn_property_t_policy_viability . " = 'NEGATIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_property." . d_azp_ibn_property_t_identification . " ASC,
							tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'INMUEBLES',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'INMUEBLES'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}
			}
			#-------------------------------------------------------------------------#
			if ($var_subrservice == 'VEHICULOS' || $var_subrservice == 'TODO') {
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '11' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '4'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '4' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_id_azp_ibn_vehicle . ") AS 'Cantidad'
						FROM " . t_azp_ibn_vehicle . " tc_azp_ibn_vehicle

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND (tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_effective . " = 'POSITIVO'
								OR tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_effective . " = 'NEGATIVO')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_identification . " ASC,
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'VEHICULOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'VEHICULOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}





				#-------------------------------------------------------------------------#





				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '11' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '4'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '4' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_id_azp_ibn_vehicle . ") AS 'Cantidad'
						FROM " . t_azp_ibn_vehicle . " tc_azp_ibn_vehicle

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND (tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_viability . " = 'POSITIVO'
								OR tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_viability . " = 'NEGATIVO')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_identification . " ASC,
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'VEHICULOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'VEHICULOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}





				#-------------------------------------------------------------------------#





				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '11' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '2'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '2' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_id_azp_ibn_vehicle . ") AS 'Cantidad'
						FROM " . t_azp_ibn_vehicle . " tc_azp_ibn_vehicle

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_effective . " = 'POSITIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_identification . " ASC,
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'VEHICULOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'VEHICULOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '11' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '2'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '2' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_id_azp_ibn_vehicle . ") AS 'Cantidad'
						FROM " . t_azp_ibn_vehicle . " tc_azp_ibn_vehicle

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_viability . " = 'POSITIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_identification . " ASC,
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'VEHICULOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];

							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'VEHICULOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '11' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '3'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '3' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_id_azp_ibn_vehicle . ") AS 'Cantidad'
						FROM " . t_azp_ibn_vehicle . " tc_azp_ibn_vehicle

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_effective . " = 'NEGATIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_identification . " ASC,
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'VEHICULOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'VEHICULOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '11' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '3'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '3' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_id_azp_ibn_vehicle . ") AS 'Cantidad'
						FROM " . t_azp_ibn_vehicle . " tc_azp_ibn_vehicle

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_viability . " = 'NEGATIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_identification . " ASC,
							tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'VEHICULOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'VEHICULOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}
			}
			#-------------------------------------------------------------------------#
			if ($var_subrservice == 'SALARIOS' || $var_subrservice == 'TODO') {
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '12' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '4'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '4' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_furniture." . d_azp_ibn_furniture_id_azp_ibn_furniture . ") AS 'Cantidad'
						FROM " . t_azp_ibn_furniture . " tc_azp_ibn_furniture

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND (tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_effective . " = 'POSITIVO'
								OR tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_effective . " = 'NEGATIVO')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_identification . " ASC,
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'SALARIOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'SALARIOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}





				#-------------------------------------------------------------------------#





				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '12' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '4'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '4' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_furniture." . d_azp_ibn_furniture_id_azp_ibn_furniture . ") AS 'Cantidad'
						FROM " . t_azp_ibn_furniture . " tc_azp_ibn_furniture

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND (tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_viability . " = 'POSITIVO'
								OR tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_viability . " = 'NEGATIVO')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_identification . " ASC,
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'SALARIOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'SALARIOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}





				#-------------------------------------------------------------------------#





				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '12' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '2'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '2' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_furniture." . d_azp_ibn_furniture_id_azp_ibn_furniture . ") AS 'Cantidad'
						FROM " . t_azp_ibn_furniture . " tc_azp_ibn_furniture

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_effective . " = 'POSITIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_identification . " ASC,
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'SALARIOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'SALARIOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '12' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '2'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '2' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_furniture." . d_azp_ibn_furniture_id_azp_ibn_furniture . ") AS 'Cantidad'
						FROM " . t_azp_ibn_furniture . " tc_azp_ibn_furniture

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_viability . " = 'POSITIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_identification . " ASC,
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'SALARIOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];

							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'SALARIOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '12' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '3'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '3' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_furniture." . d_azp_ibn_furniture_id_azp_ibn_furniture . ") AS 'Cantidad'
						FROM " . t_azp_ibn_furniture . " tc_azp_ibn_furniture

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_effective . " = 'NEGATIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_identification . " ASC,
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'SALARIOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'SALARIOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '12' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '3'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '3' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_furniture." . d_azp_ibn_furniture_id_azp_ibn_furniture . ") AS 'Cantidad'
						FROM " . t_azp_ibn_furniture . " tc_azp_ibn_furniture

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_viability . " = 'NEGATIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_identification . " ASC,
							tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'SALARIOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'SALARIOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}
			}
			#-------------------------------------------------------------------------#
			if ($var_subrservice == 'GARANTIAS' || $var_subrservice == 'TODO') {
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '13' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '4'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '4' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_warranty." . d_azp_ibn_warranty_id_azp_ibn_warranty . ") AS 'Cantidad'
						FROM " . t_azp_ibn_warranty . " tc_azp_ibn_warranty

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND (tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_effective . " = 'POSITIVO'
								OR tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_effective . " = 'NEGATIVO')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_identification . " ASC,
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'GARANTIAS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'GARANTIAS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}





				#-------------------------------------------------------------------------#





				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '13' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '4'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '4' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_warranty." . d_azp_ibn_warranty_id_azp_ibn_warranty . ") AS 'Cantidad'
						FROM " . t_azp_ibn_warranty . " tc_azp_ibn_warranty

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND (tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_viability . " = 'POSITIVO'
								OR tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_viability . " = 'NEGATIVO')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_identification . " ASC,
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'GARANTIAS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'GARANTIAS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}





				#-------------------------------------------------------------------------#





				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '13' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '2'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '2' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_warranty." . d_azp_ibn_warranty_id_azp_ibn_warranty . ") AS 'Cantidad'
						FROM " . t_azp_ibn_warranty . " tc_azp_ibn_warranty

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_effective . " = 'POSITIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_identification . " ASC,
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'GARANTIAS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'GARANTIAS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '13' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '2'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '2' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_warranty." . d_azp_ibn_warranty_id_azp_ibn_warranty . ") AS 'Cantidad'
						FROM " . t_azp_ibn_warranty . " tc_azp_ibn_warranty

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_viability . " = 'POSITIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_identification . " ASC,
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'GARANTIAS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];

							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'GARANTIAS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '13' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '3'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '2' && $var_result == '3' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_warranty." . d_azp_ibn_warranty_id_azp_ibn_warranty . ") AS 'Cantidad'
						FROM " . t_azp_ibn_warranty . " tc_azp_ibn_warranty

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_effective . " = 'NEGATIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_identification . " ASC,
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'GARANTIAS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " . d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " . d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " . d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " . d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " . d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " . d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'GARANTIAS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}




				
				#-------------------------------------------------------------------------#




				
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Asignacion de valores a nuevas variables
				$var_investigation = ''; $var_result = ''; $var_service = '';			
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff,
					d_azp_fct_tariff_v_id_azp_fct_service . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '13' AND " .
					d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " .
					d_azp_fct_tariff_v_id_azp_fct_result . " = '3'"
				);
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				}
				#-------------------------------------------------------------------------#
				# Control de validacion de valores
				if ($var_investigation == '3' && $var_result == '3' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " AS 'Cliente_Id',
							tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'Solicitud',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'Fecha',
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'Envio',
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " AS 'Ciudad',
							COUNT(tc_azp_ibn_warranty." . d_azp_ibn_warranty_id_azp_ibn_warranty . ") AS 'Cantidad'
						FROM " . t_azp_ibn_warranty . " tc_azp_ibn_warranty

						INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
							ON tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . "
								= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "

						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_m_deleted . " = '1'
							AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_bcount . " = '1'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_viability . " = 'NEGATIVO'
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")

						GROUP BY tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_identification . " ASC,
							tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'GARANTIAS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'GARANTIAS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}
			}
			#-------------------------------------------------------------------------#
			if ($var_subrservice == 'SIN SUB SERVICIOS' || $var_subrservice == 'TODO') {
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff, d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " . d_azp_fct_tariff_v_id_azp_fct_result . " = '4' AND " . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'");
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				} else { $var_investigation = ''; $var_result = ''; $var_service = ''; }
				# Control de validacion de valores
				# $var_investigation == '2': Efectividad
				# $var_result == '4': Unico
				# $var_service == '3': Investigacion
				if ($var_investigation == '2' && $var_result == '4' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
							tc_azp_fct_client. " . d_azp_fct_client_id_azp_fct_client . " AS 'lbl_azp_fct_client_id_azp_fct_client',
							tc_azp_fct_client. " . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
							tc_azp_ibn_control_panel. " . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
							tc_azp_ibn_control_panel. " . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
							tc_azp_ibn_control_panel. " . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
							tc_azp_ibn_evaluation. " . d_azp_ibn_evaluation_t_municipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
							COUNT(tc_azp_ibn_evaluation. " . d_azp_ibn_evaluation_id_azp_ibn_evaluation . ") AS 'lbl_azp_ibn_evaluation_id_azp_ibn_evaluation'
						FROM " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel

						INNER JOIN " . t_azp_ibn_evaluation . " tc_azp_ibn_evaluation
							ON tc_azp_ibn_control_panel. " . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
								= tc_azp_ibn_evaluation. " . d_azp_ibn_evaluation_v_id_azp_ibn_control_panel . "
								
						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel. " . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
								= tc_azp_ibn_client. " . d_azp_ibn_client_id_azp_ibn_client . "
								
						INNER JOIN azp_fct_client tc_azp_fct_client
							ON tc_azp_ibn_client. " . d_azp_ibn_client_v_id_azp_fct_client . "
								= tc_azp_fct_client. " . d_azp_fct_client_id_azp_fct_client . "

						WHERE tc_azp_ibn_control_panel. " . d_azp_ibn_control_panel_t_date_general . " != ''
							AND (tc_azp_ibn_control_panel. " . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel. " . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_until . "')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")
							
						GROUP BY
							tc_azp_ibn_evaluation. " . d_azp_ibn_evaluation_v_id_azp_ibn_control_panel . " ASC,
							tc_azp_ibn_evaluation. " . d_azp_ibn_evaluation_t_municipality . " ASC,
							tc_azp_ibn_evaluation. " . d_azp_ibn_evaluation_t_identification . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'SIN SUB SERVICIOS',
								d_azp_fct_honorary_t_city => $value['lbl_azp_ibn_evaluation_t_municipality'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
								d_azp_fct_honorary_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['lbl_azp_ibn_evaluation_id_azp_ibn_evaluation'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['lbl_azp_ibn_control_panel_t_code_research'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['lbl_azp_fct_client_id_azp_fct_client'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['lbl_azp_ibn_control_panel_id_azp_ibn_control_panel'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'SIN SUB SERVICIOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}



				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff, d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " . d_azp_fct_tariff_v_id_azp_fct_result . " = '4' AND " . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'");
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				} else { $var_investigation = ''; $var_result = ''; $var_service = ''; }
				# Control de validacion de valores
				# $var_investigation == '3': Viabilidad
				# $var_result == '4': Unico
				# $var_service == '3': Investigacion
				if ($var_investigation == '3' && $var_result == '4' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client.id_azp_fct_client AS 'Cliente_Id',
							tc_azp_fct_client.t_name AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel.t_code_research AS 'Solicitud',
							tc_azp_ibn_control_panel.t_date_arrival AS 'Fecha',
							tc_azp_ibn_control_panel.t_date_general AS 'Envio',
							tc_azp_ibn_evaluation.t_municipality AS 'Ciudad',
							COUNT(tc_azp_ibn_evaluation.id_azp_ibn_evaluation) AS 'Cantidad'
						FROM " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel

						INNER JOIN " . t_azp_ibn_evaluation . " tc_azp_ibn_evaluation
							ON tc_azp_ibn_control_panel.id_azp_ibn_control_panel
								= tc_azp_ibn_evaluation.v_id_azp_ibn_control_panel
								
						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel.v_id_azp_ibn_client
								= tc_azp_ibn_client.id_azp_ibn_client
								
						INNER JOIN azp_fct_client tc_azp_fct_client
							ON tc_azp_ibn_client.v_id_azp_fct_client
								= tc_azp_fct_client.id_azp_fct_client

						WHERE tc_azp_ibn_control_panel.t_date_general != ''
							AND (tc_azp_ibn_control_panel.t_date_general >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel.t_date_general <= '" . $var_until . "')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")
							
						GROUP BY
							tc_azp_ibn_evaluation.v_id_azp_ibn_control_panel ASC,
							tc_azp_ibn_evaluation.t_municipality ASC,
							tc_azp_ibn_evaluation.t_identification ASC;
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'SIN SUB SERVICIOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " . d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " . d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " . d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " . d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " . d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " . d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'SIN SUB SERVICIOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}



				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff, d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " . d_azp_fct_tariff_v_id_azp_fct_result . " = '2' AND " . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'");
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				} else { $var_investigation = ''; $var_result = ''; $var_service = ''; }
				# Control de validacion de valores
				# $var_investigation == '2': Efectividad
				# $var_result == '2': Positivo
				# $var_service == '3': Investigacion
				if ($var_investigation == '2' && $var_result == '2' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client.id_azp_fct_client AS 'Cliente_Id',
							tc_azp_fct_client.t_name AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel.t_code_research AS 'Solicitud',
							tc_azp_ibn_control_panel.t_date_arrival AS 'Fecha',
							tc_azp_ibn_control_panel.t_date_general AS 'Envio',
							tc_azp_ibn_evaluation.t_municipality AS 'Ciudad',
							COUNT(tc_azp_ibn_evaluation.id_azp_ibn_evaluation) AS 'Cantidad'
						FROM " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel

						INNER JOIN " . t_azp_ibn_evaluation . " tc_azp_ibn_evaluation
							ON tc_azp_ibn_control_panel.id_azp_ibn_control_panel
								= tc_azp_ibn_evaluation.v_id_azp_ibn_control_panel
								
						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel.v_id_azp_ibn_client
								= tc_azp_ibn_client.id_azp_ibn_client
								
						INNER JOIN azp_fct_client tc_azp_fct_client
							ON tc_azp_ibn_client.v_id_azp_fct_client
								= tc_azp_fct_client.id_azp_fct_client

						WHERE tc_azp_ibn_control_panel.t_date_general != ''
							AND tc_azp_ibn_evaluation.t_policy_effective = 'POSITIVO'
							AND (tc_azp_ibn_control_panel.t_date_general >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel.t_date_general <= '" . $var_until . "')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")
							
						GROUP BY
							tc_azp_ibn_evaluation.v_id_azp_ibn_control_panel ASC,
							tc_azp_ibn_evaluation.t_municipality ASC,
							tc_azp_ibn_evaluation.t_identification ASC;
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'SIN SUB SERVICIOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'SIN SUB SERVICIOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}



				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff, d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " . d_azp_fct_tariff_v_id_azp_fct_result . " = '2' AND " . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'");
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				} else { $var_investigation = ''; $var_result = ''; $var_service = ''; }
				# Control de validacion de valores
				# $var_investigation == '3': Viabilidad
				# $var_result == '2': Positivo
				# $var_service == '3': Investigacion
				if ($var_investigation == '3' && $var_result == '2' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client.id_azp_fct_client AS 'Cliente_Id',
							tc_azp_fct_client.t_name AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel.t_code_research AS 'Solicitud',
							tc_azp_ibn_control_panel.t_date_arrival AS 'Fecha',
							tc_azp_ibn_control_panel.t_date_general AS 'Envio',
							tc_azp_ibn_evaluation.t_municipality AS 'Ciudad',
							COUNT(tc_azp_ibn_evaluation.id_azp_ibn_evaluation) AS 'Cantidad'
						FROM " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel

						INNER JOIN " . t_azp_ibn_evaluation . " tc_azp_ibn_evaluation
							ON tc_azp_ibn_control_panel.id_azp_ibn_control_panel
								= tc_azp_ibn_evaluation.v_id_azp_ibn_control_panel
								
						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel.v_id_azp_ibn_client
								= tc_azp_ibn_client.id_azp_ibn_client
								
						INNER JOIN azp_fct_client tc_azp_fct_client
							ON tc_azp_ibn_client.v_id_azp_fct_client
								= tc_azp_fct_client.id_azp_fct_client

						WHERE tc_azp_ibn_control_panel.t_date_general != ''
							AND tc_azp_ibn_evaluation.t_policy_viability = 'POSITIVO'
							AND (tc_azp_ibn_control_panel.t_date_general >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel.t_date_general <= '" . $var_until . "')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")
							
						GROUP BY
							tc_azp_ibn_evaluation.v_id_azp_ibn_control_panel ASC,
							tc_azp_ibn_evaluation.t_municipality ASC,
							tc_azp_ibn_evaluation.t_identification ASC;
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'SIN SUB SERVICIOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];

							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'SIN SUB SERVICIOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}



				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff, d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2' AND " . d_azp_fct_tariff_v_id_azp_fct_result . " = '3' AND " . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'");
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				} else { $var_investigation = ''; $var_result = ''; $var_service = ''; }
				# Control de validacion de valores
				# $var_investigation == '2': Efectividad
				# $var_result == '3': Negativo
				# $var_service == '3': Investigacion
				if ($var_investigation == '2' && $var_result == '3' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client.id_azp_fct_client AS 'Cliente_Id',
							tc_azp_fct_client.t_name AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel.t_code_research AS 'Solicitud',
							tc_azp_ibn_control_panel.t_date_arrival AS 'Fecha',
							tc_azp_ibn_control_panel.t_date_general AS 'Envio',
							tc_azp_ibn_evaluation.t_municipality AS 'Ciudad',
							COUNT(tc_azp_ibn_evaluation.id_azp_ibn_evaluation) AS 'Cantidad'
						FROM " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel

						INNER JOIN " . t_azp_ibn_evaluation . " tc_azp_ibn_evaluation
							ON tc_azp_ibn_control_panel.id_azp_ibn_control_panel
								= tc_azp_ibn_evaluation.v_id_azp_ibn_control_panel
								
						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel.v_id_azp_ibn_client
								= tc_azp_ibn_client.id_azp_ibn_client
								
						INNER JOIN azp_fct_client tc_azp_fct_client
							ON tc_azp_ibn_client.v_id_azp_fct_client
								= tc_azp_fct_client.id_azp_fct_client

						WHERE tc_azp_ibn_control_panel.t_date_general != ''
							AND tc_azp_ibn_evaluation.t_policy_effective = 'NEGATIVO'
							AND (tc_azp_ibn_control_panel.t_date_general >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel.t_date_general <= '" . $var_until . "')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")
							
						GROUP BY
							tc_azp_ibn_evaluation.v_id_azp_ibn_control_panel ASC,
							tc_azp_ibn_evaluation.t_municipality ASC,
							tc_azp_ibn_evaluation.t_identification ASC;
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'SIN SUB SERVICIOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '2'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'SIN SUB SERVICIOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}



				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_honorary . " WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->select("*", t_azp_fct_tariff, d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3' AND " . d_azp_fct_tariff_v_id_azp_fct_result . " = '3' AND " . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'");
				#-------------------------------------------------------------------------#
				# Verificar si el resultado de la sql es verdadero o falso
				if (true == $var_sql) {
					foreach ($var_sql as $key => $value):
						$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
						$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
						$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					endforeach;
				} else { $var_investigation = ''; $var_result = ''; $var_service = ''; }
				# Control de validacion de valores
				# $var_investigation == '3': Viabilidad
				# $var_result == '3': Negativo
				# $var_service == '3': Investigacion
				if ($var_investigation == '3' && $var_result == '3' && $var_service == '3') {
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'Id_Relacion',
							tc_azp_fct_client.id_azp_fct_client AS 'Cliente_Id',
							tc_azp_fct_client.t_name AS 'Cliente_Nombre',
							tc_azp_ibn_control_panel.t_code_research AS 'Solicitud',
							tc_azp_ibn_control_panel.t_date_arrival AS 'Fecha',
							tc_azp_ibn_control_panel.t_date_general AS 'Envio',
							tc_azp_ibn_evaluation.t_municipality AS 'Ciudad',
							COUNT(tc_azp_ibn_evaluation.id_azp_ibn_evaluation) AS 'Cantidad'
						FROM " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel

						INNER JOIN " . t_azp_ibn_evaluation . " tc_azp_ibn_evaluation
							ON tc_azp_ibn_control_panel.id_azp_ibn_control_panel
								= tc_azp_ibn_evaluation.v_id_azp_ibn_control_panel
								
						INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
							ON tc_azp_ibn_control_panel.v_id_azp_ibn_client
								= tc_azp_ibn_client.id_azp_ibn_client
								
						INNER JOIN azp_fct_client tc_azp_fct_client
							ON tc_azp_ibn_client.v_id_azp_fct_client
								= tc_azp_fct_client.id_azp_fct_client

						WHERE tc_azp_ibn_control_panel.t_date_general != ''
							AND tc_azp_ibn_evaluation.t_policy_viability = 'NEGATIVO'
							AND (tc_azp_ibn_control_panel.t_date_general >= '" . $var_since . "'
								AND tc_azp_ibn_control_panel.t_date_general <= '" . $var_until . "')
							AND tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . " IN (" .  $empty_client . ")
							
						GROUP BY
							tc_azp_ibn_evaluation.v_id_azp_ibn_control_panel ASC,
							tc_azp_ibn_evaluation.t_municipality ASC,
							tc_azp_ibn_evaluation.t_identification ASC;
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '2',
								d_azp_fct_honorary_t_certificate => 'SIN SUB SERVICIOS',
								d_azp_fct_honorary_t_city => $value['Ciudad'],
								d_azp_fct_honorary_t_coverage => '',
								d_azp_fct_honorary_t_date_request => $value['Fecha'],
								d_azp_fct_honorary_t_date_send => $value['Envio'],
								d_azp_fct_honorary_t_honorary => '0',
								d_azp_fct_honorary_t_number => '0',
								d_azp_fct_honorary_t_purchase => $value['Cantidad'],
								d_azp_fct_honorary_t_repayment => '0',
								d_azp_fct_honorary_t_request => $value['Solicitud'],
								d_azp_fct_honorary_t_state => 'Activo',
								d_azp_fct_honorary_v_id_azp_fct_client => $value['Cliente_Id'],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value['Id_Relacion'],
								d_azp_fct_honorary_v_id_azp_fct_service => '3',
								d_azp_fct_honorary_v_id_azp_fct_tariff => '0',
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value[d_azp_fct_honorary_id_azp_fct_honorary];
							$var_city = $value[d_azp_fct_honorary_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_honorary_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_honorary, $var_array,
										d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_honorary_m_temp . " = '2' AND " .
										d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_honorary_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_honorary, $var_array,
									d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_honorary_m_temp . " = '2' AND " .
									d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " AS 'lbl_azp_fct_honorary_id_azp_fct_honorary',
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name'
						FROM " . t_azp_fct_honorary . " tc_azp_fct_honorary
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
							ON tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . "
								= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
							ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
								= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
						-- ---------------------------------------------------------------
						INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
							ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
								= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
						-- ---------------------------------------------------------------
						WHERE tc_azp_fct_honorary." . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
							AND tc_azp_fct_honorary." . d_azp_fct_honorary_m_temp . " = '2'
							AND tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . " = '3'
						-- ---------------------------------------------------------------
						GROUP BY tc_azp_fct_honorary." . d_azp_fct_honorary_id_azp_fct_honorary . " ASC,
							tc_azp_fct_honorary." . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . "
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_honorary = $value['lbl_azp_fct_honorary_id_azp_fct_honorary'];
							$var_subcoverage = $value['lbl_azp_fct_sub_coverage_t_name'];
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(d_azp_fct_honorary_t_number => '1',);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->update(t_azp_fct_honorary, $var_array,
								d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
								d_azp_fct_honorary_id_azp_fct_honorary . " = '" . $var_honorary . "' AND " .
								d_azp_fct_honorary_t_coverage . " = '" . $var_subcoverage . "'"
							);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'CALI' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_cali = ''; endforeach; } else { $var_ct_cali = d_azp_fct_honorary_t_coverage . " = 'CALI' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'PALMIRA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_palmira = ''; endforeach; } else { $var_ct_palmira = d_azp_fct_honorary_t_coverage . " = 'PALMIRA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_medellin = ''; endforeach; } else { $var_ct_medellin = d_azp_fct_honorary_t_coverage . " = 'MEDELLIN' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_envigado = ''; endforeach; } else { $var_ct_envigado = d_azp_fct_honorary_t_coverage . " = 'ENVIGADO' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'SOACHA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_soacha = ''; endforeach; } else { $var_ct_soacha = d_azp_fct_honorary_t_coverage . " = 'SOACHA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND " .
						d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' AND " .
						d_azp_fct_honorary_t_number . " = '1'"
					);
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_ct_barranquilla = ''; endforeach; } else { $var_ct_barranquilla = d_azp_fct_honorary_t_coverage . " = 'BARRANQUILLA' OR "; }
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_honorary,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2' AND (" .
							$var_ct_cali . $var_ct_palmira . $var_ct_medellin .
							$var_ct_envigado . $var_ct_soacha . $var_ct_barranquilla .
							d_azp_fct_honorary_t_coverage . " = '_'
						)
					");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_honorary_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_honorary_m_date_created => DATE_HOUR,
								d_azp_fct_honorary_m_date_modified => DATE_HOUR,
								d_azp_fct_honorary_m_deleted => '1',
								d_azp_fct_honorary_m_description => '',
								d_azp_fct_honorary_m_level => '2',
								d_azp_fct_honorary_m_status => '1',
								d_azp_fct_honorary_m_temp => '1',
								d_azp_fct_honorary_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_honorary_t_city => 'NACIONAL',
								d_azp_fct_honorary_t_coverage => 'TODO',
								d_azp_fct_honorary_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_honorary_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_honorary_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_honorary_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_honorary_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_honorary_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_honorary_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_honorary_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_honorary_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_honorary_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_honorary_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_honorary, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->query("
						SELECT
							" . d_azp_fct_honorary_t_certificate . ",
							" . d_azp_fct_honorary_t_city . ",
							" . d_azp_fct_honorary_t_coverage . ",
							" . d_azp_fct_honorary_t_date_request . ",
							" . d_azp_fct_honorary_t_date_send . ",
							" . d_azp_fct_honorary_t_honorary . ",
							SUM(" . d_azp_fct_honorary_t_purchase . ") AS 't_purchase',
							" . d_azp_fct_honorary_t_repayment . ",
							" . d_azp_fct_honorary_t_request . ",
							" . d_azp_fct_honorary_t_state . ",
							" . d_azp_fct_honorary_v_id_azp_fct_client . ",
							" . d_azp_fct_honorary_v_id_azp_fct_service . ",
							" . d_azp_fct_honorary_v_id_azp_fct_relation . ",
							" . d_azp_fct_honorary_v_id_azp_fct_tariff . "
						FROM " . t_azp_fct_honorary . "
						WHERE " . d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						GROUP BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_t_certificate . " ASC,
							" . d_azp_fct_honorary_t_coverage . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
						ORDER BY " . d_azp_fct_honorary_v_id_azp_fct_client . " ASC,
							" . d_azp_fct_honorary_v_id_azp_fct_service . " ASC,
							" . d_azp_fct_honorary_t_request . " ASC,
							" . d_azp_fct_honorary_t_date_request . " ASC
					");
					#-------------------------------------------------------------------------#
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Array para asignar argumentos o valores a los elementos
							$var_array = array(
								d_azp_fct_prefacture_m_by_created => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_by_modified => $_SESSION[SESS_APP_ID],
								d_azp_fct_prefacture_m_date_created => DATE_HOUR,
								d_azp_fct_prefacture_m_date_modified => DATE_HOUR,
								d_azp_fct_prefacture_m_deleted => '1',
								d_azp_fct_prefacture_m_description => '',
								d_azp_fct_prefacture_m_level => '2',
								d_azp_fct_prefacture_m_status => '1',
								d_azp_fct_prefacture_m_temp => '2',
								d_azp_fct_prefacture_t_certificate => $value[d_azp_fct_honorary_t_certificate],
								d_azp_fct_prefacture_t_city => $value[d_azp_fct_honorary_t_city],
								d_azp_fct_prefacture_t_coverage => $value[d_azp_fct_honorary_t_coverage],
								d_azp_fct_prefacture_t_date_request => $value[d_azp_fct_honorary_t_date_request],
								d_azp_fct_prefacture_t_date_send => $value[d_azp_fct_honorary_t_date_send],
								d_azp_fct_prefacture_t_honorary => $value[d_azp_fct_honorary_t_honorary],
								d_azp_fct_prefacture_t_purchase => $value[d_azp_fct_honorary_t_purchase],
								d_azp_fct_prefacture_t_repayment => $value[d_azp_fct_honorary_t_repayment],
								d_azp_fct_prefacture_t_request => $value[d_azp_fct_honorary_t_request],
								d_azp_fct_prefacture_t_state => $value[d_azp_fct_honorary_t_state],
								d_azp_fct_prefacture_v_id_azp_fct_client => $value[d_azp_fct_honorary_v_id_azp_fct_client],
								d_azp_fct_prefacture_v_id_azp_fct_service => $value[d_azp_fct_honorary_v_id_azp_fct_service],
								d_azp_fct_prefacture_v_id_azp_fct_relation => $value[d_azp_fct_honorary_v_id_azp_fct_relation],
								d_azp_fct_prefacture_v_id_azp_fct_tariff => $value[d_azp_fct_honorary_v_id_azp_fct_tariff],
							);
							# Query Sql Insert: Registrar valores en la tabla segun sus campos
							$this->db->insert(t_azp_fct_prefacture, $var_array);
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select("*", t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_t_name . " = '" . $var_city . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_coverage = $value[d_azp_fct_sub_coverage_t_name];
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_coverage => $var_coverage,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							} else {
								# Array para asignar argumentos o valores a los elementos
								$var_array = array(d_azp_fct_prefacture_t_coverage => 'TODO',);
								# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
								$this->db->update(t_azp_fct_prefacture, $var_array,
									d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
									d_azp_fct_prefacture_m_temp . " = '2' AND " .
									d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
								);
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_prefacture = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
							$var_city = $value[d_azp_fct_prefacture_t_city];
							$var_coverage = $value[d_azp_fct_prefacture_t_coverage];
							$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
							$var_honorary = $value[d_azp_fct_prefacture_t_honorary];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							$var_repayment = $value[d_azp_fct_prefacture_t_repayment];
							$var_request = $value[d_azp_fct_prefacture_t_request];
							$var_client = $value[d_azp_fct_prefacture_v_id_azp_fct_client];
							$var_service = $value[d_azp_fct_prefacture_v_id_azp_fct_service];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->query("
								SELECT
									tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " AS 'lbl_azp_fct_tariff_id_azp_fct_tariff',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_client',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_result',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_scale',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_service',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_coverage',
									tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_sub_service',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
									tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
									tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
									tc_azp_fct_scale." . d_azp_fct_scale_t_max . " AS 'lbl_azp_fct_scale_t_max',
									tc_azp_fct_scale." . d_azp_fct_scale_t_min . " AS 'lbl_azp_fct_scale_t_min',
									tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
									tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
									tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
									tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
								FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
										= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
										= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
										= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
										= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
										= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
										= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . " = '3'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '" . $var_service . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_m_deleted . " = '1'

									AND tc_azp_fct_scale." . d_azp_fct_scale_v_id_azp_fct_client . " = '" . $var_client . "'
									AND (tc_azp_fct_scale." . d_azp_fct_scale_t_min . " <= '" . $var_purchase . "'
										AND tc_azp_fct_scale." . d_azp_fct_scale_t_max . " >= '" . $var_purchase . "')

									AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " = '" . $var_coverage . "'
									AND tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " = 'SIN SUB SERVICIOS'
							");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_tariff = $value['lbl_azp_fct_tariff_id_azp_fct_tariff'];
									//$var_client = $value['lbl_azp_fct_client_t_name'];
									$var_coverage = $value['lbl_azp_fct_coverage_t_name'];
									$var_investigation = $value['lbl_azp_fct_investigation_t_name'];
									$var_result = $value['lbl_azp_fct_result_t_name'];
									$var_max = $value['lbl_azp_fct_scale_t_max'];
									$var_min = $value['lbl_azp_fct_scale_t_min'];
									$var_scale = $value['lbl_azp_fct_scale_t_name'];
									//$var_service = $value['lbl_azp_fct_service_t_name'];
									$var_sub_coverage = $value['lbl_azp_fct_sub_coverage_t_name'];
									$var_sub_service = $value['lbl_azp_fct_sub_service_t_name'];

									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_v_id_azp_fct_tariff => $var_tariff,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_prefacture . "'"
									);
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . d_azp_fct_prefacture_m_temp . " = '2'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_id = $value[d_azp_fct_prefacture_id_azp_fct_prefacture];
							$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
							$var_purchase = $value[d_azp_fct_prefacture_t_purchase];
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
								foreach ($var_sql as $key => $value):
									# Asignacion de valores a nuevas variables
									$var_value = str_replace($var_search, $var_replace, $value[d_azp_fct_tariff_t_value]);
									$var_honorary = $var_purchase * $var_value;
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(d_azp_fct_prefacture_t_honorary => $var_honorary,);
									# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
									$this->db->update(t_azp_fct_prefacture, $var_array,
										d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
										d_azp_fct_prefacture_m_temp . " = '2' AND " .
										d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $var_id . "'");
								endforeach;
							}
						endforeach;
					}
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_honorary_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_honorary, $var_array,
						d_azp_fct_honorary_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " .
						d_azp_fct_honorary_m_temp . " = '2'"
					);
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_temp => '1',);
					# Query Sql Insert: Insertar datos en la tabla con sus campos respectivos y asignados
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_temp . " = '2' AND " .
						d_azp_fct_prefacture_m_by_created . " = '" .  $_SESSION[SESS_APP_ID] . "'"
					);
				}
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_azp_fct_prefacture_invoicing() {
			# Linea de codigo con una variable y array para seleccionar los datos de la tabla segun el id
			$var_sql = $this->db->select('*', t_azp_fct_invoice, d_azp_fct_invoice_m_deleted . " = '1'");
			# Validar si la sentencia query ejecutada es correcta y no falsa
			if (false != $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key_sql => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_invoice_t_certificate];
					$var_city = $value[d_azp_fct_invoice_t_city];
					$var_coverage = $value[d_azp_fct_invoice_t_coverage];
					$var_date_request = $value[d_azp_fct_invoice_t_date_request];
					$var_honorary = $value[d_azp_fct_invoice_t_honorary];
					$var_number = $value[d_azp_fct_invoice_t_number];
					$var_purchase = $value[d_azp_fct_invoice_t_purchase];
					$var_repayment = $value[d_azp_fct_invoice_t_repayment];
					$var_request = $value[d_azp_fct_invoice_t_request];
					$var_state = $value[d_azp_fct_invoice_t_state];
					$var_fct_client = $value[d_azp_fct_invoice_v_id_azp_fct_client];
					$var_fct_service = $value[d_azp_fct_invoice_v_id_azp_fct_service];
					$var_fct_tariff = $value[d_azp_fct_invoice_v_id_azp_fct_tariff];
					#-------------------------------------------------------------------------#
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(d_azp_fct_prefacture_m_deleted => '4',);
					# Query Sql Update: Actualizar valores de la tabla segun sus campos
					$this->db->update(t_azp_fct_prefacture, $var_array,
						d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "' AND " . 
						d_azp_fct_prefacture_t_certificate . " = '" . $var_certificate . "' AND " .
						d_azp_fct_prefacture_t_city . " = '" . $var_city . "' AND " .
						d_azp_fct_prefacture_t_coverage . " = '" . $var_coverage . "' AND " .
						d_azp_fct_prefacture_t_date_request . " = '" . $var_date_request . "' AND " .
						d_azp_fct_prefacture_t_request . " = '" . $var_request . "' AND " .
						d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_fct_client . "' AND " .
						d_azp_fct_prefacture_v_id_azp_fct_service . " = '" . $var_fct_service . "' AND " .
						d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_fct_tariff . "'"
					);
				endforeach;
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_vision_certificate() {
			# Defincion de valores a nuevas variables
			$var_certificate = ''; $var_date_request = ''; $var_date_send = ''; $var_request = ''; $var_tariff = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $this->id . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_date_send = $value[d_azp_fct_prefacture_t_date_send];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Defincion de valores a nuevas variables
			$var_client = ''; $var_coverage = ''; $var_investigation = ''; $var_result = ''; $var_scale = ''; $var_service = ''; $var_sub_coverage = ''; $var_sub_service = '';
			$var_ct_3 = ''; $var_ct_4 = ''; $var_ct_5 = ''; $var_ct_6 = ''; $var_ct_7 = ''; $var_ct_8 = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_client = $value[d_azp_fct_tariff_v_id_azp_fct_client];
					$var_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_coverage];
					$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
					$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
					$var_scale = $value[d_azp_fct_tariff_v_id_azp_fct_scale];
					$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					$var_sub_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_sub_coverage];
					$var_sub_service = $value[d_azp_fct_tariff_v_id_azp_fct_sub_service];
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_coverage, d_azp_fct_coverage_id_azp_fct_coverage . " = '" . $var_coverage . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_coverage = $value[d_azp_fct_coverage_t_name]; endforeach; } else { $var_id_coverage = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_investigation, d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_investigation = $value[d_azp_fct_investigation_t_name]; endforeach; } else { $var_id_investigation = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_result, d_azp_fct_result_id_azp_fct_result . " = '" . $var_result . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_result = $value[d_azp_fct_result_t_name]; endforeach; } else { $var_id_result = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_scale, d_azp_fct_scale_id_azp_fct_scale . " = '" . $var_scale . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_scale = $value[d_azp_fct_scale_t_name]; endforeach; } else { $var_id_scale = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_service, d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_service = $value[d_azp_fct_service_t_name]; endforeach; } else { $var_id_service = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '" . $var_sub_coverage . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_coverage = $value[d_azp_fct_sub_coverage_t_name]; endforeach; } else { $var_id_sub_coverage = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_service = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_id_sub_service = ''; }
			#-------------------------------------------------------------------------#
			if ($var_id_sub_coverage == 'NO APLICA') {
				$var_qy_sub_coverage = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " = '" . $var_id_coverage . "'";
			} else if ($var_id_sub_coverage == 'TODO') {
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '3'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_3 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_3 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '4'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_4 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_4 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '5'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_5 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_5 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '6'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_6 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_6 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '7'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_7 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_7 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '8'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_8 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_8 = ''; }
				#-------------------------------------------------------------------------#
				$var_qy_sub_coverage = "AND (tc_azp_crt_city." . d_azp_crt_city_t_name . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
			} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
				$var_qy_sub_coverage = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " = '" . $var_id_sub_coverage . "'";
			}
			#-------------------------------------------------------------------------#
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT 
					tc_azp_crt_request_data." . d_azp_crt_request_data_id_azp_crt_request_data . " AS 'lbl_azp_crt_request_data_id_azp_crt_request_data',
					tc_azp_crt_request_data." . d_azp_crt_request_data_s_date . " AS 'lbl_azp_crt_request_data_s_date',
					tc_azp_crt_request_data." . d_azp_crt_request_data_s_plaque . " AS 'lbl_azp_crt_request_data_s_plaque',
					tc_azp_crt_request_data." . d_azp_crt_request_data_s_validate . " AS 'lbl_azp_crt_request_data_s_validate',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_applicant_code . " AS 'lbl_azp_crt_request_data_t_applicant_code',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_applicant_entity . " AS 'lbl_azp_crt_request_data_t_applicant_entity',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_bilable . " AS 'lbl_azp_crt_request_data_t_bilable',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_certificate_type . " AS 'lbl_azp_crt_request_data_t_certificate_type',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_city . " AS 'lbl_azp_crt_request_data_t_city',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_client_code . " AS 'lbl_azp_crt_request_data_t_client_code',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_client_name . " AS 'lbl_azp_crt_request_data_t_client_name',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_date_image . " AS 'lbl_azp_crt_request_data_t_crt_date_image',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_date_load . " AS 'lbl_azp_crt_request_data_t_crt_date_load',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_document . " AS 'lbl_azp_crt_request_data_t_crt_document',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_error . " AS 'lbl_azp_crt_request_data_t_crt_error',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_mark_image . " AS 'lbl_azp_crt_request_data_t_crt_mark_image',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_name . " AS 'lbl_azp_crt_request_data_t_crt_name',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_route . " AS 'lbl_azp_crt_request_data_t_crt_route',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_size . " AS 'lbl_azp_crt_request_data_t_crt_size',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_tmp_name . " AS 'lbl_azp_crt_request_data_t_crt_tmp_name',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_type . " AS 'lbl_azp_crt_request_data_t_crt_type',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " AS 'lbl_azp_crt_request_data_t_date_delivery',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_entity_dispatcher . " AS 'lbl_azp_crt_request_data_t_entity_dispatcher',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_full_name . " AS 'lbl_azp_crt_request_data_t_full_name',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_identification . " AS 'lbl_azp_crt_request_data_t_identification',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_nro_oblitation . " AS 'lbl_azp_crt_request_data_t_nro_oblitation',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_observation . " AS 'lbl_azp_crt_request_data_t_observation',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_plaque_enrollment . " AS 'lbl_azp_crt_request_data_t_plaque_enrollment',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_process . " AS 'lbl_azp_crt_request_data_t_process',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_provider_class . " AS 'lbl_azp_crt_request_data_t_provider_class',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_provider_name . " AS 'lbl_azp_crt_request_data_t_provider_name',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_amount . " AS 'lbl_azp_crt_request_data_t_rcb_amount',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_date_load . " AS 'lbl_azp_crt_request_data_t_rcb_date_load',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_document . " AS 'lbl_azp_crt_request_data_t_rcb_document',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_error . " AS 'lbl_azp_crt_request_data_t_rcb_error',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_name . " AS 'lbl_azp_crt_request_data_t_rcb_name',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_nro_receipt . " AS 'lbl_azp_crt_request_data_t_rcb_nro_receipt',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_receipt . " AS 'lbl_azp_crt_request_data_t_rcb_receipt',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_route . " AS 'lbl_azp_crt_request_data_t_rcb_route',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_service . " AS 'lbl_azp_crt_request_data_t_rcb_service',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_size . " AS 'lbl_azp_crt_request_data_t_rcb_size',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_tmp_name . " AS 'lbl_azp_crt_request_data_t_rcb_tmp_name',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_type . " AS 'lbl_azp_crt_request_data_t_rcb_type',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_refundable . " AS 'lbl_azp_crt_request_data_t_refundable',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_date . " AS 'lbl_azp_crt_request_data_t_request_date',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_id . " AS 'lbl_azp_crt_request_data_t_request_id',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " AS 'lbl_azp_crt_request_data_t_request_nro',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_send_city . " AS 'lbl_azp_crt_request_data_t_send_city',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_supplier_date_delivery . " AS 'lbl_azp_crt_request_data_t_supplier_date_delivery',
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_supplier_date_request . " AS 'lbl_azp_crt_request_data_t_supplier_date_request',
					tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_city . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_city',
					tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_client . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_client',
					tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_expiration . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_expiration',
					tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_observation_type . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_observation_type',
					tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_phase . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_phase',
					tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_request_type . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_request_type',

					tc_azp_crt_bank." . d_azp_crt_bank_t_name . " AS 'lbl_azp_crt_bank_t_name',
					tc_azp_crt_city." . d_azp_crt_city_t_name . " AS 'lbl_azp_crt_city_t_name',
					tc_azp_crt_client." . d_azp_crt_client_t_code . " AS 'lbl_azp_crt_client_t_code',
					tc_azp_crt_expiration." . d_azp_crt_expiration_t_name . " AS 'lbl_azp_crt_expiration_t_name',
					tc_azp_crt_observation_type." . d_azp_crt_observation_type_t_name . " AS 'lbl_azp_crt_observation_type_t_name',
					tc_azp_crt_phase." . d_azp_crt_phase_t_name . " AS 'lbl_azp_crt_phase_t_name',
					tc_azp_crt_request_type." . d_azp_crt_request_type_t_name . " AS 'lbl_azp_crt_request_type_t_name',

					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ------------------------------------------------------------------------ 
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ------------------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
				    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
					= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ------------------------------------------------------------------------ 
				INNER JOIN " . t_azp_crt_bank . " tc_azp_crt_bank
					ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						= tc_azp_crt_bank." . d_azp_crt_bank_v_id_azp_fct_client . "
				-- ------------------------------------------------------------------------ 
				INNER JOIN " . t_azp_crt_client . " tc_azp_crt_client
					ON tc_azp_crt_bank." . d_azp_crt_bank_id_azp_crt_bank . "
						= tc_azp_crt_client." . d_azp_crt_client_v_id_azp_crt_bank . "
				-- ------------------------------------------------------------------------ 
				INNER JOIN " . t_azp_crt_request_data . " tc_azp_crt_request_data
					ON tc_azp_crt_client." . d_azp_crt_client_id_azp_crt_client . "
						= tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_client . "
				-- ------------------------------------------------------------------------ 
				INNER JOIN " . t_azp_crt_city . " tc_azp_crt_city
					ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_city . "
						= tc_azp_crt_city." . d_azp_crt_city_id_azp_crt_city . "
				-- ------------------------------------------------------------------------ 
				INNER JOIN " . t_azp_crt_expiration . " tc_azp_crt_expiration
					ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_expiration . "
						= tc_azp_crt_expiration." . d_azp_crt_expiration_id_azp_crt_expiration . "
				-- ------------------------------------------------------------------------ 
				INNER JOIN " . t_azp_crt_observation_type . " tc_azp_crt_observation_type
					ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_observation_type . "
						= tc_azp_crt_observation_type." . d_azp_crt_observation_type_id_azp_crt_observation_type . "
				-- ------------------------------------------------------------------------ 
				INNER JOIN " . t_azp_crt_phase . " tc_azp_crt_phase
					ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_phase . "
						= tc_azp_crt_phase." . d_azp_crt_phase_id_azp_crt_phase . "
				-- ------------------------------------------------------------------------ 
				INNER JOIN " . t_azp_crt_request_type . " tc_azp_crt_request_type
					ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_request_type . "
						= tc_azp_crt_request_type." . d_azp_crt_request_type_id_azp_crt_request_type . "
				-- ------------------------------------------------------------------------ 
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '1' " . $var_qy_sub_coverage . "
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
					AND tc_azp_crt_request_data." . d_azp_crt_request_data_m_deleted . " = '1'
					AND (tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " >= '" . $var_date_send . "'
						AND tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " <= '" . $var_date_send . "')
					AND tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_date . " = '" . $var_date_request . "'
					AND tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " = '" . $var_request . "'
					AND tc_azp_crt_request_type." . d_azp_crt_request_type_t_name . " = '" . $var_certificate . "'
					AND tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_phase . " = '4'
					AND tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'

				-- ------------------------------------------------------------------------ 
				GROUP BY tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " ASC,
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_identification . " ASC,
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_plaque_enrollment . " ASC
				-- ------------------------------------------------------------------------ 
				ORDER BY tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " ASC,
					tc_azp_crt_request_data." . d_azp_crt_request_data_t_identification . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_vision_defunction() {
			# Defincion de valores a nuevas variables
			$var_certificate = ''; $var_date_request = ''; $var_date_send = ''; $var_request = ''; $var_tariff = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $this->id . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_date_send = $value[d_azp_fct_prefacture_t_date_send];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Defincion de valores a nuevas variables
			$var_client = ''; $var_coverage = ''; $var_investigation = ''; $var_result = ''; $var_scale = ''; $var_service = ''; $var_sub_coverage = ''; $var_sub_service = '';
			$var_ct_3 = ''; $var_ct_4 = ''; $var_ct_5 = ''; $var_ct_6 = ''; $var_ct_7 = ''; $var_ct_8 = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_client = $value[d_azp_fct_tariff_v_id_azp_fct_client];
					$var_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_coverage];
					$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
					$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
					$var_scale = $value[d_azp_fct_tariff_v_id_azp_fct_scale];
					$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					$var_sub_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_sub_coverage];
					$var_sub_service = $value[d_azp_fct_tariff_v_id_azp_fct_sub_service];
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_coverage, d_azp_fct_coverage_id_azp_fct_coverage . " = '" . $var_coverage . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_coverage = $value[d_azp_fct_coverage_t_name]; endforeach; } else { $var_id_coverage = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_investigation, d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_investigation = $value[d_azp_fct_investigation_t_name]; endforeach; } else { $var_id_investigation = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_result, d_azp_fct_result_id_azp_fct_result . " = '" . $var_result . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_result = $value[d_azp_fct_result_t_name]; endforeach; } else { $var_id_result = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_scale, d_azp_fct_scale_id_azp_fct_scale . " = '" . $var_scale . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_scale = $value[d_azp_fct_scale_t_name]; endforeach; } else { $var_id_scale = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_service, d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_service = $value[d_azp_fct_service_t_name]; endforeach; } else { $var_id_service = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '" . $var_sub_coverage . "' LIMIT 1");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_coverage = $value[d_azp_fct_sub_coverage_t_name]; endforeach; } else { $var_id_sub_coverage = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_service = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_id_sub_service = ''; }
			#-------------------------------------------------------------------------#
			/*if ($var_id_sub_coverage == 'NO APLICA') {
				$var_qy_sub_coverage = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " = UPPER('" . $var_id_coverage . "')";
			} else if ($var_id_sub_coverage == 'TODO') {
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '3'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_3 = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_3 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '4'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_4 = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_4 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '5'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_5 = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_5 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '6'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_6 = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_6 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '7'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_7 = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_7 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '8'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_8 = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_8 = ''; }
				#-------------------------------------------------------------------------#
				$var_qy_sub_coverage = "AND (tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
			} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
				$var_qy_sub_coverage = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " = UPPER('" . $var_id_sub_coverage . "')";
			}*/
			if ($var_id_sub_coverage == 'NO APLICA') {
				$var_qy_sub_coverage = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " = '" . $var_id_coverage . "'";
			} else if ($var_id_sub_coverage == 'TODO') {
				$var_qy_sub_coverage = "";
			} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
				$var_qy_sub_coverage = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " = '" . $var_id_sub_coverage . "'";
			}
			#-------------------------------------------------------------------------#
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_gsc_request." . d_azp_gsc_request_id_azp_gsc_request . " AS 'lbl_azp_gsc_request_id_azp_gsc_request',
					tc_azp_gsc_request." . d_azp_gsc_request_s_capture . " AS 'lbl_azp_gsc_request_s_capture',
					tc_azp_gsc_request." . d_azp_gsc_request_s_client . " AS 'lbl_azp_gsc_request_s_client',
					tc_azp_gsc_request." . d_azp_gsc_request_s_code . " AS 'lbl_azp_gsc_request_s_code',
					tc_azp_gsc_request." . d_azp_gsc_request_s_data . " AS 'lbl_azp_gsc_request_s_data',
					tc_azp_gsc_request." . d_azp_gsc_request_s_date . " AS 'lbl_azp_gsc_request_s_date',
					tc_azp_gsc_request." . d_azp_gsc_request_s_duplicate . " AS 'lbl_azp_gsc_request_s_duplicate',
					tc_azp_gsc_request." . d_azp_gsc_request_s_existing . " AS 'lbl_azp_gsc_request_s_existing',
					tc_azp_gsc_request." . d_azp_gsc_request_s_validate . " AS 'lbl_azp_gsc_request_s_validate',
					tc_azp_gsc_request." . d_azp_gsc_request_s_web_service . " AS 'lbl_azp_gsc_request_s_web_service',
					tc_azp_gsc_request." . d_azp_gsc_request_t_city . " AS 'lbl_azp_gsc_request_t_city',
					tc_azp_gsc_request." . d_azp_gsc_request_t_date_associate . " AS 'lbl_azp_gsc_request_t_date_associate',
					tc_azp_gsc_request." . d_azp_gsc_request_t_death_date . " AS 'lbl_azp_gsc_request_t_death_date',
					tc_azp_gsc_request." . d_azp_gsc_request_t_full_name . " AS 'lbl_azp_gsc_request_t_full_name',
					tc_azp_gsc_request." . d_azp_gsc_request_t_id_supplier . " AS 'lbl_azp_gsc_request_t_id_supplier',
					tc_azp_gsc_request." . d_azp_gsc_request_t_identification . " AS 'lbl_azp_gsc_request_t_identification',
					tc_azp_gsc_request." . d_azp_gsc_request_t_notary . " AS 'lbl_azp_gsc_request_t_notary',
					tc_azp_gsc_request." . d_azp_gsc_request_t_number_consecutive . " AS 'lbl_azp_gsc_request_t_number_consecutive',
					tc_azp_gsc_request." . d_azp_gsc_request_t_number_obligation . " AS 'lbl_azp_gsc_request_t_number_obligation',
					tc_azp_gsc_request." . d_azp_gsc_request_t_number_request . " AS 'lbl_azp_gsc_request_t_number_request',
					tc_azp_gsc_request." . d_azp_gsc_request_t_observation . " AS 'lbl_azp_gsc_request_t_observation',
					tc_azp_gsc_request." . d_azp_gsc_request_t_observation_outer . " AS 'lbl_azp_gsc_request_t_observation_outer',
					tc_azp_gsc_request." . d_azp_gsc_request_t_reported_bank . " AS 'lbl_azp_gsc_request_t_reported_bank',
					tc_azp_gsc_request." . d_azp_gsc_request_t_request_by . " AS 'lbl_azp_gsc_request_t_request_by',
					tc_azp_gsc_request." . d_azp_gsc_request_t_request_date . " AS 'lbl_azp_gsc_request_t_request_date',
					tc_azp_gsc_request." . d_azp_gsc_request_t_request_state . " AS 'lbl_azp_gsc_request_t_request_state',
					tc_azp_gsc_request." . d_azp_gsc_request_t_serial . " AS 'lbl_azp_gsc_request_t_serial',
					tc_azp_gsc_request." . d_azp_gsc_request_t_shipping_date . " AS 'lbl_azp_gsc_request_t_shipping_date',
					tc_azp_gsc_request." . d_azp_gsc_request_t_shipping_number . " AS 'lbl_azp_gsc_request_t_shipping_number',
					tc_azp_gsc_request." . d_azp_gsc_request_t_supplier_request_date . " AS 'lbl_azp_gsc_request_t_supplier_request_date',
					tc_azp_gsc_request." . d_azp_gsc_request_t_supplier_request_number . " AS 'lbl_azp_gsc_request_t_supplier_request_number',
					tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_causal . " AS 'lbl_azp_gsc_request_v_id_azp_gsc_causal',
					tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_client . " AS 'lbl_azp_gsc_request_v_id_azp_gsc_client',
					tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_expiration . " AS 'lbl_azp_gsc_request_v_id_azp_gsc_expiration',
					tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_phase . " AS 'lbl_azp_gsc_request_v_id_azp_gsc_phase',
					tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_state . " AS 'lbl_azp_gsc_request_v_id_azp_gsc_state',

					tc_azp_gsc_causal." . d_azp_gsc_causal_t_name . " AS 'lbl_azp_gsc_causal_t_name',
					tc_azp_gsc_client." . d_azp_gsc_client_t_name . " AS 'lbl_azp_gsc_client_t_name',
					tc_azp_gsc_expiration." . d_azp_gsc_expiration_t_name . " AS 'lbl_azp_gsc_expiration_t_name',
					tc_azp_gsc_phase." . d_azp_gsc_phase_t_name . " AS 'lbl_azp_gsc_phase_t_name',
					tc_azp_gsc_state." . d_azp_gsc_state_t_name . " AS 'lbl_azp_gsc_state_t_name',

					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'

				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_gsc_client . " tc_azp_gsc_client
					ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						= tc_azp_gsc_client." . d_azp_gsc_client_v_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_gsc_request . " tc_azp_gsc_request
					ON tc_azp_gsc_client." . d_azp_gsc_client_id_azp_gsc_client . "
						= tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_gsc_causal . " tc_azp_gsc_causal
					ON tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_causal . "
						= tc_azp_gsc_causal." . d_azp_gsc_causal_id_azp_gsc_causal . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_gsc_expiration . " tc_azp_gsc_expiration
					ON tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_expiration . "
						= tc_azp_gsc_expiration." . d_azp_gsc_expiration_id_azp_gsc_expiration . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_gsc_phase . " tc_azp_gsc_phase
					ON tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_phase . "
						= tc_azp_gsc_phase." . d_azp_gsc_phase_id_azp_gsc_phase . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_gsc_state . " tc_azp_gsc_state
					ON tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_state . "
						= tc_azp_gsc_state." . d_azp_gsc_state_id_azp_gsc_state . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '2' " . $var_qy_sub_coverage . "
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
					AND tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'
					AND tc_azp_gsc_request." . d_azp_gsc_request_m_deleted . " = '1'
					AND tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_phase . " = '10'
					AND tc_azp_gsc_request." . d_azp_gsc_request_t_request_date . " = '" . $var_date_request . "'
					AND tc_azp_gsc_request." . d_azp_gsc_request_t_number_request . " = '" . $var_request . "'
					AND (tc_azp_gsc_request." . d_azp_gsc_request_t_shipping_date . " >= '" . $var_date_send . "'
						AND tc_azp_gsc_request." . d_azp_gsc_request_t_shipping_date . " <= '" . $var_date_send . "')
				-- ---------------------------------------------------------------
				GROUP BY tc_azp_gsc_request." . d_azp_gsc_request_t_number_request . " ASC,
					tc_azp_gsc_request." . d_azp_gsc_request_t_identification . " ASC
				-- ---------------------------------------------------------------
				ORDER BY tc_azp_gsc_request." . d_azp_gsc_request_t_number_request . " ASC,
					tc_azp_gsc_request." . d_azp_gsc_request_t_identification . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_vision_investigation() {
			# Defincion de valores a nuevas variables
			$var_certificate = ''; $var_date_request = ''; $var_date_send = ''; $var_request = ''; $var_tariff = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $this->id . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_date_send = $value[d_azp_fct_prefacture_t_date_send];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_relation = $value[d_azp_fct_prefacture_v_id_azp_fct_relation];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Defincion de valores a nuevas variables
			$var_client = ''; $var_coverage = ''; $var_investigation = ''; $var_result = ''; $var_scale = ''; $var_service = ''; $var_sub_coverage = ''; $var_sub_service = '';
			$var_ct_3 = ''; $var_ct_4 = ''; $var_ct_5 = ''; $var_ct_6 = ''; $var_ct_7 = ''; $var_ct_8 = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_client = $value[d_azp_fct_tariff_v_id_azp_fct_client];
					$var_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_coverage];
					$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
					$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
					$var_scale = $value[d_azp_fct_tariff_v_id_azp_fct_scale];
					$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
					$var_sub_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_sub_coverage];
					$var_sub_service = $value[d_azp_fct_tariff_v_id_azp_fct_sub_service];
				endforeach;
			}

			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_nam_service = $value[d_azp_fct_sub_service_t_name]; endforeach; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_coverage, d_azp_fct_coverage_id_azp_fct_coverage . " = '" . $var_coverage . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_coverage = $value[d_azp_fct_coverage_t_name]; endforeach; } else { $var_id_coverage = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_investigation, d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_investigation = $value[d_azp_fct_investigation_t_name]; endforeach; } else { $var_id_investigation = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_result, d_azp_fct_result_id_azp_fct_result . " = '" . $var_result . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_result = $value[d_azp_fct_result_t_name]; endforeach; } else { $var_id_result = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_scale, d_azp_fct_scale_id_azp_fct_scale . " = '" . $var_scale . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_scale = $value[d_azp_fct_scale_t_name]; endforeach; } else { $var_id_scale = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_service, d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_service = $value[d_azp_fct_service_t_name]; endforeach; } else { $var_id_service = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '" . $var_sub_coverage . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_coverage = $value[d_azp_fct_sub_coverage_t_name]; endforeach; } else { $var_id_sub_coverage = ''; }
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_service = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_id_sub_service = ''; }


			#-------------------------------------------------------------------------#
			if ($var_id_investigation == 'EFECTIVIDAD') {
				if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') {
					//$var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_effective . " = '" . $var_id_result . "'";
					if ($var_nam_service == 'CAMARAS') {
						$var_qy_result = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_effective . " = '" . $var_id_result . "'";
					} else if ($var_nam_service == 'INMUEBLES') {
						$var_qy_result = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_policy_effective . " = '" . $var_id_result . "'";
					} else if ($var_nam_service == 'VEHICULOS') {
						$var_qy_result = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_effective . " = '" . $var_id_result . "'";
					} else if ($var_nam_service == 'SALARIOS') {
						$var_qy_result = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_effective . " = '" . $var_id_result . "'";
					} else if ($var_nam_service == 'GARANTIAS') {
						$var_qy_result = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_effective . " = '" . $var_id_result . "'";
					} else { $var_qy_result = ""; }
				} else { $var_qy_result = ""; }
			} else if ($var_id_investigation == 'VIABILIDAD') {
				if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') {
					//$var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_viability . " = '" . $var_id_result . "'";
					if ($var_nam_service == 'CAMARAS') {
						$var_qy_result = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_viability . " = '" . $var_id_result . "'";
					} else if ($var_nam_service == 'INMUEBLES') {
						$var_qy_result = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_policy_viability . " = '" . $var_id_result . "'";
					} else if ($var_nam_service == 'VEHICULOS') {
						$var_qy_result = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_viability . " = '" . $var_id_result . "'";
					} else if ($var_nam_service == 'SALARIOS') {
						$var_qy_result = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_viability . " = '" . $var_id_result . "'";
					} else if ($var_nam_service == 'GARANTIAS') {
						$var_qy_result = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_viability . " = '" . $var_id_result . "'";
					} else { $var_qy_result = ""; }
				} else { $var_qy_result = ""; }
			}
			#-------------------------------------------------------------------------#
			if ($var_id_sub_coverage == 'NO APLICA') {
				//$var_qy_sub_coverage = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " = '" . $var_id_coverage . "'";
				if ($var_nam_service == 'CAMARAS') {
					$var_qy_sub_coverage = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " = '" . $var_id_coverage . "'";
				} else if ($var_nam_service == 'INMUEBLES') {
					$var_qy_sub_coverage = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " = '" . $var_id_coverage . "'";
				} else if ($var_nam_service == 'VEHICULOS') {
					$var_qy_sub_coverage = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " = '" . $var_id_coverage . "'";
				} else if ($var_nam_service == 'SALARIOS') {
					$var_qy_sub_coverage = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " = '" . $var_id_coverage . "'";
				} else if ($var_nam_service == 'GARANTIAS') {
					$var_qy_sub_coverage = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " = '" . $var_id_coverage . "'";
				} else { $var_qy_sub_coverage = ''; }
			} else if ($var_id_sub_coverage == 'TODO') {
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '3'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) {
					//$var_ct_3 = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != '" . $value['lbl_city'] . "'";
					if ($var_nam_service == 'CAMARAS') {
						$var_ct_3 = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'INMUEBLES') {
						$var_ct_3 = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'VEHICULOS') {
						$var_ct_3 = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'SALARIOS') {
						$var_ct_3 = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'GARANTIAS') {
						$var_ct_3 = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else { $var_ct_3 = ''; }
				} } else { $var_ct_3 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '4'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) {
					//$var_ct_4 = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != '" . $value['lbl_city'] . "'";
					if ($var_nam_service == 'CAMARAS') {
						$var_ct_4 = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'INMUEBLES') {
						$var_ct_4 = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'VEHICULOS') {
						$var_ct_4 = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'SALARIOS') {
						$var_ct_4 = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'GARANTIAS') {
						$var_ct_4 = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else { $var_ct_4 = ''; }
				} } else { $var_ct_4 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '5'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) {
					//$var_ct_5 = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != '" . $value['lbl_city'] . "'";
					if ($var_nam_service == 'CAMARAS') {
						$var_ct_5 = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'INMUEBLES') {
						$var_ct_5 = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'VEHICULOS') {
						$var_ct_5 = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'SALARIOS') {
						$var_ct_5 = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'GARANTIAS') {
						$var_ct_5 = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else { $var_ct_5 = ''; }
				} } else { $var_ct_5 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '6'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) {
					//$var_ct_6 = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != '" . $value['lbl_city'] . "'";
					if ($var_nam_service == 'CAMARAS') {
						$var_ct_6 = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'INMUEBLES') {
						$var_ct_6 = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'VEHICULOS') {
						$var_ct_6 = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'SALARIOS') {
						$var_ct_6 = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'GARANTIAS') {
						$var_ct_6 = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else { $var_ct_6 = ''; }
				} } else { $var_ct_6 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '7'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) {
					//$var_ct_7 = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != '" . $value['lbl_city'] . "'";
					if ($var_nam_service == 'CAMARAS') {
						$var_ct_7 = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'INMUEBLES') {
						$var_ct_7 = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'VEHICULOS') {
						$var_ct_7 = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'SALARIOS') {
						$var_ct_7 = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'GARANTIAS') {
						$var_ct_7 = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else { $var_ct_7 = ''; }
				} } else { $var_ct_7 = ''; }
				#-------------------------------------------------------------------------#
				# Verificar en la base de datos si existen el registro
				$var_sql = $this->db->query("
					SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
					FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
					INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
						ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
					WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '8'
				");
				# Recorrer los datos de la consulta de la tabla y encodificarlos
				if (true == $var_sql) { foreach ($var_sql as $key => $value) {
					//$var_ct_8 = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != '" . $value['lbl_city'] . "'";
					if ($var_nam_service == 'CAMARAS') {
						$var_ct_8 = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'INMUEBLES') {
						$var_ct_8 = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'VEHICULOS') {
						$var_ct_8 = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'SALARIOS') {
						$var_ct_8 = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else if ($var_nam_service == 'GARANTIAS') {
						$var_ct_8 = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
					} else { $var_ct_8 = ''; }
				} } else { $var_ct_8 = ''; }
				#-------------------------------------------------------------------------#
				//$var_qy_sub_coverage = "AND (tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";

				if ($var_nam_service == 'CAMARAS') {
					$var_qy_sub_coverage = "AND (tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
				} else if ($var_nam_service == 'INMUEBLES') {
					$var_qy_sub_coverage = "AND (tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
				} else if ($var_nam_service == 'VEHICULOS') {
					$var_qy_sub_coverage = "AND (tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
				} else if ($var_nam_service == 'SALARIOS') {
					$var_qy_sub_coverage = "AND (tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
				} else if ($var_nam_service == 'GARANTIAS') {
					$var_qy_sub_coverage = "AND (tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
				} else { $var_qy_sub_coverage = ''; }
			} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
				//$var_qy_sub_coverage = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " = '" . $var_id_sub_coverage . "'";
				
				if ($var_nam_service == 'CAMARAS') {
					$var_qy_sub_coverage = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " = '" . $var_id_sub_coverage . "'";
				} else if ($var_nam_service == 'INMUEBLES') {
					$var_qy_sub_coverage = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " = '" . $var_id_sub_coverage . "'";
				} else if ($var_nam_service == 'VEHICULOS') {
					$var_qy_sub_coverage = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " = '" . $var_id_sub_coverage . "'";
				} else if ($var_nam_service == 'SALARIOS') {
					$var_qy_sub_coverage = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " = '" . $var_id_sub_coverage . "'";
				} else if ($var_nam_service == 'GARANTIAS') {
					$var_qy_sub_coverage = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " = '" . $var_id_sub_coverage . "'";
				} else { $var_qy_sub_coverage = ''; }
			}
			#-------------------------------------------------------------------------#
			# Seleccionar los registros de la tabla
			/*return $this->db->query("
				SELECT
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
					tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

					tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_id_azp_ibn_evaluation . " AS 'lbl_azp_ibn_evaluation_id_azp_ibn_evaluation',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_identification . " AS 'lbl_azp_ibn_evaluation_t_identification',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_cam . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_cam',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_fur . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_fur',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_pro . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_pro',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_veh . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_veh',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_war . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_war',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_cam . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_cam',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_fur . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_fur',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_pro . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_pro',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_veh . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_veh',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_war . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_war',
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_evaluation_v_id_azp_ibn_control_panel',
					
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ------------------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ------------------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
				    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
					= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ------------------------------------------------------------------------
				INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
				    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
					= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
				-- ------------------------------------------------------------------------
				INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
					ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
						= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
				-- ------------------------------------------------------------------------
				INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
					ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
						= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
				-- ------------------------------------------------------------------------
				INNER JOIN " . t_azp_ibn_evaluation . " tc_azp_ibn_evaluation
					ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
						= tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_v_id_azp_ibn_control_panel . "
				-- ------------------------------------------------------------------------
				INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
					ON tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_identification . "
						= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . "
				-- ------------------------------------------------------------------------
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
					AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
					AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
						AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
					AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
					" . $var_qy_result . " " . $var_qy_sub_coverage . "
				-- ------------------------------------------------------------------------ 
				GROUP BY tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_v_id_azp_ibn_control_panel . " ASC,
					tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_identification . " ASC,
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " ASC,
					tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " ASC
				-- ------------------------------------------------------------------------ 
				ORDER BY tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " ASC
			");*/

			if ($var_nam_service == 'CAMARAS') {
				return $this->db->query("
					SELECT
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

						tc_azp_ibn_camera." . d_azp_ibn_camera_id_azp_ibn_camera . " AS 'lbl_azp_ibn_camera_id_azp_ibn_camera',
						tc_azp_ibn_camera." . d_azp_ibn_camera_m_by_created . " AS 'lbl_azp_ibn_camera_m_by_created',
						tc_azp_ibn_camera." . d_azp_ibn_camera_m_by_modified . " AS 'lbl_azp_ibn_camera_m_by_modified',
						tc_azp_ibn_camera." . d_azp_ibn_camera_m_date_created . " AS 'lbl_azp_ibn_camera_m_date_created',
						tc_azp_ibn_camera." . d_azp_ibn_camera_m_date_modified . " AS 'lbl_azp_ibn_camera_m_date_modified',
						tc_azp_ibn_camera." . d_azp_ibn_camera_m_deleted . " AS 'lbl_azp_ibn_camera_m_deleted',
						tc_azp_ibn_camera." . d_azp_ibn_camera_m_description . " AS 'lbl_azp_ibn_camera_m_description',
						tc_azp_ibn_camera." . d_azp_ibn_camera_m_level . " AS 'lbl_azp_ibn_camera_m_level',
						tc_azp_ibn_camera." . d_azp_ibn_camera_m_status . " AS 'lbl_azp_ibn_camera_m_status',
						tc_azp_ibn_camera." . d_azp_ibn_camera_m_temp . " AS 'lbl_azp_ibn_camera_m_temp',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_validate . " AS 'lbl_azp_ibn_camera_t_validate',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_acount . " AS 'lbl_azp_ibn_camera_t_acount',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_bcount . " AS 'lbl_azp_ibn_camera_t_bcount',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_act_economic . " AS 'lbl_azp_ibn_camera_t_act_economic',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_address . " AS 'lbl_azp_ibn_camera_t_address',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_assessment . " AS 'lbl_azp_ibn_camera_t_assessment',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_business_name . " AS 'lbl_azp_ibn_camera_t_business_name',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_causal_feasibility . " AS 'lbl_azp_ibn_camera_t_causal_feasibility',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_city . " AS 'lbl_azp_ibn_camera_t_city',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_comment_legal . " AS 'lbl_azp_ibn_camera_t_comment_legal',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_concept . " AS 'lbl_azp_ibn_camera_t_concept',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_consecutive . " AS 'lbl_azp_ibn_camera_t_consecutive',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_department . " AS 'lbl_azp_ibn_camera_t_department',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_establishment . " AS 'lbl_azp_ibn_camera_t_establishment',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_full_name . " AS 'lbl_azp_ibn_camera_t_full_name',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_identification . " AS 'lbl_azp_ibn_camera_t_identification',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_legal_representative . " AS 'lbl_azp_ibn_camera_t_legal_representative',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_legal_rp_certificate . " AS 'lbl_azp_ibn_camera_t_legal_rp_certificate',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_limitation . " AS 'lbl_azp_ibn_camera_t_limitation',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_municipality . " AS 'lbl_azp_ibn_camera_t_municipality',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_nit . " AS 'lbl_azp_ibn_camera_t_nit',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_nro_registration . " AS 'lbl_azp_ibn_camera_t_nro_registration',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_observation . " AS 'lbl_azp_ibn_camera_t_observation',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_phone . " AS 'lbl_azp_ibn_camera_t_phone',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_effective . " AS 'lbl_azp_ibn_camera_t_policy_effective',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_final . " AS 'lbl_azp_ibn_camera_t_policy_final',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_viability . " AS 'lbl_azp_ibn_camera_t_policy_viability',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_renewal_date . " AS 'lbl_azp_ibn_camera_t_renewal_date',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_rup . " AS 'lbl_azp_ibn_camera_t_rup',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_total_active . " AS 'lbl_azp_ibn_camera_t_total_active',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_type_company . " AS 'lbl_azp_ibn_camera_t_type_company',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_type_organization . " AS 'lbl_azp_ibn_camera_t_type_organization',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_viable . " AS 'lbl_azp_ibn_camera_t_viable',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_well_viable . " AS 'lbl_azp_ibn_camera_t_well_viable',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_year . " AS 'lbl_azp_ibn_camera_t_year',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_located . " AS 'lbl_azp_ibn_camera_t_st_located',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_returnable . " AS 'lbl_azp_ibn_camera_t_st_returnable',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_receipt . " AS 'lbl_azp_ibn_camera_t_st_receipt',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_date . " AS 'lbl_azp_ibn_camera_t_st_date',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_value . " AS 'lbl_azp_ibn_camera_t_st_value',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " AS 'lbl_azp_ibn_camera_t_zmunicipality',
						tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_control_panel',
						tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_observation . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_observation',
						tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_state',
						tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_type_certified . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_type_certified',
						tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_type_concept . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_type_concept',

						tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

						tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
						
						tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
						tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
					FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
						ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
						ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
							= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
						ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
							= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_camera . " tc_azp_ibn_camera
						ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
							= tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
						ON tc_azp_ibn_camera." . d_azp_ibn_camera_t_acount . "
							= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
					-- ------------------------------------------------------------------------
					WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '9'
						AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
						AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
						AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
						AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
						AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_bcount . " = '1'
						" . $var_qy_result . " " . $var_qy_sub_coverage . "
					-- ------------------------------------------------------------------------ 
					GROUP BY tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . " ASC,
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_identification . " ASC,
						tc_azp_ibn_camera." . d_azp_ibn_camera_t_acount . " ASC
					-- ------------------------------------------------------------------------ 
					ORDER BY tc_azp_ibn_camera." . d_azp_ibn_camera_t_consecutive . " ASC
				");
			} else if ($var_nam_service == 'INMUEBLES') {
				return $this->db->query("
					SELECT
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

						tc_azp_ibn_property." . d_azp_ibn_property_id_azp_ibn_property . " AS 'lbl_azp_ibn_property_id_azp_ibn_property',
						tc_azp_ibn_property." . d_azp_ibn_property_m_by_created . " AS 'lbl_azp_ibn_property_m_by_created',
						tc_azp_ibn_property." . d_azp_ibn_property_m_by_modified . " AS 'lbl_azp_ibn_property_m_by_modified',
						tc_azp_ibn_property." . d_azp_ibn_property_m_date_created . " AS 'lbl_azp_ibn_property_m_date_created',
						tc_azp_ibn_property." . d_azp_ibn_property_m_date_modified . " AS 'lbl_azp_ibn_property_m_date_modified',
						tc_azp_ibn_property." . d_azp_ibn_property_m_deleted . " AS 'lbl_azp_ibn_property_m_deleted',
						tc_azp_ibn_property." . d_azp_ibn_property_m_description . " AS 'lbl_azp_ibn_property_m_description',
						tc_azp_ibn_property." . d_azp_ibn_property_m_level . " AS 'lbl_azp_ibn_property_m_level',
						tc_azp_ibn_property." . d_azp_ibn_property_m_status . " AS 'lbl_azp_ibn_property_m_status',
						tc_azp_ibn_property." . d_azp_ibn_property_m_temp . " AS 'lbl_azp_ibn_property_m_temp',
						tc_azp_ibn_property." . d_azp_ibn_property_t_load_data . " AS 'lbl_azp_ibn_property_t_load_data',
						tc_azp_ibn_property." . d_azp_ibn_property_t_validate . " AS 'lbl_azp_ibn_property_t_validate',
						tc_azp_ibn_property." . d_azp_ibn_property_t_acount . " AS 'lbl_azp_ibn_property_t_acount',
						tc_azp_ibn_property." . d_azp_ibn_property_t_bcount . " AS 'lbl_azp_ibn_property_t_bcount',
						tc_azp_ibn_property." . d_azp_ibn_property_t_address . " AS 'lbl_azp_ibn_property_t_address',
						tc_azp_ibn_property." . d_azp_ibn_property_t_area . " AS 'lbl_azp_ibn_property_t_area',
						tc_azp_ibn_property." . d_azp_ibn_property_t_assessment . " AS 'lbl_azp_ibn_property_t_assessment',
						tc_azp_ibn_property." . d_azp_ibn_property_t_causal_feasibility . " AS 'lbl_azp_ibn_property_t_causal_feasibility',
						tc_azp_ibn_property." . d_azp_ibn_property_t_comment_legal . " AS 'lbl_azp_ibn_property_t_comment_legal',
						tc_azp_ibn_property." . d_azp_ibn_property_t_concept . " AS 'lbl_azp_ibn_property_t_concept',
						tc_azp_ibn_property." . d_azp_ibn_property_t_consecutive . " AS 'lbl_azp_ibn_property_t_consecutive',
						tc_azp_ibn_property." . d_azp_ibn_property_t_department . " AS 'lbl_azp_ibn_property_t_department',
						tc_azp_ibn_property." . d_azp_ibn_property_t_full_name . " AS 'lbl_azp_ibn_property_t_full_name',
						tc_azp_ibn_property." . d_azp_ibn_property_t_identification . " AS 'lbl_azp_ibn_property_t_identification',
						tc_azp_ibn_property." . d_azp_ibn_property_t_limitation . " AS 'lbl_azp_ibn_property_t_limitation',
						tc_azp_ibn_property." . d_azp_ibn_property_t_market_value . " AS 'lbl_azp_ibn_property_t_market_value',
						tc_azp_ibn_property." . d_azp_ibn_property_t_municipality . " AS 'lbl_azp_ibn_property_t_municipality',
						tc_azp_ibn_property." . d_azp_ibn_property_t_nro_registration . " AS 'lbl_azp_ibn_property_t_nro_registration',
						tc_azp_ibn_property." . d_azp_ibn_property_t_observation . " AS 'lbl_azp_ibn_property_t_observation',
						tc_azp_ibn_property." . d_azp_ibn_property_t_ownership . " AS 'lbl_azp_ibn_property_t_ownership',
						tc_azp_ibn_property." . d_azp_ibn_property_t_policy_effective . " AS 'lbl_azp_ibn_property_t_policy_effective',
						tc_azp_ibn_property." . d_azp_ibn_property_t_policy_final . " AS 'lbl_azp_ibn_property_t_policy_final',
						tc_azp_ibn_property." . d_azp_ibn_property_t_policy_viability . " AS 'lbl_azp_ibn_property_t_policy_viability',
						tc_azp_ibn_property." . d_azp_ibn_property_t_purchase_annotation . " AS 'lbl_azp_ibn_property_t_purchase_annotation',
						tc_azp_ibn_property." . d_azp_ibn_property_t_viable . " AS 'lbl_azp_ibn_property_t_viable',
						tc_azp_ibn_property." . d_azp_ibn_property_t_well_viable . " AS 'lbl_azp_ibn_property_t_well_viable',
						tc_azp_ibn_property." . d_azp_ibn_property_t_st_located . " AS 'lbl_azp_ibn_property_t_st_located',
						tc_azp_ibn_property." . d_azp_ibn_property_t_st_returnable . " AS 'lbl_azp_ibn_property_t_st_returnable',
						tc_azp_ibn_property." . d_azp_ibn_property_t_st_receipt . " AS 'lbl_azp_ibn_property_t_st_receipt',
						tc_azp_ibn_property." . d_azp_ibn_property_t_st_date . " AS 'lbl_azp_ibn_property_t_st_date',
						tc_azp_ibn_property." . d_azp_ibn_property_t_st_value . " AS 'lbl_azp_ibn_property_t_st_value',
						tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " AS 'lbl_azp_ibn_property_t_zmunicipality',
						tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_control_panel',
						tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_observation . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_observation',
						tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_state',
						tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_type_concept . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_type_concept',
						tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_type_property . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_type_property',

						tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

						tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
						tc_azp_ibn_property." . d_azp_ibn_property_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
						tc_azp_ibn_property." . d_azp_ibn_property_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
						
						tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
						tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
					FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
						ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
						ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
							= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
						ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
							= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_property . " tc_azp_ibn_property
						ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
							= tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
						ON tc_azp_ibn_property." . d_azp_ibn_property_t_acount . "
							= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
					-- ------------------------------------------------------------------------
					WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '10'
						AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
						AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
						AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
						AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
						AND tc_azp_ibn_property." . d_azp_ibn_property_t_bcount . " = '1'
						" . $var_qy_result . " " . $var_qy_sub_coverage . "
					-- ------------------------------------------------------------------------ 
					GROUP BY tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . " ASC,
						tc_azp_ibn_property." . d_azp_ibn_property_t_identification . " ASC,
						tc_azp_ibn_property." . d_azp_ibn_property_t_acount . " ASC
					-- ------------------------------------------------------------------------ 
					ORDER BY tc_azp_ibn_property." . d_azp_ibn_property_t_consecutive . " ASC
				");
			} else if ($var_nam_service == 'VEHICULOS') {
				return $this->db->query("
					SELECT
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_id_azp_ibn_vehicle . " AS 'lbl_azp_ibn_vehicle_id_azp_ibn_vehicle',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_by_created . " AS 'lbl_azp_ibn_vehicle_m_by_created',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_by_modified . " AS 'lbl_azp_ibn_vehicle_m_by_modified',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_date_created . " AS 'lbl_azp_ibn_vehicle_m_date_created',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_date_modified . " AS 'lbl_azp_ibn_vehicle_m_date_modified',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_deleted . " AS 'lbl_azp_ibn_vehicle_m_deleted',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_description . " AS 'lbl_azp_ibn_vehicle_m_description',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_level . " AS 'lbl_azp_ibn_vehicle_m_level',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_status . " AS 'lbl_azp_ibn_vehicle_m_status',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_temp . " AS 'lbl_azp_ibn_vehicle_m_temp',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_load_data . " AS 'lbl_azp_ibn_vehicle_t_load_data',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_validate . " AS 'lbl_azp_ibn_vehicle_t_validate',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_acount . " AS 'lbl_azp_ibn_vehicle_t_acount',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_bcount . " AS 'lbl_azp_ibn_vehicle_t_bcount',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_assessment . " AS 'lbl_azp_ibn_vehicle_t_assessment',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_causal_feasibility . " AS 'lbl_azp_ibn_vehicle_t_causal_feasibility',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_city . " AS 'lbl_azp_ibn_vehicle_t_city',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_class . " AS 'lbl_azp_ibn_vehicle_t_class',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_color . " AS 'lbl_azp_ibn_vehicle_t_color',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_comment_legal . " AS 'lbl_azp_ibn_vehicle_t_comment_legal',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_concept . " AS 'lbl_azp_ibn_vehicle_t_concept',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_consecutive . " AS 'lbl_azp_ibn_vehicle_t_consecutive',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_full_name . " AS 'lbl_azp_ibn_vehicle_t_full_name',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_identification . " AS 'lbl_azp_ibn_vehicle_t_identification',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_limitation . " AS 'lbl_azp_ibn_vehicle_t_limitation',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_line . " AS 'lbl_azp_ibn_vehicle_t_line',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_make_camera . " AS 'lbl_azp_ibn_vehicle_t_make_camera',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_mark . " AS 'lbl_azp_ibn_vehicle_t_mark',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_model . " AS 'lbl_azp_ibn_vehicle_t_model',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_observation . " AS 'lbl_azp_ibn_vehicle_t_observation',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_plaque . " AS 'lbl_azp_ibn_vehicle_t_plaque',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_effective . " AS 'lbl_azp_ibn_vehicle_t_policy_effective',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_final . " AS 'lbl_azp_ibn_vehicle_t_policy_final',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_viability . " AS 'lbl_azp_ibn_vehicle_t_policy_viability',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_service . " AS 'lbl_azp_ibn_vehicle_t_service',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_value_assessment . " AS 'lbl_azp_ibn_vehicle_t_value_assessment',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_value_vehicle . " AS 'lbl_azp_ibn_vehicle_t_value_vehicle',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_viable . " AS 'lbl_azp_ibn_vehicle_t_viable',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_well_viable . " AS 'lbl_azp_ibn_vehicle_t_well_viable',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_located . " AS 'lbl_azp_ibn_vehicle_t_st_located',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_returnable . " AS 'lbl_azp_ibn_vehicle_t_st_returnable',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_receipt . " AS 'lbl_azp_ibn_vehicle_t_st_receipt',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_date . " AS 'lbl_azp_ibn_vehicle_t_st_date',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_value . " AS 'lbl_azp_ibn_vehicle_t_st_value',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " AS 'lbl_azp_ibn_vehicle_t_zmunicipality',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_vehicle_v_id_azp_ibn_control_panel',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_observation . " AS 'lbl_azp_ibn_vehicle_v_id_azp_ibn_observation',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_vehicle_v_id_azp_ibn_state',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_type_concept . " AS 'lbl_azp_ibn_vehicle_v_id_azp_ibn_type_concept',

						tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
						
						tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
						tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
					FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
						ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
						ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
							= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
						ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
							= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_vehicle . " tc_azp_ibn_vehicle
						ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
							= tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
						ON tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_acount . "
							= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
					-- ------------------------------------------------------------------------
					WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '11'
						AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
						AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
						AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
						AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
						AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_bcount . " = '1'
						" . $var_qy_result . " " . $var_qy_sub_coverage . "
					-- ------------------------------------------------------------------------ 
					GROUP BY tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . " ASC,
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_identification . " ASC,
						tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_acount . " ASC
					-- ------------------------------------------------------------------------ 
					ORDER BY tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_consecutive . " ASC
				");
			} else if ($var_nam_service == 'SALARIOS') {
				return $this->db->query("
					SELECT
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

						tc_azp_ibn_furniture." . d_azp_ibn_furniture_id_azp_ibn_furniture . " AS 'lbl_azp_ibn_furniture_id_azp_ibn_furniture',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_by_created . " AS 'lbl_azp_ibn_furniture_m_by_created',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_by_modified . " AS 'lbl_azp_ibn_furniture_m_by_modified',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_date_created . " AS 'lbl_azp_ibn_furniture_m_date_created',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_date_modified . " AS 'lbl_azp_ibn_furniture_m_date_modified',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_deleted . " AS 'lbl_azp_ibn_furniture_m_deleted',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_description . " AS 'lbl_azp_ibn_furniture_m_description',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_level . " AS 'lbl_azp_ibn_furniture_m_level',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_status . " AS 'lbl_azp_ibn_furniture_m_status',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_temp . " AS 'lbl_azp_ibn_furniture_m_temp',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_validate . " AS 'lbl_azp_ibn_furniture_t_validate',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_acount . " AS 'lbl_azp_ibn_furniture_t_acount',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_bcount . " AS 'lbl_azp_ibn_furniture_t_bcount',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_address . " AS 'lbl_azp_ibn_furniture_t_address',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_business_name . " AS 'lbl_azp_ibn_furniture_t_business_name',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_city . " AS 'lbl_azp_ibn_furniture_t_city',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_comment_legal . " AS 'lbl_azp_ibn_furniture_t_comment_legal',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_concept . " AS 'lbl_azp_ibn_furniture_t_concept',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_consecutive . " AS 'lbl_azp_ibn_furniture_t_consecutive',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_department . " AS 'lbl_azp_ibn_furniture_t_department',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_entity . " AS 'lbl_azp_ibn_furniture_t_entity',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_full_name . " AS 'lbl_azp_ibn_furniture_t_full_name',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_identification . " AS 'lbl_azp_ibn_furniture_t_identification',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_limitation . " AS 'lbl_azp_ibn_furniture_t_limitation',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_municipality . " AS 'lbl_azp_ibn_furniture_t_municipality',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_nit . " AS 'lbl_azp_ibn_furniture_t_nit',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_observation . " AS 'lbl_azp_ibn_furniture_t_observation',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_phone . " AS 'lbl_azp_ibn_furniture_t_phone',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_effective . " AS 'lbl_azp_ibn_furniture_t_policy_effective',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_final . " AS 'lbl_azp_ibn_furniture_t_policy_final',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_viability . " AS 'lbl_azp_ibn_furniture_t_policy_viability',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_salary . " AS 'lbl_azp_ibn_furniture_t_salary',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_viable_causal . " AS 'lbl_azp_ibn_furniture_t_viable_causal',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_well_option . " AS 'lbl_azp_ibn_furniture_t_well_option',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_well_viable . " AS 'lbl_azp_ibn_furniture_t_well_viable',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " AS 'lbl_azp_ibn_furniture_t_zmunicipality',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_control_panel',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_outcome . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_outcome',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_rank . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_rank',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_regime . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_regime',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_state',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_type_affiliate . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_type_affiliate',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_type_concept . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_type_concept',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_type_contributor . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_type_contributor',

						tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
						
						tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
						tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
					FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
						ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
						ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
							= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
						ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
							= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_furniture . " tc_azp_ibn_furniture
						ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
							= tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
						ON tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_acount . "
							= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
					-- ------------------------------------------------------------------------
					WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '12'
						AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
						AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
						AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
						AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
						AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_bcount . " = '1'
						" . $var_qy_result . " " . $var_qy_sub_coverage . "
					-- ------------------------------------------------------------------------ 
					GROUP BY tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . " ASC,
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_identification . " ASC,
						tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_acount . " ASC
					-- ------------------------------------------------------------------------ 
					ORDER BY tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_consecutive . " ASC
				");
			} else if ($var_nam_service == 'GARANTIAS') {
				return $this->db->query("
					SELECT
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
						tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

						tc_azp_ibn_warranty." . d_azp_ibn_warranty_id_azp_ibn_warranty . " AS 'lbl_azp_ibn_warranty_id_azp_ibn_warranty',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_by_created . " AS 'lbl_azp_ibn_warranty_m_by_created',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_by_modified . " AS 'lbl_azp_ibn_warranty_m_by_modified',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_date_created . " AS 'lbl_azp_ibn_warranty_m_date_created',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_date_modified . " AS 'lbl_azp_ibn_warranty_m_date_modified',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_deleted . " AS 'lbl_azp_ibn_warranty_m_deleted',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_description . " AS 'lbl_azp_ibn_warranty_m_description',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_level . " AS 'lbl_azp_ibn_warranty_m_level',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_status . " AS 'lbl_azp_ibn_warranty_m_status',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_temp . " AS 'lbl_azp_ibn_warranty_m_temp',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_validate . " AS 'lbl_azp_ibn_warranty_t_validate',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_acount . " AS 'lbl_azp_ibn_warranty_t_acount',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_bcount . " AS 'lbl_azp_ibn_warranty_t_bcount',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_comment_legal . " AS 'lbl_azp_ibn_warranty_t_comment_legal',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_concept . " AS 'lbl_azp_ibn_warranty_t_concept',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_consecutive . " AS 'lbl_azp_ibn_warranty_t_consecutive',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_creditor . " AS 'lbl_azp_ibn_warranty_t_creditor',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_date . " AS 'lbl_azp_ibn_warranty_t_date',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_full_name . " AS 'lbl_azp_ibn_warranty_t_full_name',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_identification . " AS 'lbl_azp_ibn_warranty_t_identification',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_limitation . " AS 'lbl_azp_ibn_warranty_t_limitation',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_observation . " AS 'lbl_azp_ibn_warranty_t_observation',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_effective . " AS 'lbl_azp_ibn_warranty_t_policy_effective',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_final . " AS 'lbl_azp_ibn_warranty_t_policy_final',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_viability . " AS 'lbl_azp_ibn_warranty_t_policy_viability',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_well_detail . " AS 'lbl_azp_ibn_warranty_t_well_detail',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_well_name . " AS 'lbl_azp_ibn_warranty_t_well_name',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_value . " AS 'lbl_azp_ibn_warranty_t_value',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " AS 'lbl_azp_ibn_warranty_t_zmunicipality',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_warranty_v_id_azp_ibn_control_panel',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_warranty_v_id_azp_ibn_state',

						tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
						tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
						
						tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
						tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
						tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
					FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
						ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
							= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
						ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
							= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
						ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
							= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_warranty . " tc_azp_ibn_warranty
						ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
							= tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . "
					-- ------------------------------------------------------------------------
					INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
						ON tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_acount . "
							= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
					-- ------------------------------------------------------------------------
					WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
						AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '13'
						AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
						AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
						AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
							AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
						AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
						AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_bcount . " = '1'
						" . $var_qy_result . " " . $var_qy_sub_coverage . "
					-- ------------------------------------------------------------------------ 
					GROUP BY tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . " ASC,
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_identification . " ASC,
						tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_acount . " ASC
					-- ------------------------------------------------------------------------ 
					ORDER BY tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_consecutive . " ASC
				");
			}
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_vision_model_value() {
			# Seleccionar los registros de la tabla
			return $this->db->select('*', t_azp_fct_prefacture,
				d_azp_fct_prefacture_id_azp_fct_prefacture . " = '" . $this->id . "'
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_checkin() {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_invoice." . d_azp_fct_invoice_id_azp_fct_invoice . " AS 'lbl_azp_fct_invoice_id_azp_fct_invoice',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_invoice." . d_azp_fct_invoice_m_date_created . " AS 'lbl_azp_fct_invoice_m_date_created',
					tc_azp_fct_invoice." . d_azp_fct_invoice_m_date_modified . " AS 'lbl_azp_fct_invoice_m_date_modified',
					tc_azp_fct_invoice." . d_azp_fct_invoice_m_description . " AS 'lbl_azp_fct_invoice_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_certificate . " AS 'lbl_azp_fct_invoice_t_certificate',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_date_request . " AS 'lbl_azp_fct_invoice_t_date_request',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_honorary . " AS 'lbl_azp_fct_invoice_t_honorary',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_number . " AS 'lbl_azp_fct_invoice_t_number',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_purchase . " AS 'lbl_azp_fct_invoice_t_purchase',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_repayment . " AS 'lbl_azp_fct_invoice_t_repayment',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_request . " AS 'lbl_azp_fct_invoice_t_request',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
					tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
					tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
					tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
					tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
					tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name',

					COUNT(tc_azp_fct_invoice." . d_azp_fct_invoice_id_azp_fct_invoice . ") AS 'lbl_azp_fct_invoice_t_count'
				FROM " . t_azp_fct_invoice . " tc_azp_fct_invoice
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_invoice." . d_azp_fct_invoice_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_invoice." . d_azp_fct_invoice_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_invoice." . d_azp_fct_invoice_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_invoice." . d_azp_fct_invoice_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_invoice." . d_azp_fct_invoice_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
					= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
						= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
						= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
						= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_invoice." . d_azp_fct_invoice_m_deleted . " = '1'
					AND tc_azp_fct_invoice." . d_azp_fct_invoice_t_state . " = 'Facturado'
				GROUP BY tc_azp_fct_invoice." . d_azp_fct_invoice_t_number . " ASC
				ORDER BY tc_azp_fct_invoice." . d_azp_fct_invoice_id_azp_fct_invoice . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_turnover() {
			// Control de informacion en las variables
			if (isset($_GET['field_number'])) { $var_number = $_GET['field_number']; } else { $var_number = ''; }
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_invoice." . d_azp_fct_invoice_id_azp_fct_invoice . " AS 'lbl_azp_fct_invoice_id_azp_fct_invoice',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_invoice." . d_azp_fct_invoice_m_date_created . " AS 'lbl_azp_fct_invoice_m_date_created',
					tc_azp_fct_invoice." . d_azp_fct_invoice_m_date_modified . " AS 'lbl_azp_fct_invoice_m_date_modified',
					tc_azp_fct_invoice." . d_azp_fct_invoice_m_description . " AS 'lbl_azp_fct_invoice_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_invoice." . d_azp_fct_invoice_s_iva . " AS 'lbl_azp_fct_invoice_s_iva',
					tc_azp_fct_invoice." . d_azp_fct_invoice_s_value . " AS 'lbl_azp_fct_invoice_s_value',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_certificate . " AS 'lbl_azp_fct_invoice_t_certificate',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_date_request . " AS 'lbl_azp_fct_invoice_t_date_request',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_honorary . " AS 'lbl_azp_fct_invoice_t_honorary',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_number . " AS 'lbl_azp_fct_invoice_t_number',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_purchase . " AS 'lbl_azp_fct_invoice_t_purchase',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_repayment . " AS 'lbl_azp_fct_invoice_t_repayment',
					tc_azp_fct_invoice." . d_azp_fct_invoice_t_request . " AS 'lbl_azp_fct_invoice_t_request',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
					tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
					tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
					tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
					tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
					tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
				FROM " . t_azp_fct_invoice . " tc_azp_fct_invoice
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_invoice." . d_azp_fct_invoice_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_invoice." . d_azp_fct_invoice_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_invoice." . d_azp_fct_invoice_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_invoice." . d_azp_fct_invoice_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_invoice." . d_azp_fct_invoice_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
					= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
						= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
						= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
						= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_invoice." . d_azp_fct_invoice_m_deleted . " = '1'
					AND tc_azp_fct_invoice." . d_azp_fct_invoice_t_state . " = 'Facturado'
					AND tc_azp_fct_invoice." . d_azp_fct_invoice_t_number . " = '" . $var_number . "'
				ORDER BY tc_azp_fct_invoice." . d_azp_fct_invoice_id_azp_fct_invoice . " ASC
			");
		}
		
		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_alert_client() {
			if (isset($_GET['field_check'])) { $var_id = $_GET['field_check']; } else { $var_id = 0; }
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT COUNT(lbl_result) AS 'lbl_count' FROM (
					SELECT COUNT(*) AS 'lbl_result', tc_azp_fct_client." . d_azp_fct_client_t_name . "
					FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
					INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
						ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . "
							= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
					WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
						AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " IN (" . $var_id . ")
					GROUP BY tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " ASC
				) AS lbl_from;
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_controller_consolidated(string $var_id) {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " AS 'lbl_azp_fct_prefacture_id_azp_fct_prefacture',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_created . " AS 'lbl_azp_fct_prefacture_m_date_created',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_date_modified . " AS 'lbl_azp_fct_prefacture_m_date_modified',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_description . " AS 'lbl_azp_fct_prefacture_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_certificate . " AS 'lbl_azp_fct_prefacture_t_certificate',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_request . " AS 'lbl_azp_fct_prefacture_t_date_request',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_date_send . " AS 'lbl_azp_fct_prefacture_t_date_send',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_honorary . " AS 'lbl_azp_fct_prefacture_t_honorary',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_number . " AS 'lbl_azp_fct_prefacture_t_number',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_purchase . " AS 'lbl_azp_fct_prefacture_t_purchase',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_repayment . " AS 'lbl_azp_fct_prefacture_t_repayment',
					tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " AS 'lbl_azp_fct_prefacture_t_request',
					tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
					tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
					tc_azp_fct_coverage." . d_azp_fct_coverage_t_name . " AS 'lbl_azp_fct_coverage_t_name',
					tc_azp_fct_investigation." . d_azp_fct_investigation_t_name . " AS 'lbl_azp_fct_investigation_t_name',
					tc_azp_fct_result." . d_azp_fct_result_t_name . " AS 'lbl_azp_fct_result_t_name',
					tc_azp_fct_scale." . d_azp_fct_scale_t_name . " AS 'lbl_azp_fct_scale_t_name',
					tc_azp_fct_service." . d_azp_fct_service_t_name . " AS 'lbl_azp_fct_service_t_name',
					tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_azp_fct_sub_coverage_t_name',
					tc_azp_fct_sub_service." . d_azp_fct_sub_service_t_name . " AS 'lbl_azp_fct_sub_service_t_name'
				FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
					ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
						= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_coverage . " tc_azp_fct_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . "
					= tc_azp_fct_coverage." . d_azp_fct_coverage_id_azp_fct_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
						= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
						= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_result . " tc_azp_fct_result
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_result . "
						= tc_azp_fct_result." . d_azp_fct_result_id_azp_fct_result . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_scale . " tc_azp_fct_scale
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_scale . "
						= tc_azp_fct_scale." . d_azp_fct_scale_id_azp_fct_scale . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_service . " tc_azp_fct_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . "
						= tc_azp_fct_service." . d_azp_fct_service_id_azp_fct_service . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
						= tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_fct_sub_service . " tc_azp_fct_sub_service
					ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . "
						= tc_azp_fct_sub_service." . d_azp_fct_sub_service_id_azp_fct_sub_service . "
				-- ---------------------------------------------------------------
				WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_deleted . " = '1'
					AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " IN (" . $var_id . ")
				ORDER BY tc_azp_fct_prefacture." . d_azp_fct_prefacture_id_azp_fct_prefacture . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_consolidated_certificate(string $var_id) {
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_certificate . " WHERE " . d_azp_fct_certificate_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
			#-------------------------------------------------------------------------#
			# Defincion de valores a nuevas variables
			$var_client = ''; $var_certificate = ''; $var_date_request = ''; $var_date_send = ''; $var_request = ''; $var_tariff = '';
			$var_coverage = ''; $var_investigation = ''; $var_result = ''; $var_scale = ''; $var_service = ''; $var_sub_coverage = ''; $var_sub_service = '';
			$var_ct_3 = ''; $var_ct_4 = ''; $var_ct_5 = ''; $var_ct_6 = ''; $var_ct_7 = ''; $var_ct_8 = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_v_id_azp_fct_service . " = '1' AND " . d_azp_fct_prefacture_id_azp_fct_prefacture . " IN (" . $var_id . ")");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_date_send = $value[d_azp_fct_prefacture_t_date_send];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_client = $value[d_azp_fct_tariff_v_id_azp_fct_client];
							$var_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_coverage];
							$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
							$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
							$var_scale = $value[d_azp_fct_tariff_v_id_azp_fct_scale];
							$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
							$var_sub_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_sub_coverage];
							$var_sub_service = $value[d_azp_fct_tariff_v_id_azp_fct_sub_service];
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_coverage, d_azp_fct_coverage_id_azp_fct_coverage . " = '" . $var_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_coverage = $value[d_azp_fct_coverage_t_name]; endforeach; } else { $var_id_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_investigation, d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_investigation = $value[d_azp_fct_investigation_t_name]; endforeach; } else { $var_id_investigation = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_result, d_azp_fct_result_id_azp_fct_result . " = '" . $var_result . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_result = $value[d_azp_fct_result_t_name]; endforeach; } else { $var_id_result = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_scale, d_azp_fct_scale_id_azp_fct_scale . " = '" . $var_scale . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_scale = $value[d_azp_fct_scale_t_name]; endforeach; } else { $var_id_scale = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_service, d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_service = $value[d_azp_fct_service_t_name]; endforeach; } else { $var_id_service = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '" . $var_sub_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_coverage = $value[d_azp_fct_sub_coverage_t_name]; endforeach; } else { $var_id_sub_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_service = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_id_sub_service = ''; }
							#-------------------------------------------------------------------------#
							if ($var_id_sub_coverage == 'NO APLICA') {
								$var_qy_sub_coverage = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " = '" . $var_id_coverage . "'";
							} else if ($var_id_sub_coverage == 'TODO') {
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_3 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_3 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '4'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_4 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_4 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '5'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_5 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_5 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '6'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_6 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_6 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '7'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_7 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_7 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '8'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_8 = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_8 = ''; }
								#-------------------------------------------------------------------------#
								$var_qy_sub_coverage = "AND (tc_azp_crt_city." . d_azp_crt_city_t_name . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
							} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
								$var_qy_sub_coverage = "AND tc_azp_crt_city." . d_azp_crt_city_t_name . " = '" . $var_id_sub_coverage . "'";
							}
							#-------------------------------------------------------------------------#
							# Seleccionar los registros de la tabla
							$var_sql = $this->db->query("
								SELECT 
									tc_azp_crt_request_data." . d_azp_crt_request_data_id_azp_crt_request_data . " AS 'lbl_azp_crt_request_data_id_azp_crt_request_data',
									tc_azp_crt_request_data." . d_azp_crt_request_data_s_date . " AS 'lbl_azp_crt_request_data_s_date',
									tc_azp_crt_request_data." . d_azp_crt_request_data_s_plaque . " AS 'lbl_azp_crt_request_data_s_plaque',
									tc_azp_crt_request_data." . d_azp_crt_request_data_s_validate . " AS 'lbl_azp_crt_request_data_s_validate',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_applicant_code . " AS 'lbl_azp_crt_request_data_t_applicant_code',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_applicant_entity . " AS 'lbl_azp_crt_request_data_t_applicant_entity',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_bilable . " AS 'lbl_azp_crt_request_data_t_bilable',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_certificate_type . " AS 'lbl_azp_crt_request_data_t_certificate_type',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_city . " AS 'lbl_azp_crt_request_data_t_city',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_client_code . " AS 'lbl_azp_crt_request_data_t_client_code',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_client_name . " AS 'lbl_azp_crt_request_data_t_client_name',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_date_image . " AS 'lbl_azp_crt_request_data_t_crt_date_image',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_date_load . " AS 'lbl_azp_crt_request_data_t_crt_date_load',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_document . " AS 'lbl_azp_crt_request_data_t_crt_document',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_error . " AS 'lbl_azp_crt_request_data_t_crt_error',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_mark_image . " AS 'lbl_azp_crt_request_data_t_crt_mark_image',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_name . " AS 'lbl_azp_crt_request_data_t_crt_name',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_route . " AS 'lbl_azp_crt_request_data_t_crt_route',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_size . " AS 'lbl_azp_crt_request_data_t_crt_size',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_tmp_name . " AS 'lbl_azp_crt_request_data_t_crt_tmp_name',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_crt_type . " AS 'lbl_azp_crt_request_data_t_crt_type',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " AS 'lbl_azp_crt_request_data_t_date_delivery',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_entity_dispatcher . " AS 'lbl_azp_crt_request_data_t_entity_dispatcher',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_full_name . " AS 'lbl_azp_crt_request_data_t_full_name',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_identification . " AS 'lbl_azp_crt_request_data_t_identification',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_nro_oblitation . " AS 'lbl_azp_crt_request_data_t_nro_oblitation',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_observation . " AS 'lbl_azp_crt_request_data_t_observation',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_plaque_enrollment . " AS 'lbl_azp_crt_request_data_t_plaque_enrollment',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_process . " AS 'lbl_azp_crt_request_data_t_process',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_provider_class . " AS 'lbl_azp_crt_request_data_t_provider_class',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_provider_name . " AS 'lbl_azp_crt_request_data_t_provider_name',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_amount . " AS 'lbl_azp_crt_request_data_t_rcb_amount',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_date_load . " AS 'lbl_azp_crt_request_data_t_rcb_date_load',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_document . " AS 'lbl_azp_crt_request_data_t_rcb_document',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_error . " AS 'lbl_azp_crt_request_data_t_rcb_error',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_name . " AS 'lbl_azp_crt_request_data_t_rcb_name',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_nro_receipt . " AS 'lbl_azp_crt_request_data_t_rcb_nro_receipt',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_receipt . " AS 'lbl_azp_crt_request_data_t_rcb_receipt',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_route . " AS 'lbl_azp_crt_request_data_t_rcb_route',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_service . " AS 'lbl_azp_crt_request_data_t_rcb_service',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_size . " AS 'lbl_azp_crt_request_data_t_rcb_size',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_tmp_name . " AS 'lbl_azp_crt_request_data_t_rcb_tmp_name',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_rcb_type . " AS 'lbl_azp_crt_request_data_t_rcb_type',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_refundable . " AS 'lbl_azp_crt_request_data_t_refundable',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_date . " AS 'lbl_azp_crt_request_data_t_request_date',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_id . " AS 'lbl_azp_crt_request_data_t_request_id',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " AS 'lbl_azp_crt_request_data_t_request_nro',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_send_city . " AS 'lbl_azp_crt_request_data_t_send_city',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_supplier_date_delivery . " AS 'lbl_azp_crt_request_data_t_supplier_date_delivery',
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_supplier_date_request . " AS 'lbl_azp_crt_request_data_t_supplier_date_request',
									tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_city . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_city',
									tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_client . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_client',
									tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_expiration . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_expiration',
									tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_observation_type . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_observation_type',
									tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_phase . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_phase',
									tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_request_type . " AS 'lbl_azp_crt_request_data_v_id_azp_crt_request_type',

									tc_azp_crt_bank." . d_azp_crt_bank_t_name . " AS 'lbl_azp_crt_bank_t_name',
									tc_azp_crt_city." . d_azp_crt_city_t_name . " AS 'lbl_azp_crt_city_t_name',
									tc_azp_crt_client." . d_azp_crt_client_t_code . " AS 'lbl_azp_crt_client_t_code',
									tc_azp_crt_expiration." . d_azp_crt_expiration_t_name . " AS 'lbl_azp_crt_expiration_t_name',
									tc_azp_crt_observation_type." . d_azp_crt_observation_type_t_name . " AS 'lbl_azp_crt_observation_type_t_name',
									tc_azp_crt_phase." . d_azp_crt_phase_t_name . " AS 'lbl_azp_crt_phase_t_name',
									tc_azp_crt_request_type." . d_azp_crt_request_type_t_name . " AS 'lbl_azp_crt_request_type_t_name',

									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'

								FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
								-- ------------------------------------------------------------------------ 
								INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
									ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
										= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
								-- ------------------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
								    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
									= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ------------------------------------------------------------------------ 
								INNER JOIN " . t_azp_crt_bank . " tc_azp_crt_bank
									ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
										= tc_azp_crt_bank." . d_azp_crt_bank_v_id_azp_fct_client . "
								-- ------------------------------------------------------------------------ 
								INNER JOIN " . t_azp_crt_client . " tc_azp_crt_client
									ON tc_azp_crt_bank." . d_azp_crt_bank_id_azp_crt_bank . "
										= tc_azp_crt_client." . d_azp_crt_client_v_id_azp_crt_bank . "
								-- ------------------------------------------------------------------------ 
								INNER JOIN " . t_azp_crt_request_data . " tc_azp_crt_request_data
									ON tc_azp_crt_client." . d_azp_crt_client_id_azp_crt_client . "
										= tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_client . "
								-- ------------------------------------------------------------------------ 
								INNER JOIN " . t_azp_crt_city . " tc_azp_crt_city
									ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_city . "
										= tc_azp_crt_city." . d_azp_crt_city_id_azp_crt_city . "
								-- ------------------------------------------------------------------------ 
								INNER JOIN " . t_azp_crt_expiration . " tc_azp_crt_expiration
									ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_expiration . "
										= tc_azp_crt_expiration." . d_azp_crt_expiration_id_azp_crt_expiration . "
								-- ------------------------------------------------------------------------ 
								INNER JOIN " . t_azp_crt_observation_type . " tc_azp_crt_observation_type
									ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_observation_type . "
										= tc_azp_crt_observation_type." . d_azp_crt_observation_type_id_azp_crt_observation_type . "
								-- ------------------------------------------------------------------------ 
								INNER JOIN " . t_azp_crt_phase . " tc_azp_crt_phase
									ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_phase . "
										= tc_azp_crt_phase." . d_azp_crt_phase_id_azp_crt_phase . "
								-- ------------------------------------------------------------------------ 
								INNER JOIN " . t_azp_crt_request_type . " tc_azp_crt_request_type
									ON tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_request_type . "
										= tc_azp_crt_request_type." . d_azp_crt_request_type_id_azp_crt_request_type . "
								-- ------------------------------------------------------------------------ 
								WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
									AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '1' " . $var_qy_sub_coverage . "
									AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
									AND tc_azp_crt_request_data." . d_azp_crt_request_data_m_deleted . " = '1'
									AND (tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " >= '" . $var_date_send . "'
										AND tc_azp_crt_request_data." . d_azp_crt_request_data_t_date_delivery . " <= '" . $var_date_send . "')
									AND tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_date . " = '" . $var_date_request . "'
									AND tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " = '" . $var_request . "'
									AND tc_azp_crt_request_type." . d_azp_crt_request_type_t_name . " = '" . $var_certificate . "'
									AND tc_azp_crt_request_data." . d_azp_crt_request_data_v_id_azp_crt_phase . " = '4'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'
								-- ------------------------------------------------------------------------ 
								GROUP BY tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " ASC,
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_identification . " ASC,
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_plaque_enrollment . " ASC
								-- ------------------------------------------------------------------------ 
								ORDER BY tc_azp_crt_request_data." . d_azp_crt_request_data_t_request_nro . " ASC,
									tc_azp_crt_request_data." . d_azp_crt_request_data_t_identification . " ASC
							");
							#-------------------------------------------------------------------------#
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								foreach ($var_sql as $key => $value):
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(
										d_azp_fct_certificate_m_by_created => $_SESSION[SESS_APP_ID],
										d_azp_fct_certificate_m_by_modified => $_SESSION[SESS_APP_ID],
										d_azp_fct_certificate_m_date_created => DATE_HOUR,
										d_azp_fct_certificate_m_date_modified => DATE_HOUR,
										d_azp_fct_certificate_m_deleted => '1',
										d_azp_fct_certificate_m_description => '',
										d_azp_fct_certificate_m_level => '2',
										d_azp_fct_certificate_m_status => '1',
										d_azp_fct_certificate_m_temp => '1',
										d_azp_fct_certificate_t_applicant_code => $value['lbl_azp_crt_request_data_t_applicant_entity'],
										d_azp_fct_certificate_t_bilable => $value['lbl_azp_crt_request_data_t_bilable'],
										d_azp_fct_certificate_t_city => $value['lbl_azp_crt_city_t_name'],
										d_azp_fct_certificate_t_client => $value['lbl_azp_crt_bank_t_name'],
										d_azp_fct_certificate_t_date_send => $value['lbl_azp_crt_request_data_t_date_delivery'],
										d_azp_fct_certificate_t_full_name => $value['lbl_azp_crt_request_data_t_full_name'],
										d_azp_fct_certificate_t_identification => $value['lbl_azp_crt_request_data_t_identification'],
										d_azp_fct_certificate_t_obligation => $value['lbl_azp_crt_request_data_t_nro_oblitation'],
										d_azp_fct_certificate_t_plaque_enrollment => $value['lbl_azp_crt_request_data_t_plaque_enrollment'],
										d_azp_fct_certificate_t_provider_name => $value['lbl_azp_crt_request_data_t_provider_name'],
										d_azp_fct_certificate_t_rcb_amount => $value['lbl_azp_crt_request_data_t_rcb_amount'],
										d_azp_fct_certificate_t_rcb_nro_receipt => $value['lbl_azp_crt_request_data_t_rcb_nro_receipt'],
										d_azp_fct_certificate_t_request_date => $value['lbl_azp_crt_request_data_t_request_date'],
										d_azp_fct_certificate_t_request_id => $value['lbl_azp_crt_request_data_t_request_id'],
										d_azp_fct_certificate_t_request_nro => $value['lbl_azp_crt_request_data_t_request_nro'],
										d_azp_fct_certificate_t_request_type => $value['lbl_azp_crt_request_type_t_name'],
										d_azp_fct_certificate_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
										d_azp_fct_certificate_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
										d_azp_fct_certificate_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
									);
									# Query Sql Insert: Registrar valores en la tabla segun sus campos
									$this->db->insert(t_azp_fct_certificate, $var_array);
								endforeach;
							}
						endforeach;
					}
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_certificate." . d_azp_fct_certificate_id_azp_fct_certificate . " AS 'lbl_azp_fct_certificate_id_azp_fct_certificate',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_certificate." . d_azp_fct_certificate_m_date_created . " AS 'lbl_azp_fct_certificate_m_date_created',
					tc_azp_fct_certificate." . d_azp_fct_certificate_m_date_modified . " AS 'lbl_azp_fct_certificate_m_date_modified',
					tc_azp_fct_certificate." . d_azp_fct_certificate_m_description . " AS 'lbl_azp_fct_certificate_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_applicant_code . " AS 'lbl_azp_fct_certificate_t_applicant_code',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_bilable . " AS 'lbl_azp_fct_certificate_t_bilable',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_city . " AS 'lbl_azp_fct_certificate_t_city',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_client . " AS 'lbl_azp_fct_certificate_t_client',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_date_send . " AS 'lbl_azp_fct_certificate_t_date_send',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_full_name . " AS 'lbl_azp_fct_certificate_t_full_name',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_identification . " AS 'lbl_azp_fct_certificate_t_identification',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_obligation . " AS 'lbl_azp_fct_certificate_t_obligation',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_plaque_enrollment . " AS 'lbl_azp_fct_certificate_t_plaque_enrollment',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_provider_name . " AS 'lbl_azp_fct_certificate_t_provider_name',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_rcb_amount . " AS 'lbl_azp_fct_certificate_t_rcb_amount',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_rcb_nro_receipt . " AS 'lbl_azp_fct_certificate_t_rcb_nro_receipt',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_request_date . " AS 'lbl_azp_fct_certificate_t_request_date',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_request_id . " AS 'lbl_azp_fct_certificate_t_request_id',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_request_nro . " AS 'lbl_azp_fct_certificate_t_request_nro',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_request_type . " AS 'lbl_azp_fct_certificate_t_request_type',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_tariff_value . " AS 'lbl_azp_fct_certificate_t_tariff_value',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_tariff_iva . " AS 'lbl_azp_fct_certificate_t_tariff_iva',
					tc_azp_fct_certificate." . d_azp_fct_certificate_t_tariff_total . " AS 'lbl_azp_fct_certificate_t_tariff_total'
				FROM " . t_azp_fct_certificate . " tc_azp_fct_certificate
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_certificate." . d_azp_fct_certificate_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_certificate." . d_azp_fct_certificate_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_certificate." . d_azp_fct_certificate_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_certificate." . d_azp_fct_certificate_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------					
				WHERE tc_azp_fct_certificate." . d_azp_fct_certificate_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_consolidated_defunction(string $var_id) {
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_defunction . " WHERE " . d_azp_fct_defunction_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
			#-------------------------------------------------------------------------#
			# Defincion de valores a nuevas variables
			$var_client = ''; $var_certificate = ''; $var_date_request = ''; $var_date_send = ''; $var_request = ''; $var_tariff = '';
			$var_coverage = ''; $var_investigation = ''; $var_result = ''; $var_scale = ''; $var_service = ''; $var_sub_coverage = ''; $var_sub_service = '';
			$var_ct_3 = ''; $var_ct_4 = ''; $var_ct_5 = ''; $var_ct_6 = ''; $var_ct_7 = ''; $var_ct_8 = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_v_id_azp_fct_service . " = '2' AND " . d_azp_fct_prefacture_id_azp_fct_prefacture . " IN (" . $var_id . ")");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_date_send = $value[d_azp_fct_prefacture_t_date_send];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_client = $value[d_azp_fct_tariff_v_id_azp_fct_client];
							$var_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_coverage];
							$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
							$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
							$var_scale = $value[d_azp_fct_tariff_v_id_azp_fct_scale];
							$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
							$var_sub_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_sub_coverage];
							$var_sub_service = $value[d_azp_fct_tariff_v_id_azp_fct_sub_service];
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_coverage, d_azp_fct_coverage_id_azp_fct_coverage . " = '" . $var_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_coverage = $value[d_azp_fct_coverage_t_name]; endforeach; } else { $var_id_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_investigation, d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_investigation = $value[d_azp_fct_investigation_t_name]; endforeach; } else { $var_id_investigation = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_result, d_azp_fct_result_id_azp_fct_result . " = '" . $var_result . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_result = $value[d_azp_fct_result_t_name]; endforeach; } else { $var_id_result = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_scale, d_azp_fct_scale_id_azp_fct_scale . " = '" . $var_scale . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_scale = $value[d_azp_fct_scale_t_name]; endforeach; } else { $var_id_scale = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_service, d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_service = $value[d_azp_fct_service_t_name]; endforeach; } else { $var_id_service = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '" . $var_sub_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_coverage = $value[d_azp_fct_sub_coverage_t_name]; endforeach; } else { $var_id_sub_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_service = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_id_sub_service = ''; }
							#-------------------------------------------------------------------------#
							/*if ($var_id_sub_coverage == 'NO APLICA') {
								$var_qy_sub_coverage = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " = '" . $var_id_coverage . "'";
							} else if ($var_id_sub_coverage == 'TODO') {
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_3 = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_3 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '4'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_4 = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_4 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '5'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_5 = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_5 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '6'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_6 = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_6 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '7'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_7 = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_7 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '8'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_8 = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_8 = ''; }
								#-------------------------------------------------------------------------#
								$var_qy_sub_coverage = "AND (tc_azp_gsc_request." . d_azp_gsc_request_t_city . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
							} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
								$var_qy_sub_coverage = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " = '" . $var_id_sub_coverage . "'";
							}*/
							if ($var_id_sub_coverage == 'NO APLICA') {
								$var_qy_sub_coverage = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " = '" . $var_id_coverage . "'";
							} else if ($var_id_sub_coverage == 'TODO') {
								$var_qy_sub_coverage = "";
							} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
								$var_qy_sub_coverage = "AND tc_azp_gsc_request." . d_azp_gsc_request_t_city . " = '" . $var_id_sub_coverage . "'";
							}
							#-------------------------------------------------------------------------#
							# Seleccionar los registros de la tabla
							$var_sql = $this->db->query("
								SELECT
									tc_azp_gsc_request." . d_azp_gsc_request_id_azp_gsc_request . " AS 'lbl_azp_gsc_request_id_azp_gsc_request',
									tc_azp_gsc_request." . d_azp_gsc_request_s_capture . " AS 'lbl_azp_gsc_request_s_capture',
									tc_azp_gsc_request." . d_azp_gsc_request_s_client . " AS 'lbl_azp_gsc_request_s_client',
									tc_azp_gsc_request." . d_azp_gsc_request_s_code . " AS 'lbl_azp_gsc_request_s_code',
									tc_azp_gsc_request." . d_azp_gsc_request_s_data . " AS 'lbl_azp_gsc_request_s_data',
									tc_azp_gsc_request." . d_azp_gsc_request_s_date . " AS 'lbl_azp_gsc_request_s_date',
									tc_azp_gsc_request." . d_azp_gsc_request_s_duplicate . " AS 'lbl_azp_gsc_request_s_duplicate',
									tc_azp_gsc_request." . d_azp_gsc_request_s_existing . " AS 'lbl_azp_gsc_request_s_existing',
									tc_azp_gsc_request." . d_azp_gsc_request_s_validate . " AS 'lbl_azp_gsc_request_s_validate',
									tc_azp_gsc_request." . d_azp_gsc_request_s_web_service . " AS 'lbl_azp_gsc_request_s_web_service',
									tc_azp_gsc_request." . d_azp_gsc_request_t_city . " AS 'lbl_azp_gsc_request_t_city',
									tc_azp_gsc_request." . d_azp_gsc_request_t_date_associate . " AS 'lbl_azp_gsc_request_t_date_associate',
									tc_azp_gsc_request." . d_azp_gsc_request_t_death_date . " AS 'lbl_azp_gsc_request_t_death_date',
									tc_azp_gsc_request." . d_azp_gsc_request_t_full_name . " AS 'lbl_azp_gsc_request_t_full_name',
									tc_azp_gsc_request." . d_azp_gsc_request_t_id_supplier . " AS 'lbl_azp_gsc_request_t_id_supplier',
									tc_azp_gsc_request." . d_azp_gsc_request_t_identification . " AS 'lbl_azp_gsc_request_t_identification',
									tc_azp_gsc_request." . d_azp_gsc_request_t_notary . " AS 'lbl_azp_gsc_request_t_notary',
									tc_azp_gsc_request." . d_azp_gsc_request_t_number_consecutive . " AS 'lbl_azp_gsc_request_t_number_consecutive',
									tc_azp_gsc_request." . d_azp_gsc_request_t_number_obligation . " AS 'lbl_azp_gsc_request_t_number_obligation',
									tc_azp_gsc_request." . d_azp_gsc_request_t_number_request . " AS 'lbl_azp_gsc_request_t_number_request',
									tc_azp_gsc_request." . d_azp_gsc_request_t_observation . " AS 'lbl_azp_gsc_request_t_observation',
									tc_azp_gsc_request." . d_azp_gsc_request_t_observation_outer . " AS 'lbl_azp_gsc_request_t_observation_outer',
									tc_azp_gsc_request." . d_azp_gsc_request_t_reported_bank . " AS 'lbl_azp_gsc_request_t_reported_bank',
									tc_azp_gsc_request." . d_azp_gsc_request_t_request_by . " AS 'lbl_azp_gsc_request_t_request_by',
									tc_azp_gsc_request." . d_azp_gsc_request_t_request_date . " AS 'lbl_azp_gsc_request_t_request_date',
									tc_azp_gsc_request." . d_azp_gsc_request_t_request_state . " AS 'lbl_azp_gsc_request_t_request_state',
									tc_azp_gsc_request." . d_azp_gsc_request_t_serial . " AS 'lbl_azp_gsc_request_t_serial',
									tc_azp_gsc_request." . d_azp_gsc_request_t_shipping_date . " AS 'lbl_azp_gsc_request_t_shipping_date',
									tc_azp_gsc_request." . d_azp_gsc_request_t_shipping_number . " AS 'lbl_azp_gsc_request_t_shipping_number',
									tc_azp_gsc_request." . d_azp_gsc_request_t_supplier_request_date . " AS 'lbl_azp_gsc_request_t_supplier_request_date',
									tc_azp_gsc_request." . d_azp_gsc_request_t_supplier_request_number . " AS 'lbl_azp_gsc_request_t_supplier_request_number',
									tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_causal . " AS 'lbl_azp_gsc_request_v_id_azp_gsc_causal',
									tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_client . " AS 'lbl_azp_gsc_request_v_id_azp_gsc_client',
									tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_expiration . " AS 'lbl_azp_gsc_request_v_id_azp_gsc_expiration',
									tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_phase . " AS 'lbl_azp_gsc_request_v_id_azp_gsc_phase',
									tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_state . " AS 'lbl_azp_gsc_request_v_id_azp_gsc_state',

									tc_azp_gsc_causal." . d_azp_gsc_causal_t_name . " AS 'lbl_azp_gsc_causal_t_name',
									tc_azp_gsc_client." . d_azp_gsc_client_t_name . " AS 'lbl_azp_gsc_client_t_name',
									tc_azp_gsc_expiration." . d_azp_gsc_expiration_t_name . " AS 'lbl_azp_gsc_expiration_t_name',
									tc_azp_gsc_phase." . d_azp_gsc_phase_t_name . " AS 'lbl_azp_gsc_phase_t_name',
									tc_azp_gsc_state." . d_azp_gsc_state_t_name . " AS 'lbl_azp_gsc_state_t_name',

									tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
									tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
								FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
									ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
										= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_gsc_client . " tc_azp_gsc_client
									ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
										= tc_azp_gsc_client." . d_azp_gsc_client_v_id_azp_fct_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_gsc_request . " tc_azp_gsc_request
									ON tc_azp_gsc_client." . d_azp_gsc_client_id_azp_gsc_client . "
										= tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_client . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_gsc_causal . " tc_azp_gsc_causal
									ON tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_causal . "
										= tc_azp_gsc_causal." . d_azp_gsc_causal_id_azp_gsc_causal . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_gsc_expiration . " tc_azp_gsc_expiration
									ON tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_expiration . "
										= tc_azp_gsc_expiration." . d_azp_gsc_expiration_id_azp_gsc_expiration . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_gsc_phase . " tc_azp_gsc_phase
									ON tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_phase . "
										= tc_azp_gsc_phase." . d_azp_gsc_phase_id_azp_gsc_phase . "
								-- ---------------------------------------------------------------
								INNER JOIN " . t_azp_gsc_state . " tc_azp_gsc_state
									ON tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_state . "
										= tc_azp_gsc_state." . d_azp_gsc_state_id_azp_gsc_state . "
								-- ---------------------------------------------------------------
								WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
									AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '2' " . $var_qy_sub_coverage . "
									AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
									AND tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'
									AND tc_azp_gsc_request." . d_azp_gsc_request_m_deleted . " = '1'
									AND tc_azp_gsc_request." . d_azp_gsc_request_v_id_azp_gsc_phase . " = '10'
									AND tc_azp_gsc_request." . d_azp_gsc_request_t_request_date . " = '" . $var_date_request . "'
									AND tc_azp_gsc_request." . d_azp_gsc_request_t_number_request . " = '" . $var_request . "'
									AND (tc_azp_gsc_request." . d_azp_gsc_request_t_shipping_date . " >= '" . $var_date_send . "'
										AND tc_azp_gsc_request." . d_azp_gsc_request_t_shipping_date . " <= '" . $var_date_send . "')
								-- ---------------------------------------------------------------
								GROUP BY tc_azp_gsc_request." . d_azp_gsc_request_t_number_request . " ASC,
									tc_azp_gsc_request." . d_azp_gsc_request_t_identification . " ASC
								-- ---------------------------------------------------------------
								ORDER BY tc_azp_gsc_request." . d_azp_gsc_request_t_number_request . " ASC,
									tc_azp_gsc_request." . d_azp_gsc_request_t_identification . " ASC
							");
							#-------------------------------------------------------------------------#
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) {
								foreach ($var_sql as $key => $value):
									# Array para asignar argumentos o valores a los elementos
									$var_array = array(
										d_azp_fct_defunction_m_by_created => $_SESSION[SESS_APP_ID],
										d_azp_fct_defunction_m_by_modified => $_SESSION[SESS_APP_ID],
										d_azp_fct_defunction_m_date_created => DATE_HOUR,
										d_azp_fct_defunction_m_date_modified => DATE_HOUR,
										d_azp_fct_defunction_m_deleted => '1',
										d_azp_fct_defunction_m_description => '',
										d_azp_fct_defunction_m_level => '2',
										d_azp_fct_defunction_m_status => '1',
										d_azp_fct_defunction_m_temp => '1',
										d_azp_fct_defunction_t_city => $value['lbl_azp_gsc_request_t_city'],
										d_azp_fct_defunction_t_client => $value['lbl_azp_fct_client_t_name'],
										d_azp_fct_defunction_t_date_request => $value['lbl_azp_gsc_request_t_request_date'],
										d_azp_fct_defunction_t_date_send => $value['lbl_azp_gsc_request_t_shipping_date'],
										d_azp_fct_defunction_t_full_name => $value['lbl_azp_gsc_request_t_full_name'],
										d_azp_fct_defunction_t_identification => $value['lbl_azp_gsc_request_t_identification'],
										d_azp_fct_defunction_t_obligation => $value['lbl_azp_gsc_request_t_number_obligation'],
										d_azp_fct_defunction_t_notary => $value['lbl_azp_gsc_request_t_notary'],
										d_azp_fct_defunction_t_number_request => $value['lbl_azp_gsc_request_t_number_request'],
										d_azp_fct_defunction_t_serial => $value['lbl_azp_gsc_request_t_serial'],
										d_azp_fct_defunction_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
										d_azp_fct_defunction_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
										d_azp_fct_defunction_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
									);
									# Query Sql Insert: Registrar valores en la tabla segun sus campos
									$this->db->insert(t_azp_fct_defunction, $var_array);
								endforeach;
							}
						endforeach;
					}
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select("SUM(" . d_azp_fct_defunction_t_tariff_iva . ") AS 'lbl_sum_iva', SUM(" . d_azp_fct_defunction_t_tariff_total . ") AS 'lbl_sum_total'",
				t_azp_fct_defunction, d_azp_fct_defunction_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'"
			);
			# Validar si la sentencia query ejecutada es correcta y no falsa
			if (true == $var_sql) {
				# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
				foreach ($var_sql as $key => $value):
					# Array para asignar argumentos o valores a los elementos
					$var_array = array(
						d_azp_fct_defunction_m_by_created => $_SESSION[SESS_APP_ID],
						d_azp_fct_defunction_m_by_modified => $_SESSION[SESS_APP_ID],
						d_azp_fct_defunction_m_date_created => DATE_HOUR,
						d_azp_fct_defunction_m_date_modified => DATE_HOUR,
						d_azp_fct_defunction_m_deleted => '1',
						d_azp_fct_defunction_m_description => '',
						d_azp_fct_defunction_m_level => '2',
						d_azp_fct_defunction_m_status => '1',
						d_azp_fct_defunction_m_temp => '1',
						d_azp_fct_defunction_t_city => '',
						d_azp_fct_defunction_t_client => '',
						d_azp_fct_defunction_t_date_request => '',
						d_azp_fct_defunction_t_date_send => '',
						d_azp_fct_defunction_t_full_name => '',
						d_azp_fct_defunction_t_identification => '',
						d_azp_fct_defunction_t_obligation => '',
						d_azp_fct_defunction_t_notary => '',
						d_azp_fct_defunction_t_number_request => '',
						d_azp_fct_defunction_t_serial => '',
						d_azp_fct_defunction_t_tariff_iva => $value['lbl_sum_iva'],
						d_azp_fct_defunction_t_tariff_total => $value['lbl_sum_total'],
						d_azp_fct_defunction_t_tariff_value => '',
					);
					# Query Sql Insert: Registrar valores en la tabla segun sus campos
					$this->db->insert(t_azp_fct_defunction, $var_array);
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_defunction." . d_azp_fct_defunction_id_azp_fct_defunction . " AS 'lbl_azp_fct_defunction_id_azp_fct_defunction',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_defunction." . d_azp_fct_defunction_m_date_created . " AS 'lbl_azp_fct_defunction_m_date_created',
					tc_azp_fct_defunction." . d_azp_fct_defunction_m_date_modified . " AS 'lbl_azp_fct_defunction_m_date_modified',
					tc_azp_fct_defunction." . d_azp_fct_defunction_m_description . " AS 'lbl_azp_fct_defunction_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_city . " AS 'lbl_azp_fct_defunction_t_city',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_client . " AS 'lbl_azp_fct_defunction_t_client',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_date_request . " AS 'lbl_azp_fct_defunction_t_date_request',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_date_send . " AS 'lbl_azp_fct_defunction_t_date_send',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_full_name . " AS 'lbl_azp_fct_defunction_t_full_name',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_identification . " AS 'lbl_azp_fct_defunction_t_identification',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_obligation . " AS 'lbl_azp_fct_defunction_t_obligation',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_notary . " AS 'lbl_azp_fct_defunction_t_notary',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_number_request . " AS 'lbl_azp_fct_defunction_t_number_request',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_serial . " AS 'lbl_azp_fct_defunction_t_serial',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_tariff_iva . " AS 'lbl_azp_fct_defunction_t_tariff_iva',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_tariff_total . " AS 'lbl_azp_fct_defunction_t_tariff_total',
					tc_azp_fct_defunction." . d_azp_fct_defunction_t_tariff_value . " AS 'lbl_azp_fct_defunction_t_tariff_value'
				FROM " . t_azp_fct_defunction . " tc_azp_fct_defunction
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_defunction." . d_azp_fct_defunction_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_defunction." . d_azp_fct_defunction_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_defunction." . d_azp_fct_defunction_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_defunction." . d_azp_fct_defunction_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------					
				WHERE tc_azp_fct_defunction." . d_azp_fct_defunction_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
			");		
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_consolidated_investigation_del(string $var_id) {
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_research . " WHERE " . d_azp_fct_research_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_consolidated_investigation_uni(string $var_id) {
			# Verificar en la base de datos si existen el registro
			//$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_research . " WHERE " . d_azp_fct_research_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
			#-------------------------------------------------------------------------#
			# Defincion de valores a nuevas variables
			$var_client = ''; $var_certificate = ''; $var_date_request = ''; $var_date_send = ''; $var_request = ''; $var_tariff = '';
			$var_coverage = ''; $var_investigation = ''; $var_result = ''; $var_scale = ''; $var_service = ''; $var_sub_coverage = ''; $var_sub_service = '';
			$var_ct_3 = ''; $var_ct_4 = ''; $var_ct_5 = ''; $var_ct_6 = ''; $var_ct_7 = ''; $var_ct_8 = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture, d_azp_fct_prefacture_v_id_azp_fct_service . " = '3' AND " . d_azp_fct_prefacture_id_azp_fct_prefacture . " IN (" . $var_id . ")");
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_date_send = $value[d_azp_fct_prefacture_t_date_send];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_relation = $value[d_azp_fct_prefacture_v_id_azp_fct_relation];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_client = $value[d_azp_fct_tariff_v_id_azp_fct_client];
							$var_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_coverage];
							$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
							$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
							$var_scale = $value[d_azp_fct_tariff_v_id_azp_fct_scale];
							$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
							$var_sub_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_sub_coverage];
							$var_sub_service = $value[d_azp_fct_tariff_v_id_azp_fct_sub_service];
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_nam_service = $value[d_azp_fct_sub_service_t_name]; endforeach; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_coverage, d_azp_fct_coverage_id_azp_fct_coverage . " = '" . $var_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_coverage = $value[d_azp_fct_coverage_t_name]; endforeach; } else { $var_id_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_investigation, d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_investigation = $value[d_azp_fct_investigation_t_name]; endforeach; } else { $var_id_investigation = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_result, d_azp_fct_result_id_azp_fct_result . " = '" . $var_result . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_result = $value[d_azp_fct_result_t_name]; endforeach; } else { $var_id_result = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_scale, d_azp_fct_scale_id_azp_fct_scale . " = '" . $var_scale . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_scale = $value[d_azp_fct_scale_t_name]; endforeach; } else { $var_id_scale = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_service, d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_service = $value[d_azp_fct_service_t_name]; endforeach; } else { $var_id_service = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '" . $var_sub_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_coverage = $value[d_azp_fct_sub_coverage_t_name]; endforeach; } else { $var_id_sub_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_service = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_id_sub_service = ''; }
							#-------------------------------------------------------------------------#
							if ($var_id_sub_coverage == 'NO APLICA') {
								$var_qy_sub_coverage = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " = '" . $var_id_coverage . "'";
							} else if ($var_id_sub_coverage == 'TODO') {
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_3 = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_3 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '4'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_4 = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_4 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '5'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_5 = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_5 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '6'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_6 = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_6 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '7'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_7 = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_7 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '2'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '8'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) { $var_ct_8 = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != '" . $value['lbl_city'] . "'"; } } else { $var_ct_8 = ''; }
								#-------------------------------------------------------------------------#
								$var_qy_sub_coverage = "AND (tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
							} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
								$var_qy_sub_coverage = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " = '" . $var_id_sub_coverage . "'";
							}
							#-------------------------------------------------------------------------#
							# Controlo de validacion de datos de la base
							if ($var_id_investigation == 'EFECTIVIDAD') {
								# Controlo de validacion de datos de la base
								if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_effective . " = '" . $var_id_result . "'"; } else { $var_qy_result = ''; }
								# Seleccionar los registros de la tabla
								$var_sql = $this->db->query("
									SELECT
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

										tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_id_azp_ibn_evaluation . " AS 'lbl_azp_ibn_evaluation_id_azp_ibn_evaluation',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_identification . " AS 'lbl_azp_ibn_evaluation_t_identification',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_cam . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_cam',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_fur . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_fur',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_pro . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_pro',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_veh . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_veh',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_war . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_war',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_cam . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_cam',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_fur . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_fur',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_pro . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_pro',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_veh . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_veh',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_war . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_war',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_evaluation_v_id_azp_ibn_control_panel',
										
										tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
										tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
									FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
										ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
										ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
											= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
										ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
											= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_evaluation . " tc_azp_ibn_evaluation
										ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
											= tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_v_id_azp_ibn_control_panel . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
										ON tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_identification . "
											= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . "
									-- ------------------------------------------------------------------------
									WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '14'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
										AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
											AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
										AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
										AND tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " = '1'
										" . $var_qy_result . " " . $var_qy_sub_coverage . "
									-- ------------------------------------------------------------------------ 
									GROUP BY tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_v_id_azp_ibn_control_panel . " ASC,
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_identification . " ASC
									-- ------------------------------------------------------------------------ 
									ORDER BY tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " ASC
								");
								#-------------------------------------------------------------------------#
								# Verificar si el resultado de la sql es verdadero o falso
								if (true == $var_sql) {
									foreach ($var_sql as $key => $value):
										# Array para asignar argumentos o valores a los elementos
										$var_array = array(
											d_azp_fct_research_m_by_created => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_by_modified => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_date_created => DATE_HOUR,
											d_azp_fct_research_m_date_modified => DATE_HOUR,
											d_azp_fct_research_m_deleted => '1',
											d_azp_fct_research_m_description => '',
											d_azp_fct_research_m_level => '2',
											d_azp_fct_research_m_status => '1',
											d_azp_fct_research_m_temp => '1',
											d_azp_fct_research_t_client => $value['lbl_azp_fct_client_t_name'],
											d_azp_fct_research_t_code => $value['lbl_azp_ibn_data_main_t_code'],
											d_azp_fct_research_t_consecutive => $value['lbl_azp_ibn_data_main_t_consecutive'],
											d_azp_fct_research_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
											d_azp_fct_research_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
											d_azp_fct_research_t_full_name => $value['lbl_azp_ibn_data_main_t_full_name'],
											d_azp_fct_research_t_identification => $value['lbl_azp_ibn_data_main_t_identification'],
											d_azp_fct_research_t_obligation => $value['lbl_azp_ibn_data_main_t_nro_obligation'],
											d_azp_fct_research_t_municipality => $value['lbl_azp_ibn_evaluation_t_municipality'],
											d_azp_fct_research_t_policy_general => $value['lbl_azp_ibn_evaluation_t_policy_effective'],
											d_azp_fct_research_t_request_nro => $value['lbl_azp_ibn_control_panel_t_code_research'],
											d_azp_fct_research_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
											d_azp_fct_research_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
											d_azp_fct_research_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
											d_azp_fct_research_t_module => 'SIN SUB SERVICIOS',
										);
										# Query Sql Insert: Registrar valores en la tabla segun sus campos
										$this->db->insert(t_azp_fct_research, $var_array);
									endforeach;
								}
							} else if ($var_id_investigation == 'VIABILIDAD') {
								# Controlo de validacion de datos de la base
								if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_viability . " = '" . $var_id_result . "'"; } else { $var_qy_result = ''; }
								# Seleccionar los registros de la tabla
								$var_sql = $this->db->query("
									SELECT
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

										tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_id_azp_ibn_evaluation . " AS 'lbl_azp_ibn_evaluation_id_azp_ibn_evaluation',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_municipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_identification . " AS 'lbl_azp_ibn_evaluation_t_identification',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_cam . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_cam',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_fur . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_fur',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_pro . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_pro',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_veh . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_veh',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_ef_war . " AS 'lbl_azp_ibn_evaluation_t_policy_ef_war',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_cam . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_cam',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_fur . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_fur',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_pro . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_pro',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_veh . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_veh',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_vb_war . " AS 'lbl_azp_ibn_evaluation_t_policy_vb_war',
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_evaluation_v_id_azp_ibn_control_panel',
										
										tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
										tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
									FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
										ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
										ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
											= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
										ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
											= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_evaluation . " tc_azp_ibn_evaluation
										ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
											= tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_v_id_azp_ibn_control_panel . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
										ON tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_identification . "
											= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . "
									-- ------------------------------------------------------------------------
									WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '14'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
										AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
											AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
										AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
										AND tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " = '1'
										" . $var_qy_result . " " . $var_qy_sub_coverage . "
									-- ------------------------------------------------------------------------ 
									GROUP BY tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_v_id_azp_ibn_control_panel . " ASC,
										tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_identification . " ASC
									-- ------------------------------------------------------------------------ 
									ORDER BY tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " ASC
								");
								#-------------------------------------------------------------------------#
								# Verificar si el resultado de la sql es verdadero o falso
								if (true == $var_sql) {
									foreach ($var_sql as $key => $value):
										# Array para asignar argumentos o valores a los elementos
										$var_array = array(
											d_azp_fct_research_m_by_created => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_by_modified => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_date_created => DATE_HOUR,
											d_azp_fct_research_m_date_modified => DATE_HOUR,
											d_azp_fct_research_m_deleted => '1',
											d_azp_fct_research_m_description => '',
											d_azp_fct_research_m_level => '2',
											d_azp_fct_research_m_status => '1',
											d_azp_fct_research_m_temp => '1',
											d_azp_fct_research_t_client => $value['lbl_azp_fct_client_t_name'],
											d_azp_fct_research_t_code => $value['lbl_azp_ibn_data_main_t_code'],
											d_azp_fct_research_t_consecutive => $value['lbl_azp_ibn_data_main_t_consecutive'],
											d_azp_fct_research_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
											d_azp_fct_research_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
											d_azp_fct_research_t_full_name => $value['lbl_azp_ibn_data_main_t_full_name'],
											d_azp_fct_research_t_identification => $value['lbl_azp_ibn_data_main_t_identification'],
											d_azp_fct_research_t_obligation => $value['lbl_azp_ibn_data_main_t_nro_obligation'],
											d_azp_fct_research_t_municipality => $value['lbl_azp_ibn_evaluation_t_municipality'],
											d_azp_fct_research_t_policy_general => $value['lbl_azp_ibn_evaluation_t_policy_viability'],
											d_azp_fct_research_t_request_nro => $value['lbl_azp_ibn_control_panel_t_code_research'],
											d_azp_fct_research_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
											d_azp_fct_research_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
											d_azp_fct_research_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
											d_azp_fct_research_t_module => 'SIN SUB SERVICIOS',
										);
										# Query Sql Insert: Registrar valores en la tabla segun sus campos
										$this->db->insert(t_azp_fct_research, $var_array);
									endforeach;
								}
							}
						endforeach;
					}
				endforeach;
			}
			#-------------------------------------------------------------------------#
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_research." . d_azp_fct_research_id_azp_fct_research . " AS 'lbl_azp_fct_research_id_azp_fct_research',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_research." . d_azp_fct_research_m_date_created . " AS 'lbl_azp_fct_research_m_date_created',
					tc_azp_fct_research." . d_azp_fct_research_m_date_modified . " AS 'lbl_azp_fct_research_m_date_modified',
					tc_azp_fct_research." . d_azp_fct_research_m_description . " AS 'lbl_azp_fct_research_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_research." . d_azp_fct_research_t_client . " AS 'lbl_azp_fct_research_t_client',
					tc_azp_fct_research." . d_azp_fct_research_t_code . " AS 'lbl_azp_fct_research_t_code',
					tc_azp_fct_research." . d_azp_fct_research_t_consecutive . " AS 'lbl_azp_fct_research_t_consecutive',
					tc_azp_fct_research." . d_azp_fct_research_t_date_request . " AS 'lbl_azp_fct_research_t_date_request',
					tc_azp_fct_research." . d_azp_fct_research_t_date_send . " AS 'lbl_azp_fct_research_t_date_send',
					tc_azp_fct_research." . d_azp_fct_research_t_full_name . " AS 'lbl_azp_fct_research_t_full_name',
					tc_azp_fct_research." . d_azp_fct_research_t_identification . " AS 'lbl_azp_fct_research_t_identification',
					tc_azp_fct_research." . d_azp_fct_research_t_obligation . " AS 'lbl_azp_fct_research_t_obligation',
					tc_azp_fct_research." . d_azp_fct_research_t_municipality . " AS 'lbl_azp_fct_research_t_municipality',
					tc_azp_fct_research." . d_azp_fct_research_t_policy_general . " AS 'lbl_azp_fct_research_t_policy_general',
					tc_azp_fct_research." . d_azp_fct_research_t_request_nro . " AS 'lbl_azp_fct_research_t_request_nro',
					tc_azp_fct_research." . d_azp_fct_research_t_tariff_iva . " AS 'lbl_azp_fct_research_t_tariff_iva',
					tc_azp_fct_research." . d_azp_fct_research_t_tariff_total . " AS 'lbl_azp_fct_research_t_tariff_total',
					tc_azp_fct_research." . d_azp_fct_research_t_tariff_value . " AS 'lbl_azp_fct_research_t_tariff_value',
					tc_azp_fct_research." . d_azp_fct_research_t_module . " AS 'lbl_azp_fct_research_t_module'
				FROM " . t_azp_fct_research . " tc_azp_fct_research
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_research." . d_azp_fct_research_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_research." . d_azp_fct_research_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_research." . d_azp_fct_research_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_research." . d_azp_fct_research_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------					
				WHERE tc_azp_fct_research." . d_azp_fct_research_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
				GROUP BY tc_azp_fct_research." . d_azp_fct_research_t_identification . " ASC
			");
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_consolidated_investigation_all() {
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->query("DELETE FROM " . t_azp_fct_research . " WHERE " . d_azp_fct_research_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'");
		}

		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_consolidated_investigation_cam(string $var_id) {
			# Defincion de valores a nuevas variables
			$var_client = ''; $var_certificate = ''; $var_date_request = ''; $var_date_send = ''; $var_request = ''; $var_tariff = ''; $var_relation = '';
			$var_coverage = ''; $var_investigation = ''; $var_result = ''; $var_scale = ''; $var_service = ''; $var_sub_coverage = ''; $var_sub_service = '';
			$var_ct_3 = ''; $var_ct_4 = ''; $var_ct_5 = ''; $var_ct_6 = ''; $var_ct_7 = ''; $var_ct_8 = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture,
				d_azp_fct_prefacture_t_certificate . " = 'CAMARAS' AND " .
				d_azp_fct_prefacture_v_id_azp_fct_service . " = '3' AND " .
				d_azp_fct_prefacture_id_azp_fct_prefacture . " IN (" . $var_id . ")"
			);
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_date_send = $value[d_azp_fct_prefacture_t_date_send];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_relation = $value[d_azp_fct_prefacture_v_id_azp_fct_relation];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_client = $value[d_azp_fct_tariff_v_id_azp_fct_client];
							$var_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_coverage];
							$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
							$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
							$var_scale = $value[d_azp_fct_tariff_v_id_azp_fct_scale];
							$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
							$var_sub_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_sub_coverage];
							$var_sub_service = $value[d_azp_fct_tariff_v_id_azp_fct_sub_service];
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_nam_service = $value[d_azp_fct_sub_service_t_name]; endforeach; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_coverage, d_azp_fct_coverage_id_azp_fct_coverage . " = '" . $var_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_coverage = $value[d_azp_fct_coverage_t_name]; endforeach; } else { $var_id_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_investigation, d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_investigation = $value[d_azp_fct_investigation_t_name]; endforeach; } else { $var_id_investigation = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_result, d_azp_fct_result_id_azp_fct_result . " = '" . $var_result . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_result = $value[d_azp_fct_result_t_name]; endforeach; } else { $var_id_result = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_scale, d_azp_fct_scale_id_azp_fct_scale . " = '" . $var_scale . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_scale = $value[d_azp_fct_scale_t_name]; endforeach; } else { $var_id_scale = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_service, d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_service = $value[d_azp_fct_service_t_name]; endforeach; } else { $var_id_service = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '" . $var_sub_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_coverage = $value[d_azp_fct_sub_coverage_t_name]; endforeach; } else { $var_id_sub_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_service = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_id_sub_service = ''; }
							#-------------------------------------------------------------------------#
							if ($var_id_sub_coverage == 'NO APLICA') {
								$var_qy_sub_coverage = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " = '" . $var_id_coverage . "'";
							} else if ($var_id_sub_coverage == 'TODO') {
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_3 = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_3 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '4'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_4 = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_4 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '5'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_5 = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_5 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '6'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_6 = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_6 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '7'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_7 = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_7 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '8'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_8 = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_8 = ''; }
								#-------------------------------------------------------------------------#
								$var_qy_sub_coverage = "AND (tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
							} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
								$var_qy_sub_coverage = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " = '" . $var_id_sub_coverage . "'";
							}
							#-------------------------------------------------------------------------#
							# Controlo de validacion de datos de la base
							if ($var_id_investigation == 'EFECTIVIDAD') {
								# Controlo de validacion de datos de la base
								//if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_effective . " = '" . $var_id_result . "'"; } else { $var_qy_result = ''; }
								if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_effective . " = '" . $var_id_result . "'"; } else { $var_qy_result = ""; }
								# Seleccionar los registros de la tabla
								$var_sql = $this->db->query("
									SELECT
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

										tc_azp_ibn_camera." . d_azp_ibn_camera_id_azp_ibn_camera . " AS 'lbl_azp_ibn_camera_id_azp_ibn_camera',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_by_created . " AS 'lbl_azp_ibn_camera_m_by_created',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_by_modified . " AS 'lbl_azp_ibn_camera_m_by_modified',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_date_created . " AS 'lbl_azp_ibn_camera_m_date_created',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_date_modified . " AS 'lbl_azp_ibn_camera_m_date_modified',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_deleted . " AS 'lbl_azp_ibn_camera_m_deleted',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_description . " AS 'lbl_azp_ibn_camera_m_description',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_level . " AS 'lbl_azp_ibn_camera_m_level',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_status . " AS 'lbl_azp_ibn_camera_m_status',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_temp . " AS 'lbl_azp_ibn_camera_m_temp',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_validate . " AS 'lbl_azp_ibn_camera_t_validate',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_acount . " AS 'lbl_azp_ibn_camera_t_acount',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_bcount . " AS 'lbl_azp_ibn_camera_t_bcount',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_act_economic . " AS 'lbl_azp_ibn_camera_t_act_economic',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_address . " AS 'lbl_azp_ibn_camera_t_address',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_assessment . " AS 'lbl_azp_ibn_camera_t_assessment',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_business_name . " AS 'lbl_azp_ibn_camera_t_business_name',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_causal_feasibility . " AS 'lbl_azp_ibn_camera_t_causal_feasibility',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_city . " AS 'lbl_azp_ibn_camera_t_city',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_comment_legal . " AS 'lbl_azp_ibn_camera_t_comment_legal',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_concept . " AS 'lbl_azp_ibn_camera_t_concept',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_consecutive . " AS 'lbl_azp_ibn_camera_t_consecutive',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_department . " AS 'lbl_azp_ibn_camera_t_department',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_establishment . " AS 'lbl_azp_ibn_camera_t_establishment',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_full_name . " AS 'lbl_azp_ibn_camera_t_full_name',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_identification . " AS 'lbl_azp_ibn_camera_t_identification',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_legal_representative . " AS 'lbl_azp_ibn_camera_t_legal_representative',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_legal_rp_certificate . " AS 'lbl_azp_ibn_camera_t_legal_rp_certificate',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_limitation . " AS 'lbl_azp_ibn_camera_t_limitation',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_municipality . " AS 'lbl_azp_ibn_camera_t_municipality',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_nit . " AS 'lbl_azp_ibn_camera_t_nit',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_nro_registration . " AS 'lbl_azp_ibn_camera_t_nro_registration',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_observation . " AS 'lbl_azp_ibn_camera_t_observation',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_phone . " AS 'lbl_azp_ibn_camera_t_phone',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_effective . " AS 'lbl_azp_ibn_camera_t_policy_effective',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_final . " AS 'lbl_azp_ibn_camera_t_policy_final',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_viability . " AS 'lbl_azp_ibn_camera_t_policy_viability',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_renewal_date . " AS 'lbl_azp_ibn_camera_t_renewal_date',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_rup . " AS 'lbl_azp_ibn_camera_t_rup',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_total_active . " AS 'lbl_azp_ibn_camera_t_total_active',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_type_company . " AS 'lbl_azp_ibn_camera_t_type_company',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_type_organization . " AS 'lbl_azp_ibn_camera_t_type_organization',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_viable . " AS 'lbl_azp_ibn_camera_t_viable',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_well_viable . " AS 'lbl_azp_ibn_camera_t_well_viable',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_year . " AS 'lbl_azp_ibn_camera_t_year',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_located . " AS 'lbl_azp_ibn_camera_t_st_located',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_returnable . " AS 'lbl_azp_ibn_camera_t_st_returnable',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_receipt . " AS 'lbl_azp_ibn_camera_t_st_receipt',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_date . " AS 'lbl_azp_ibn_camera_t_st_date',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_value . " AS 'lbl_azp_ibn_camera_t_st_value',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " AS 'lbl_azp_ibn_camera_t_zmunicipality',
										tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_control_panel',
										tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_observation . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_observation',
										tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_state',
										tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_type_certified . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_type_certified',
										tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_type_concept . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_type_concept',

										tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

										tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
										
										tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
										tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
									FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
										ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
										ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
											= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
										ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
											= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_camera . " tc_azp_ibn_camera
										ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
											= tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
										ON tc_azp_ibn_camera." . d_azp_ibn_camera_t_acount . "
											= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
									-- ------------------------------------------------------------------------
									WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '9'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
										AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
											AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
										AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
										AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_bcount . " = '1'
										" . $var_qy_result . " " . $var_qy_sub_coverage . "
									-- ------------------------------------------------------------------------ 
									GROUP BY tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . " ASC,
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_identification . " ASC,
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_acount . " ASC
									-- ------------------------------------------------------------------------ 
									ORDER BY tc_azp_ibn_camera." . d_azp_ibn_camera_t_consecutive . " ASC
								");
								#-------------------------------------------------------------------------#
								# Verificar si el resultado de la sql es verdadero o falso
								if (true == $var_sql) {
									foreach ($var_sql as $key => $value):
										# Array para asignar argumentos o valores a los elementos
										$var_array = array(
											d_azp_fct_research_m_by_created => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_by_modified => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_date_created => DATE_HOUR,
											d_azp_fct_research_m_date_modified => DATE_HOUR,
											d_azp_fct_research_m_deleted => '1',
											d_azp_fct_research_m_description => '',
											d_azp_fct_research_m_level => '2',
											d_azp_fct_research_m_status => '1',
											d_azp_fct_research_m_temp => '1',
											d_azp_fct_research_t_client => $value['lbl_azp_fct_client_t_name'],
											d_azp_fct_research_t_code => $value['lbl_azp_ibn_data_main_t_code'],
											d_azp_fct_research_t_consecutive => $value['lbl_azp_ibn_data_main_t_consecutive'],
											d_azp_fct_research_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
											d_azp_fct_research_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
											d_azp_fct_research_t_full_name => $value['lbl_azp_ibn_data_main_t_full_name'],
											d_azp_fct_research_t_identification => $value['lbl_azp_ibn_data_main_t_identification'],
											d_azp_fct_research_t_obligation => $value['lbl_azp_ibn_data_main_t_nro_obligation'],
											d_azp_fct_research_t_municipality => $value['lbl_azp_ibn_camera_t_zmunicipality'],
											d_azp_fct_research_t_policy_general => $value['lbl_azp_ibn_camera_t_policy_effective'],
											d_azp_fct_research_t_request_nro => $value['lbl_azp_ibn_control_panel_t_code_research'],
											d_azp_fct_research_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
											d_azp_fct_research_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
											d_azp_fct_research_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
											d_azp_fct_research_t_module => 'CAMARAS',
										);
										# Query Sql Insert: Registrar valores en la tabla segun sus campos
										$this->db->insert(t_azp_fct_research, $var_array);
									endforeach;
								}
							} else if ($var_id_investigation == 'VIABILIDAD') {
								# Controlo de validacion de datos de la base
								//if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_viability . " = '" . $var_id_result . "'"; } else { $var_qy_result = ''; }
								if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_viability . " = '" . $var_id_result . "'"; } else { $var_qy_result = ""; }
								# Seleccionar los registros de la tabla
								$var_sql = $this->db->query("
									SELECT
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

										tc_azp_ibn_camera." . d_azp_ibn_camera_id_azp_ibn_camera . " AS 'lbl_azp_ibn_camera_id_azp_ibn_camera',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_by_created . " AS 'lbl_azp_ibn_camera_m_by_created',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_by_modified . " AS 'lbl_azp_ibn_camera_m_by_modified',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_date_created . " AS 'lbl_azp_ibn_camera_m_date_created',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_date_modified . " AS 'lbl_azp_ibn_camera_m_date_modified',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_deleted . " AS 'lbl_azp_ibn_camera_m_deleted',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_description . " AS 'lbl_azp_ibn_camera_m_description',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_level . " AS 'lbl_azp_ibn_camera_m_level',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_status . " AS 'lbl_azp_ibn_camera_m_status',
										tc_azp_ibn_camera." . d_azp_ibn_camera_m_temp . " AS 'lbl_azp_ibn_camera_m_temp',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_validate . " AS 'lbl_azp_ibn_camera_t_validate',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_acount . " AS 'lbl_azp_ibn_camera_t_acount',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_bcount . " AS 'lbl_azp_ibn_camera_t_bcount',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_act_economic . " AS 'lbl_azp_ibn_camera_t_act_economic',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_address . " AS 'lbl_azp_ibn_camera_t_address',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_assessment . " AS 'lbl_azp_ibn_camera_t_assessment',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_business_name . " AS 'lbl_azp_ibn_camera_t_business_name',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_causal_feasibility . " AS 'lbl_azp_ibn_camera_t_causal_feasibility',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_city . " AS 'lbl_azp_ibn_camera_t_city',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_comment_legal . " AS 'lbl_azp_ibn_camera_t_comment_legal',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_concept . " AS 'lbl_azp_ibn_camera_t_concept',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_consecutive . " AS 'lbl_azp_ibn_camera_t_consecutive',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_department . " AS 'lbl_azp_ibn_camera_t_department',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_establishment . " AS 'lbl_azp_ibn_camera_t_establishment',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_full_name . " AS 'lbl_azp_ibn_camera_t_full_name',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_identification . " AS 'lbl_azp_ibn_camera_t_identification',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_legal_representative . " AS 'lbl_azp_ibn_camera_t_legal_representative',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_legal_rp_certificate . " AS 'lbl_azp_ibn_camera_t_legal_rp_certificate',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_limitation . " AS 'lbl_azp_ibn_camera_t_limitation',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_municipality . " AS 'lbl_azp_ibn_camera_t_municipality',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_nit . " AS 'lbl_azp_ibn_camera_t_nit',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_nro_registration . " AS 'lbl_azp_ibn_camera_t_nro_registration',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_observation . " AS 'lbl_azp_ibn_camera_t_observation',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_phone . " AS 'lbl_azp_ibn_camera_t_phone',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_effective . " AS 'lbl_azp_ibn_camera_t_policy_effective',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_final . " AS 'lbl_azp_ibn_camera_t_policy_final',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_viability . " AS 'lbl_azp_ibn_camera_t_policy_viability',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_renewal_date . " AS 'lbl_azp_ibn_camera_t_renewal_date',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_rup . " AS 'lbl_azp_ibn_camera_t_rup',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_total_active . " AS 'lbl_azp_ibn_camera_t_total_active',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_type_company . " AS 'lbl_azp_ibn_camera_t_type_company',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_type_organization . " AS 'lbl_azp_ibn_camera_t_type_organization',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_viable . " AS 'lbl_azp_ibn_camera_t_viable',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_well_viable . " AS 'lbl_azp_ibn_camera_t_well_viable',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_year . " AS 'lbl_azp_ibn_camera_t_year',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_located . " AS 'lbl_azp_ibn_camera_t_st_located',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_returnable . " AS 'lbl_azp_ibn_camera_t_st_returnable',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_receipt . " AS 'lbl_azp_ibn_camera_t_st_receipt',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_date . " AS 'lbl_azp_ibn_camera_t_st_date',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_st_value . " AS 'lbl_azp_ibn_camera_t_st_value',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " AS 'lbl_azp_ibn_camera_t_zmunicipality',
										tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_control_panel',
										tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_observation . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_observation',
										tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_state',
										tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_type_certified . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_type_certified',
										tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_type_concept . " AS 'lbl_azp_ibn_camera_v_id_azp_ibn_type_concept',

										tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

										tc_azp_ibn_camera." . d_azp_ibn_camera_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
										
										tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
										tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
									FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
										ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
										ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
											= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
										ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
											= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_camera . " tc_azp_ibn_camera
										ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
											= tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
										ON tc_azp_ibn_camera." . d_azp_ibn_camera_t_acount . "
											= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
									-- ------------------------------------------------------------------------
									WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '9'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
										AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
											AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
										AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
										AND tc_azp_ibn_camera." . d_azp_ibn_camera_t_bcount . " = '1'
										" . $var_qy_result . " " . $var_qy_sub_coverage . "
									-- ------------------------------------------------------------------------ 
									GROUP BY tc_azp_ibn_camera." . d_azp_ibn_camera_v_id_azp_ibn_control_panel . " ASC,
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_identification . " ASC,
										tc_azp_ibn_camera." . d_azp_ibn_camera_t_acount . " ASC
									-- ------------------------------------------------------------------------ 
									ORDER BY tc_azp_ibn_camera." . d_azp_ibn_camera_t_consecutive . " ASC
								");
								#-------------------------------------------------------------------------#
								# Verificar si el resultado de la sql es verdadero o falso
								if (true == $var_sql) {
									foreach ($var_sql as $key => $value):
										# Array para asignar argumentos o valores a los elementos
										$var_array = array(
											d_azp_fct_research_m_by_created => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_by_modified => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_date_created => DATE_HOUR,
											d_azp_fct_research_m_date_modified => DATE_HOUR,
											d_azp_fct_research_m_deleted => '1',
											d_azp_fct_research_m_description => '',
											d_azp_fct_research_m_level => '2',
											d_azp_fct_research_m_status => '1',
											d_azp_fct_research_m_temp => '1',
											d_azp_fct_research_t_client => $value['lbl_azp_fct_client_t_name'],
											d_azp_fct_research_t_code => $value['lbl_azp_ibn_data_main_t_code'],
											d_azp_fct_research_t_consecutive => $value['lbl_azp_ibn_data_main_t_consecutive'],
											d_azp_fct_research_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
											d_azp_fct_research_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
											d_azp_fct_research_t_full_name => $value['lbl_azp_ibn_data_main_t_full_name'],
											d_azp_fct_research_t_identification => $value['lbl_azp_ibn_data_main_t_identification'],
											d_azp_fct_research_t_obligation => $value['lbl_azp_ibn_data_main_t_nro_obligation'],
											d_azp_fct_research_t_municipality => $value['lbl_azp_ibn_camera_t_zmunicipality'],
											d_azp_fct_research_t_policy_general => $value['lbl_azp_ibn_camera_t_policy_viability'],
											d_azp_fct_research_t_request_nro => $value['lbl_azp_ibn_control_panel_t_code_research'],
											d_azp_fct_research_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
											d_azp_fct_research_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
											d_azp_fct_research_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
											d_azp_fct_research_t_module => 'CAMARAS',
										);
										# Query Sql Insert: Registrar valores en la tabla segun sus campos
										$this->db->insert(t_azp_fct_research, $var_array);
									endforeach;
								}
							}
						endforeach;
					}
				endforeach;
			}
		}
		
		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_consolidated_investigation_pro(string $var_id) {
			# Defincion de valores a nuevas variables
			$var_client = ''; $var_certificate = ''; $var_date_request = ''; $var_date_send = ''; $var_request = ''; $var_tariff = ''; $var_relation = '';
			$var_coverage = ''; $var_investigation = ''; $var_result = ''; $var_scale = ''; $var_service = ''; $var_sub_coverage = ''; $var_sub_service = '';
			$var_ct_3 = ''; $var_ct_4 = ''; $var_ct_5 = ''; $var_ct_6 = ''; $var_ct_7 = ''; $var_ct_8 = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture,
				d_azp_fct_prefacture_t_certificate . " = 'INMUEBLES' AND " .
				d_azp_fct_prefacture_v_id_azp_fct_service . " = '3' AND " .
				d_azp_fct_prefacture_id_azp_fct_prefacture . " IN (" . $var_id . ")"
			);
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_date_send = $value[d_azp_fct_prefacture_t_date_send];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_relation = $value[d_azp_fct_prefacture_v_id_azp_fct_relation];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_client = $value[d_azp_fct_tariff_v_id_azp_fct_client];
							$var_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_coverage];
							$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
							$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
							$var_scale = $value[d_azp_fct_tariff_v_id_azp_fct_scale];
							$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
							$var_sub_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_sub_coverage];
							$var_sub_service = $value[d_azp_fct_tariff_v_id_azp_fct_sub_service];
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_nam_service = $value[d_azp_fct_sub_service_t_name]; endforeach; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_coverage, d_azp_fct_coverage_id_azp_fct_coverage . " = '" . $var_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_coverage = $value[d_azp_fct_coverage_t_name]; endforeach; } else { $var_id_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_investigation, d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_investigation = $value[d_azp_fct_investigation_t_name]; endforeach; } else { $var_id_investigation = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_result, d_azp_fct_result_id_azp_fct_result . " = '" . $var_result . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_result = $value[d_azp_fct_result_t_name]; endforeach; } else { $var_id_result = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_scale, d_azp_fct_scale_id_azp_fct_scale . " = '" . $var_scale . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_scale = $value[d_azp_fct_scale_t_name]; endforeach; } else { $var_id_scale = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_service, d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_service = $value[d_azp_fct_service_t_name]; endforeach; } else { $var_id_service = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '" . $var_sub_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_coverage = $value[d_azp_fct_sub_coverage_t_name]; endforeach; } else { $var_id_sub_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_service = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_id_sub_service = ''; }
							#-------------------------------------------------------------------------#
							if ($var_id_sub_coverage == 'NO APLICA') {
								$var_qy_sub_coverage = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " = '" . $var_id_coverage . "'";
							} else if ($var_id_sub_coverage == 'TODO') {
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_3 = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_3 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '4'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_4 = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_4 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '5'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_5 = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_5 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '6'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_6 = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_6 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '7'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_7 = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_7 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '8'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_8 = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_8 = ''; }
								#-------------------------------------------------------------------------#
								$var_qy_sub_coverage = "AND (tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
							} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
								$var_qy_sub_coverage = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " = '" . $var_id_sub_coverage . "'";
							}
							#-------------------------------------------------------------------------#
							# Controlo de validacion de datos de la base
							if ($var_id_investigation == 'EFECTIVIDAD') {
								# Controlo de validacion de datos de la base
								//if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_effective . " = '" . $var_id_result . "'"; } else { $var_qy_result = ''; }
								if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_policy_effective . " = '" . $var_id_result . "'"; } else { $var_qy_result = ""; }
								# Seleccionar los registros de la tabla
								$var_sql = $this->db->query("
									SELECT
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

										tc_azp_ibn_property." . d_azp_ibn_property_id_azp_ibn_property . " AS 'lbl_azp_ibn_property_id_azp_ibn_property',
										tc_azp_ibn_property." . d_azp_ibn_property_m_by_created . " AS 'lbl_azp_ibn_property_m_by_created',
										tc_azp_ibn_property." . d_azp_ibn_property_m_by_modified . " AS 'lbl_azp_ibn_property_m_by_modified',
										tc_azp_ibn_property." . d_azp_ibn_property_m_date_created . " AS 'lbl_azp_ibn_property_m_date_created',
										tc_azp_ibn_property." . d_azp_ibn_property_m_date_modified . " AS 'lbl_azp_ibn_property_m_date_modified',
										tc_azp_ibn_property." . d_azp_ibn_property_m_deleted . " AS 'lbl_azp_ibn_property_m_deleted',
										tc_azp_ibn_property." . d_azp_ibn_property_m_description . " AS 'lbl_azp_ibn_property_m_description',
										tc_azp_ibn_property." . d_azp_ibn_property_m_level . " AS 'lbl_azp_ibn_property_m_level',
										tc_azp_ibn_property." . d_azp_ibn_property_m_status . " AS 'lbl_azp_ibn_property_m_status',
										tc_azp_ibn_property." . d_azp_ibn_property_m_temp . " AS 'lbl_azp_ibn_property_m_temp',
										tc_azp_ibn_property." . d_azp_ibn_property_t_load_data . " AS 'lbl_azp_ibn_property_t_load_data',
										tc_azp_ibn_property." . d_azp_ibn_property_t_validate . " AS 'lbl_azp_ibn_property_t_validate',
										tc_azp_ibn_property." . d_azp_ibn_property_t_acount . " AS 'lbl_azp_ibn_property_t_acount',
										tc_azp_ibn_property." . d_azp_ibn_property_t_bcount . " AS 'lbl_azp_ibn_property_t_bcount',
										tc_azp_ibn_property." . d_azp_ibn_property_t_address . " AS 'lbl_azp_ibn_property_t_address',
										tc_azp_ibn_property." . d_azp_ibn_property_t_area . " AS 'lbl_azp_ibn_property_t_area',
										tc_azp_ibn_property." . d_azp_ibn_property_t_assessment . " AS 'lbl_azp_ibn_property_t_assessment',
										tc_azp_ibn_property." . d_azp_ibn_property_t_causal_feasibility . " AS 'lbl_azp_ibn_property_t_causal_feasibility',
										tc_azp_ibn_property." . d_azp_ibn_property_t_comment_legal . " AS 'lbl_azp_ibn_property_t_comment_legal',
										tc_azp_ibn_property." . d_azp_ibn_property_t_concept . " AS 'lbl_azp_ibn_property_t_concept',
										tc_azp_ibn_property." . d_azp_ibn_property_t_consecutive . " AS 'lbl_azp_ibn_property_t_consecutive',
										tc_azp_ibn_property." . d_azp_ibn_property_t_department . " AS 'lbl_azp_ibn_property_t_department',
										tc_azp_ibn_property." . d_azp_ibn_property_t_full_name . " AS 'lbl_azp_ibn_property_t_full_name',
										tc_azp_ibn_property." . d_azp_ibn_property_t_identification . " AS 'lbl_azp_ibn_property_t_identification',
										tc_azp_ibn_property." . d_azp_ibn_property_t_limitation . " AS 'lbl_azp_ibn_property_t_limitation',
										tc_azp_ibn_property." . d_azp_ibn_property_t_market_value . " AS 'lbl_azp_ibn_property_t_market_value',
										tc_azp_ibn_property." . d_azp_ibn_property_t_municipality . " AS 'lbl_azp_ibn_property_t_municipality',
										tc_azp_ibn_property." . d_azp_ibn_property_t_nro_registration . " AS 'lbl_azp_ibn_property_t_nro_registration',
										tc_azp_ibn_property." . d_azp_ibn_property_t_observation . " AS 'lbl_azp_ibn_property_t_observation',
										tc_azp_ibn_property." . d_azp_ibn_property_t_ownership . " AS 'lbl_azp_ibn_property_t_ownership',
										tc_azp_ibn_property." . d_azp_ibn_property_t_policy_effective . " AS 'lbl_azp_ibn_property_t_policy_effective',
										tc_azp_ibn_property." . d_azp_ibn_property_t_policy_final . " AS 'lbl_azp_ibn_property_t_policy_final',
										tc_azp_ibn_property." . d_azp_ibn_property_t_policy_viability . " AS 'lbl_azp_ibn_property_t_policy_viability',
										tc_azp_ibn_property." . d_azp_ibn_property_t_purchase_annotation . " AS 'lbl_azp_ibn_property_t_purchase_annotation',
										tc_azp_ibn_property." . d_azp_ibn_property_t_viable . " AS 'lbl_azp_ibn_property_t_viable',
										tc_azp_ibn_property." . d_azp_ibn_property_t_well_viable . " AS 'lbl_azp_ibn_property_t_well_viable',
										tc_azp_ibn_property." . d_azp_ibn_property_t_st_located . " AS 'lbl_azp_ibn_property_t_st_located',
										tc_azp_ibn_property." . d_azp_ibn_property_t_st_returnable . " AS 'lbl_azp_ibn_property_t_st_returnable',
										tc_azp_ibn_property." . d_azp_ibn_property_t_st_receipt . " AS 'lbl_azp_ibn_property_t_st_receipt',
										tc_azp_ibn_property." . d_azp_ibn_property_t_st_date . " AS 'lbl_azp_ibn_property_t_st_date',
										tc_azp_ibn_property." . d_azp_ibn_property_t_st_value . " AS 'lbl_azp_ibn_property_t_st_value',
										tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " AS 'lbl_azp_ibn_property_t_zmunicipality',
										tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_control_panel',
										tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_observation . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_observation',
										tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_state',
										tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_type_concept . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_type_concept',
										tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_type_property . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_type_property',

										tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

										tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
										tc_azp_ibn_property." . d_azp_ibn_property_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
										tc_azp_ibn_property." . d_azp_ibn_property_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
										
										tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
										tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
									FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
										ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
										ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
											= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
										ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
											= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_property . " tc_azp_ibn_property
										ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
											= tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
										ON tc_azp_ibn_property." . d_azp_ibn_property_t_acount . "
											= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
									-- ------------------------------------------------------------------------
									WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '10'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
										AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
											AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
										AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
										AND tc_azp_ibn_property." . d_azp_ibn_property_t_bcount . " = '1'
										" . $var_qy_result . " " . $var_qy_sub_coverage . "
									-- ------------------------------------------------------------------------ 
									GROUP BY tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . " ASC,
										tc_azp_ibn_property." . d_azp_ibn_property_t_identification . " ASC,
										tc_azp_ibn_property." . d_azp_ibn_property_t_acount . " ASC
									-- ------------------------------------------------------------------------ 
									ORDER BY tc_azp_ibn_property." . d_azp_ibn_property_t_consecutive . " ASC
								");
								#-------------------------------------------------------------------------#
								# Verificar si el resultado de la sql es verdadero o falso
								if (true == $var_sql) {
									foreach ($var_sql as $key => $value):
										# Array para asignar argumentos o valores a los elementos
										$var_array = array(
											d_azp_fct_research_m_by_created => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_by_modified => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_date_created => DATE_HOUR,
											d_azp_fct_research_m_date_modified => DATE_HOUR,
											d_azp_fct_research_m_deleted => '1',
											d_azp_fct_research_m_description => '',
											d_azp_fct_research_m_level => '2',
											d_azp_fct_research_m_status => '1',
											d_azp_fct_research_m_temp => '1',
											d_azp_fct_research_t_client => $value['lbl_azp_fct_client_t_name'],
											d_azp_fct_research_t_code => $value['lbl_azp_ibn_data_main_t_code'],
											d_azp_fct_research_t_consecutive => $value['lbl_azp_ibn_data_main_t_consecutive'],
											d_azp_fct_research_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
											d_azp_fct_research_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
											d_azp_fct_research_t_full_name => $value['lbl_azp_ibn_data_main_t_full_name'],
											d_azp_fct_research_t_identification => $value['lbl_azp_ibn_data_main_t_identification'],
											d_azp_fct_research_t_obligation => $value['lbl_azp_ibn_data_main_t_nro_obligation'],
											d_azp_fct_research_t_municipality => $value['lbl_azp_ibn_property_t_zmunicipality'],
											d_azp_fct_research_t_policy_general => $value['lbl_azp_ibn_property_t_policy_effective'],
											d_azp_fct_research_t_request_nro => $value['lbl_azp_ibn_control_panel_t_code_research'],
											d_azp_fct_research_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
											d_azp_fct_research_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
											d_azp_fct_research_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
											d_azp_fct_research_t_module => 'INMUEBLES',
										);
										# Query Sql Insert: Registrar valores en la tabla segun sus campos
										$this->db->insert(t_azp_fct_research, $var_array);
									endforeach;
								}
							} else if ($var_id_investigation == 'VIABILIDAD') {
								# Controlo de validacion de datos de la base
								//if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_viability . " = '" . $var_id_result . "'"; } else { $var_qy_result = ''; }
								if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_property." . d_azp_ibn_property_t_policy_viability . " = '" . $var_id_result . "'"; } else { $var_qy_result = ""; }
								# Seleccionar los registros de la tabla
								$var_sql = $this->db->query("
									SELECT
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

										tc_azp_ibn_property." . d_azp_ibn_property_id_azp_ibn_property . " AS 'lbl_azp_ibn_property_id_azp_ibn_property',
										tc_azp_ibn_property." . d_azp_ibn_property_m_by_created . " AS 'lbl_azp_ibn_property_m_by_created',
										tc_azp_ibn_property." . d_azp_ibn_property_m_by_modified . " AS 'lbl_azp_ibn_property_m_by_modified',
										tc_azp_ibn_property." . d_azp_ibn_property_m_date_created . " AS 'lbl_azp_ibn_property_m_date_created',
										tc_azp_ibn_property." . d_azp_ibn_property_m_date_modified . " AS 'lbl_azp_ibn_property_m_date_modified',
										tc_azp_ibn_property." . d_azp_ibn_property_m_deleted . " AS 'lbl_azp_ibn_property_m_deleted',
										tc_azp_ibn_property." . d_azp_ibn_property_m_description . " AS 'lbl_azp_ibn_property_m_description',
										tc_azp_ibn_property." . d_azp_ibn_property_m_level . " AS 'lbl_azp_ibn_property_m_level',
										tc_azp_ibn_property." . d_azp_ibn_property_m_status . " AS 'lbl_azp_ibn_property_m_status',
										tc_azp_ibn_property." . d_azp_ibn_property_m_temp . " AS 'lbl_azp_ibn_property_m_temp',
										tc_azp_ibn_property." . d_azp_ibn_property_t_load_data . " AS 'lbl_azp_ibn_property_t_load_data',
										tc_azp_ibn_property." . d_azp_ibn_property_t_validate . " AS 'lbl_azp_ibn_property_t_validate',
										tc_azp_ibn_property." . d_azp_ibn_property_t_acount . " AS 'lbl_azp_ibn_property_t_acount',
										tc_azp_ibn_property." . d_azp_ibn_property_t_bcount . " AS 'lbl_azp_ibn_property_t_bcount',
										tc_azp_ibn_property." . d_azp_ibn_property_t_address . " AS 'lbl_azp_ibn_property_t_address',
										tc_azp_ibn_property." . d_azp_ibn_property_t_area . " AS 'lbl_azp_ibn_property_t_area',
										tc_azp_ibn_property." . d_azp_ibn_property_t_assessment . " AS 'lbl_azp_ibn_property_t_assessment',
										tc_azp_ibn_property." . d_azp_ibn_property_t_causal_feasibility . " AS 'lbl_azp_ibn_property_t_causal_feasibility',
										tc_azp_ibn_property." . d_azp_ibn_property_t_comment_legal . " AS 'lbl_azp_ibn_property_t_comment_legal',
										tc_azp_ibn_property." . d_azp_ibn_property_t_concept . " AS 'lbl_azp_ibn_property_t_concept',
										tc_azp_ibn_property." . d_azp_ibn_property_t_consecutive . " AS 'lbl_azp_ibn_property_t_consecutive',
										tc_azp_ibn_property." . d_azp_ibn_property_t_department . " AS 'lbl_azp_ibn_property_t_department',
										tc_azp_ibn_property." . d_azp_ibn_property_t_full_name . " AS 'lbl_azp_ibn_property_t_full_name',
										tc_azp_ibn_property." . d_azp_ibn_property_t_identification . " AS 'lbl_azp_ibn_property_t_identification',
										tc_azp_ibn_property." . d_azp_ibn_property_t_limitation . " AS 'lbl_azp_ibn_property_t_limitation',
										tc_azp_ibn_property." . d_azp_ibn_property_t_market_value . " AS 'lbl_azp_ibn_property_t_market_value',
										tc_azp_ibn_property." . d_azp_ibn_property_t_municipality . " AS 'lbl_azp_ibn_property_t_municipality',
										tc_azp_ibn_property." . d_azp_ibn_property_t_nro_registration . " AS 'lbl_azp_ibn_property_t_nro_registration',
										tc_azp_ibn_property." . d_azp_ibn_property_t_observation . " AS 'lbl_azp_ibn_property_t_observation',
										tc_azp_ibn_property." . d_azp_ibn_property_t_ownership . " AS 'lbl_azp_ibn_property_t_ownership',
										tc_azp_ibn_property." . d_azp_ibn_property_t_policy_effective . " AS 'lbl_azp_ibn_property_t_policy_effective',
										tc_azp_ibn_property." . d_azp_ibn_property_t_policy_final . " AS 'lbl_azp_ibn_property_t_policy_final',
										tc_azp_ibn_property." . d_azp_ibn_property_t_policy_viability . " AS 'lbl_azp_ibn_property_t_policy_viability',
										tc_azp_ibn_property." . d_azp_ibn_property_t_purchase_annotation . " AS 'lbl_azp_ibn_property_t_purchase_annotation',
										tc_azp_ibn_property." . d_azp_ibn_property_t_viable . " AS 'lbl_azp_ibn_property_t_viable',
										tc_azp_ibn_property." . d_azp_ibn_property_t_well_viable . " AS 'lbl_azp_ibn_property_t_well_viable',
										tc_azp_ibn_property." . d_azp_ibn_property_t_st_located . " AS 'lbl_azp_ibn_property_t_st_located',
										tc_azp_ibn_property." . d_azp_ibn_property_t_st_returnable . " AS 'lbl_azp_ibn_property_t_st_returnable',
										tc_azp_ibn_property." . d_azp_ibn_property_t_st_receipt . " AS 'lbl_azp_ibn_property_t_st_receipt',
										tc_azp_ibn_property." . d_azp_ibn_property_t_st_date . " AS 'lbl_azp_ibn_property_t_st_date',
										tc_azp_ibn_property." . d_azp_ibn_property_t_st_value . " AS 'lbl_azp_ibn_property_t_st_value',
										tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " AS 'lbl_azp_ibn_property_t_zmunicipality',
										tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_control_panel',
										tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_observation . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_observation',
										tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_state',
										tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_type_concept . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_type_concept',
										tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_type_property . " AS 'lbl_azp_ibn_property_v_id_azp_ibn_type_property',

										tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

										tc_azp_ibn_property." . d_azp_ibn_property_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
										tc_azp_ibn_property." . d_azp_ibn_property_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
										tc_azp_ibn_property." . d_azp_ibn_property_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
										
										tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
										tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
									FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
										ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
										ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
											= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
										ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
											= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_property . " tc_azp_ibn_property
										ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
											= tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
										ON tc_azp_ibn_property." . d_azp_ibn_property_t_acount . "
											= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
									-- ------------------------------------------------------------------------
									WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '10'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
										AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
											AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
										AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
										AND tc_azp_ibn_property." . d_azp_ibn_property_t_bcount . " = '1'
										" . $var_qy_result . " " . $var_qy_sub_coverage . "
									-- ------------------------------------------------------------------------ 
									GROUP BY tc_azp_ibn_property." . d_azp_ibn_property_v_id_azp_ibn_control_panel . " ASC,
										tc_azp_ibn_property." . d_azp_ibn_property_t_identification . " ASC,
										tc_azp_ibn_property." . d_azp_ibn_property_t_acount . " ASC
									-- ------------------------------------------------------------------------ 
									ORDER BY tc_azp_ibn_property." . d_azp_ibn_property_t_consecutive . " ASC
								");
								#-------------------------------------------------------------------------#
								# Verificar si el resultado de la sql es verdadero o falso
								if (true == $var_sql) {
									foreach ($var_sql as $key => $value):
										# Array para asignar argumentos o valores a los elementos
										$var_array = array(
											d_azp_fct_research_m_by_created => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_by_modified => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_date_created => DATE_HOUR,
											d_azp_fct_research_m_date_modified => DATE_HOUR,
											d_azp_fct_research_m_deleted => '1',
											d_azp_fct_research_m_description => '',
											d_azp_fct_research_m_level => '2',
											d_azp_fct_research_m_status => '1',
											d_azp_fct_research_m_temp => '1',
											d_azp_fct_research_t_client => $value['lbl_azp_fct_client_t_name'],
											d_azp_fct_research_t_code => $value['lbl_azp_ibn_data_main_t_code'],
											d_azp_fct_research_t_consecutive => $value['lbl_azp_ibn_data_main_t_consecutive'],
											d_azp_fct_research_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
											d_azp_fct_research_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
											d_azp_fct_research_t_full_name => $value['lbl_azp_ibn_data_main_t_full_name'],
											d_azp_fct_research_t_identification => $value['lbl_azp_ibn_data_main_t_identification'],
											d_azp_fct_research_t_obligation => $value['lbl_azp_ibn_data_main_t_nro_obligation'],
											d_azp_fct_research_t_municipality => $value['lbl_azp_ibn_property_t_zmunicipality'],
											d_azp_fct_research_t_policy_general => $value['lbl_azp_ibn_property_t_policy_viability'],
											d_azp_fct_research_t_request_nro => $value['lbl_azp_ibn_control_panel_t_code_research'],
											d_azp_fct_research_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
											d_azp_fct_research_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
											d_azp_fct_research_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
											d_azp_fct_research_t_module => 'INMUEBLES',
										);
										# Query Sql Insert: Registrar valores en la tabla segun sus campos
										$this->db->insert(t_azp_fct_research, $var_array);
									endforeach;
								}
							}
						endforeach;
					}
				endforeach;
			}
		}
		
		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_consolidated_investigation_veh(string $var_id) {
			# Defincion de valores a nuevas variables
			$var_client = ''; $var_certificate = ''; $var_date_request = ''; $var_date_send = ''; $var_request = ''; $var_tariff = ''; $var_relation = '';
			$var_coverage = ''; $var_investigation = ''; $var_result = ''; $var_scale = ''; $var_service = ''; $var_sub_coverage = ''; $var_sub_service = '';
			$var_ct_3 = ''; $var_ct_4 = ''; $var_ct_5 = ''; $var_ct_6 = ''; $var_ct_7 = ''; $var_ct_8 = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture,
				d_azp_fct_prefacture_t_certificate . " = 'VEHICULOS' AND " .
				d_azp_fct_prefacture_v_id_azp_fct_service . " = '3' AND " .
				d_azp_fct_prefacture_id_azp_fct_prefacture . " IN (" . $var_id . ")"
			);
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_date_send = $value[d_azp_fct_prefacture_t_date_send];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_relation = $value[d_azp_fct_prefacture_v_id_azp_fct_relation];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_client = $value[d_azp_fct_tariff_v_id_azp_fct_client];
							$var_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_coverage];
							$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
							$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
							$var_scale = $value[d_azp_fct_tariff_v_id_azp_fct_scale];
							$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
							$var_sub_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_sub_coverage];
							$var_sub_service = $value[d_azp_fct_tariff_v_id_azp_fct_sub_service];
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_nam_service = $value[d_azp_fct_sub_service_t_name]; endforeach; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_coverage, d_azp_fct_coverage_id_azp_fct_coverage . " = '" . $var_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_coverage = $value[d_azp_fct_coverage_t_name]; endforeach; } else { $var_id_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_investigation, d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_investigation = $value[d_azp_fct_investigation_t_name]; endforeach; } else { $var_id_investigation = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_result, d_azp_fct_result_id_azp_fct_result . " = '" . $var_result . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_result = $value[d_azp_fct_result_t_name]; endforeach; } else { $var_id_result = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_scale, d_azp_fct_scale_id_azp_fct_scale . " = '" . $var_scale . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_scale = $value[d_azp_fct_scale_t_name]; endforeach; } else { $var_id_scale = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_service, d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_service = $value[d_azp_fct_service_t_name]; endforeach; } else { $var_id_service = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '" . $var_sub_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_coverage = $value[d_azp_fct_sub_coverage_t_name]; endforeach; } else { $var_id_sub_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_service = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_id_sub_service = ''; }
							#-------------------------------------------------------------------------#
							if ($var_id_sub_coverage == 'NO APLICA') {
								$var_qy_sub_coverage = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " = '" . $var_id_coverage . "'";
							} else if ($var_id_sub_coverage == 'TODO') {
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_3 = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_3 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '4'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_4 = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_4 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '5'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_5 = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_5 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '6'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_6 = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_6 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '7'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_7 = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_7 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '8'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_8 = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_8 = ''; }
								#-------------------------------------------------------------------------#
								$var_qy_sub_coverage = "AND (tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
							} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
								$var_qy_sub_coverage = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " = '" . $var_id_sub_coverage . "'";
							}
							#-------------------------------------------------------------------------#
							# Controlo de validacion de datos de la base
							if ($var_id_investigation == 'EFECTIVIDAD') {
								# Controlo de validacion de datos de la base
								//if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_effective . " = '" . $var_id_result . "'"; } else { $var_qy_result = ''; }
								if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_effective . " = '" . $var_id_result . "'"; } else { $var_qy_result = ""; }
								# Seleccionar los registros de la tabla
								$var_sql = $this->db->query("
									SELECT
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_id_azp_ibn_vehicle . " AS 'lbl_azp_ibn_vehicle_id_azp_ibn_vehicle',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_by_created . " AS 'lbl_azp_ibn_vehicle_m_by_created',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_by_modified . " AS 'lbl_azp_ibn_vehicle_m_by_modified',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_date_created . " AS 'lbl_azp_ibn_vehicle_m_date_created',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_date_modified . " AS 'lbl_azp_ibn_vehicle_m_date_modified',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_deleted . " AS 'lbl_azp_ibn_vehicle_m_deleted',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_description . " AS 'lbl_azp_ibn_vehicle_m_description',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_level . " AS 'lbl_azp_ibn_vehicle_m_level',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_status . " AS 'lbl_azp_ibn_vehicle_m_status',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_temp . " AS 'lbl_azp_ibn_vehicle_m_temp',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_load_data . " AS 'lbl_azp_ibn_vehicle_t_load_data',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_validate . " AS 'lbl_azp_ibn_vehicle_t_validate',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_acount . " AS 'lbl_azp_ibn_vehicle_t_acount',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_bcount . " AS 'lbl_azp_ibn_vehicle_t_bcount',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_assessment . " AS 'lbl_azp_ibn_vehicle_t_assessment',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_causal_feasibility . " AS 'lbl_azp_ibn_vehicle_t_causal_feasibility',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_city . " AS 'lbl_azp_ibn_vehicle_t_city',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_class . " AS 'lbl_azp_ibn_vehicle_t_class',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_color . " AS 'lbl_azp_ibn_vehicle_t_color',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_comment_legal . " AS 'lbl_azp_ibn_vehicle_t_comment_legal',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_concept . " AS 'lbl_azp_ibn_vehicle_t_concept',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_consecutive . " AS 'lbl_azp_ibn_vehicle_t_consecutive',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_full_name . " AS 'lbl_azp_ibn_vehicle_t_full_name',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_identification . " AS 'lbl_azp_ibn_vehicle_t_identification',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_limitation . " AS 'lbl_azp_ibn_vehicle_t_limitation',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_line . " AS 'lbl_azp_ibn_vehicle_t_line',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_make_camera . " AS 'lbl_azp_ibn_vehicle_t_make_camera',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_mark . " AS 'lbl_azp_ibn_vehicle_t_mark',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_model . " AS 'lbl_azp_ibn_vehicle_t_model',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_observation . " AS 'lbl_azp_ibn_vehicle_t_observation',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_plaque . " AS 'lbl_azp_ibn_vehicle_t_plaque',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_effective . " AS 'lbl_azp_ibn_vehicle_t_policy_effective',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_final . " AS 'lbl_azp_ibn_vehicle_t_policy_final',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_viability . " AS 'lbl_azp_ibn_vehicle_t_policy_viability',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_service . " AS 'lbl_azp_ibn_vehicle_t_service',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_value_assessment . " AS 'lbl_azp_ibn_vehicle_t_value_assessment',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_value_vehicle . " AS 'lbl_azp_ibn_vehicle_t_value_vehicle',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_viable . " AS 'lbl_azp_ibn_vehicle_t_viable',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_well_viable . " AS 'lbl_azp_ibn_vehicle_t_well_viable',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_located . " AS 'lbl_azp_ibn_vehicle_t_st_located',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_returnable . " AS 'lbl_azp_ibn_vehicle_t_st_returnable',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_receipt . " AS 'lbl_azp_ibn_vehicle_t_st_receipt',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_date . " AS 'lbl_azp_ibn_vehicle_t_st_date',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_value . " AS 'lbl_azp_ibn_vehicle_t_st_value',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " AS 'lbl_azp_ibn_vehicle_t_zmunicipality',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_vehicle_v_id_azp_ibn_control_panel',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_observation . " AS 'lbl_azp_ibn_vehicle_v_id_azp_ibn_observation',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_vehicle_v_id_azp_ibn_state',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_type_concept . " AS 'lbl_azp_ibn_vehicle_v_id_azp_ibn_type_concept',

										tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
										
										tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
										tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
									FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
										ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
										ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
											= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
										ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
											= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_vehicle . " tc_azp_ibn_vehicle
										ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
											= tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
										ON tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_acount . "
											= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
									-- ------------------------------------------------------------------------
									WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '11'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
										AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
											AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
										AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
										AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_bcount . " = '1'
										" . $var_qy_result . " " . $var_qy_sub_coverage . "
									-- ------------------------------------------------------------------------ 
									GROUP BY tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . " ASC,
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_identification . " ASC,
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_acount . " ASC
									-- ------------------------------------------------------------------------ 
									ORDER BY tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_consecutive . " ASC
								");
								#-------------------------------------------------------------------------#
								# Verificar si el resultado de la sql es verdadero o falso
								if (true == $var_sql) {
									foreach ($var_sql as $key => $value):
										# Array para asignar argumentos o valores a los elementos
										$var_array = array(
											d_azp_fct_research_m_by_created => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_by_modified => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_date_created => DATE_HOUR,
											d_azp_fct_research_m_date_modified => DATE_HOUR,
											d_azp_fct_research_m_deleted => '1',
											d_azp_fct_research_m_description => '',
											d_azp_fct_research_m_level => '2',
											d_azp_fct_research_m_status => '1',
											d_azp_fct_research_m_temp => '1',
											d_azp_fct_research_t_client => $value['lbl_azp_fct_client_t_name'],
											d_azp_fct_research_t_code => $value['lbl_azp_ibn_data_main_t_code'],
											d_azp_fct_research_t_consecutive => $value['lbl_azp_ibn_data_main_t_consecutive'],
											d_azp_fct_research_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
											d_azp_fct_research_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
											d_azp_fct_research_t_full_name => $value['lbl_azp_ibn_data_main_t_full_name'],
											d_azp_fct_research_t_identification => $value['lbl_azp_ibn_data_main_t_identification'],
											d_azp_fct_research_t_obligation => $value['lbl_azp_ibn_data_main_t_nro_obligation'],
											d_azp_fct_research_t_municipality => $value['lbl_azp_ibn_vehicle_t_zmunicipality'],
											d_azp_fct_research_t_policy_general => $value['lbl_azp_ibn_vehicle_t_policy_effective'],
											d_azp_fct_research_t_request_nro => $value['lbl_azp_ibn_control_panel_t_code_research'],
											d_azp_fct_research_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
											d_azp_fct_research_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
											d_azp_fct_research_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
											d_azp_fct_research_t_module => 'VEHICULOS',
										);
										# Query Sql Insert: Registrar valores en la tabla segun sus campos
										$this->db->insert(t_azp_fct_research, $var_array);
									endforeach;
								}
							} else if ($var_id_investigation == 'VIABILIDAD') {
								# Controlo de validacion de datos de la base
								//if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_viability . " = '" . $var_id_result . "'"; } else { $var_qy_result = ''; }
								if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_viability . " = '" . $var_id_result . "'"; } else { $var_qy_result = ""; }
								# Seleccionar los registros de la tabla
								$var_sql = $this->db->query("
									SELECT
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_id_azp_ibn_vehicle . " AS 'lbl_azp_ibn_vehicle_id_azp_ibn_vehicle',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_by_created . " AS 'lbl_azp_ibn_vehicle_m_by_created',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_by_modified . " AS 'lbl_azp_ibn_vehicle_m_by_modified',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_date_created . " AS 'lbl_azp_ibn_vehicle_m_date_created',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_date_modified . " AS 'lbl_azp_ibn_vehicle_m_date_modified',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_deleted . " AS 'lbl_azp_ibn_vehicle_m_deleted',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_description . " AS 'lbl_azp_ibn_vehicle_m_description',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_level . " AS 'lbl_azp_ibn_vehicle_m_level',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_status . " AS 'lbl_azp_ibn_vehicle_m_status',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_m_temp . " AS 'lbl_azp_ibn_vehicle_m_temp',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_load_data . " AS 'lbl_azp_ibn_vehicle_t_load_data',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_validate . " AS 'lbl_azp_ibn_vehicle_t_validate',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_acount . " AS 'lbl_azp_ibn_vehicle_t_acount',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_bcount . " AS 'lbl_azp_ibn_vehicle_t_bcount',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_assessment . " AS 'lbl_azp_ibn_vehicle_t_assessment',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_causal_feasibility . " AS 'lbl_azp_ibn_vehicle_t_causal_feasibility',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_city . " AS 'lbl_azp_ibn_vehicle_t_city',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_class . " AS 'lbl_azp_ibn_vehicle_t_class',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_color . " AS 'lbl_azp_ibn_vehicle_t_color',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_comment_legal . " AS 'lbl_azp_ibn_vehicle_t_comment_legal',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_concept . " AS 'lbl_azp_ibn_vehicle_t_concept',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_consecutive . " AS 'lbl_azp_ibn_vehicle_t_consecutive',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_full_name . " AS 'lbl_azp_ibn_vehicle_t_full_name',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_identification . " AS 'lbl_azp_ibn_vehicle_t_identification',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_limitation . " AS 'lbl_azp_ibn_vehicle_t_limitation',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_line . " AS 'lbl_azp_ibn_vehicle_t_line',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_make_camera . " AS 'lbl_azp_ibn_vehicle_t_make_camera',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_mark . " AS 'lbl_azp_ibn_vehicle_t_mark',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_model . " AS 'lbl_azp_ibn_vehicle_t_model',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_observation . " AS 'lbl_azp_ibn_vehicle_t_observation',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_plaque . " AS 'lbl_azp_ibn_vehicle_t_plaque',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_effective . " AS 'lbl_azp_ibn_vehicle_t_policy_effective',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_final . " AS 'lbl_azp_ibn_vehicle_t_policy_final',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_viability . " AS 'lbl_azp_ibn_vehicle_t_policy_viability',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_service . " AS 'lbl_azp_ibn_vehicle_t_service',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_value_assessment . " AS 'lbl_azp_ibn_vehicle_t_value_assessment',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_value_vehicle . " AS 'lbl_azp_ibn_vehicle_t_value_vehicle',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_viable . " AS 'lbl_azp_ibn_vehicle_t_viable',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_well_viable . " AS 'lbl_azp_ibn_vehicle_t_well_viable',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_located . " AS 'lbl_azp_ibn_vehicle_t_st_located',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_returnable . " AS 'lbl_azp_ibn_vehicle_t_st_returnable',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_receipt . " AS 'lbl_azp_ibn_vehicle_t_st_receipt',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_date . " AS 'lbl_azp_ibn_vehicle_t_st_date',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_st_value . " AS 'lbl_azp_ibn_vehicle_t_st_value',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " AS 'lbl_azp_ibn_vehicle_t_zmunicipality',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_vehicle_v_id_azp_ibn_control_panel',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_observation . " AS 'lbl_azp_ibn_vehicle_v_id_azp_ibn_observation',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_vehicle_v_id_azp_ibn_state',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_type_concept . " AS 'lbl_azp_ibn_vehicle_v_id_azp_ibn_type_concept',

										tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
										
										tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
										tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
									FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
										ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
										ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
											= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
										ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
											= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_vehicle . " tc_azp_ibn_vehicle
										ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
											= tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
										ON tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_acount . "
											= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
									-- ------------------------------------------------------------------------
									WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '11'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
										AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
											AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
										AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
										AND tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_bcount . " = '1'
										" . $var_qy_result . " " . $var_qy_sub_coverage . "
									-- ------------------------------------------------------------------------ 
									GROUP BY tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_v_id_azp_ibn_control_panel . " ASC,
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_identification . " ASC,
										tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_acount . " ASC
									-- ------------------------------------------------------------------------ 
									ORDER BY tc_azp_ibn_vehicle." . d_azp_ibn_vehicle_t_consecutive . " ASC
								");
								#-------------------------------------------------------------------------#
								# Verificar si el resultado de la sql es verdadero o falso
								if (true == $var_sql) {
									foreach ($var_sql as $key => $value):
										# Array para asignar argumentos o valores a los elementos
										$var_array = array(
											d_azp_fct_research_m_by_created => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_by_modified => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_date_created => DATE_HOUR,
											d_azp_fct_research_m_date_modified => DATE_HOUR,
											d_azp_fct_research_m_deleted => '1',
											d_azp_fct_research_m_description => '',
											d_azp_fct_research_m_level => '2',
											d_azp_fct_research_m_status => '1',
											d_azp_fct_research_m_temp => '1',
											d_azp_fct_research_t_client => $value['lbl_azp_fct_client_t_name'],
											d_azp_fct_research_t_code => $value['lbl_azp_ibn_data_main_t_code'],
											d_azp_fct_research_t_consecutive => $value['lbl_azp_ibn_data_main_t_consecutive'],
											d_azp_fct_research_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
											d_azp_fct_research_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
											d_azp_fct_research_t_full_name => $value['lbl_azp_ibn_data_main_t_full_name'],
											d_azp_fct_research_t_identification => $value['lbl_azp_ibn_data_main_t_identification'],
											d_azp_fct_research_t_obligation => $value['lbl_azp_ibn_data_main_t_nro_obligation'],
											d_azp_fct_research_t_municipality => $value['lbl_azp_ibn_vehicle_t_zmunicipality'],
											d_azp_fct_research_t_policy_general => $value['lbl_azp_ibn_vehicle_t_policy_viability'],
											d_azp_fct_research_t_request_nro => $value['lbl_azp_ibn_control_panel_t_code_research'],
											d_azp_fct_research_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
											d_azp_fct_research_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
											d_azp_fct_research_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
											d_azp_fct_research_t_module => 'VEHICULOS',
										);
										# Query Sql Insert: Registrar valores en la tabla segun sus campos
										$this->db->insert(t_azp_fct_research, $var_array);
									endforeach;
								}
							}
						endforeach;
					}
				endforeach;
			}
		}
		
		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_consolidated_investigation_fur(string $var_id) {
			# Defincion de valores a nuevas variables
			$var_client = ''; $var_certificate = ''; $var_date_request = ''; $var_date_send = ''; $var_request = ''; $var_tariff = ''; $var_relation = '';
			$var_coverage = ''; $var_investigation = ''; $var_result = ''; $var_scale = ''; $var_service = ''; $var_sub_coverage = ''; $var_sub_service = '';
			$var_ct_3 = ''; $var_ct_4 = ''; $var_ct_5 = ''; $var_ct_6 = ''; $var_ct_7 = ''; $var_ct_8 = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture,
				d_azp_fct_prefacture_t_certificate . " = 'SALARIOS' AND " .
				d_azp_fct_prefacture_v_id_azp_fct_service . " = '3' AND " .
				d_azp_fct_prefacture_id_azp_fct_prefacture . " IN (" . $var_id . ")"
			);
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_date_send = $value[d_azp_fct_prefacture_t_date_send];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_relation = $value[d_azp_fct_prefacture_v_id_azp_fct_relation];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_client = $value[d_azp_fct_tariff_v_id_azp_fct_client];
							$var_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_coverage];
							$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
							$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
							$var_scale = $value[d_azp_fct_tariff_v_id_azp_fct_scale];
							$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
							$var_sub_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_sub_coverage];
							$var_sub_service = $value[d_azp_fct_tariff_v_id_azp_fct_sub_service];
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_nam_service = $value[d_azp_fct_sub_service_t_name]; endforeach; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_coverage, d_azp_fct_coverage_id_azp_fct_coverage . " = '" . $var_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_coverage = $value[d_azp_fct_coverage_t_name]; endforeach; } else { $var_id_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_investigation, d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_investigation = $value[d_azp_fct_investigation_t_name]; endforeach; } else { $var_id_investigation = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_result, d_azp_fct_result_id_azp_fct_result . " = '" . $var_result . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_result = $value[d_azp_fct_result_t_name]; endforeach; } else { $var_id_result = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_scale, d_azp_fct_scale_id_azp_fct_scale . " = '" . $var_scale . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_scale = $value[d_azp_fct_scale_t_name]; endforeach; } else { $var_id_scale = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_service, d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_service = $value[d_azp_fct_service_t_name]; endforeach; } else { $var_id_service = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '" . $var_sub_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_coverage = $value[d_azp_fct_sub_coverage_t_name]; endforeach; } else { $var_id_sub_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_service = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_id_sub_service = ''; }
							#-------------------------------------------------------------------------#
							if ($var_id_sub_coverage == 'NO APLICA') {
								$var_qy_sub_coverage = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " = '" . $var_id_coverage . "'";
							} else if ($var_id_sub_coverage == 'TODO') {
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_3 = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_3 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '4'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_4 = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_4 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '5'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_5 = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_5 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '6'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_6 = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_6 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '7'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_7 = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_7 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '8'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_8 = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_8 = ''; }
								#-------------------------------------------------------------------------#
								$var_qy_sub_coverage = "AND (tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
							} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
								$var_qy_sub_coverage = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " = '" . $var_id_sub_coverage . "'";
							}
							#-------------------------------------------------------------------------#
							# Controlo de validacion de datos de la base
							if ($var_id_investigation == 'EFECTIVIDAD') {
								# Controlo de validacion de datos de la base
								//if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_effective . " = '" . $var_id_result . "'"; } else { $var_qy_result = ''; }
								if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_effective . " = '" . $var_id_result . "'"; } else { $var_qy_result = ""; }
								# Seleccionar los registros de la tabla
								$var_sql = $this->db->query("
									SELECT
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

										tc_azp_ibn_furniture." . d_azp_ibn_furniture_id_azp_ibn_furniture . " AS 'lbl_azp_ibn_furniture_id_azp_ibn_furniture',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_by_created . " AS 'lbl_azp_ibn_furniture_m_by_created',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_by_modified . " AS 'lbl_azp_ibn_furniture_m_by_modified',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_date_created . " AS 'lbl_azp_ibn_furniture_m_date_created',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_date_modified . " AS 'lbl_azp_ibn_furniture_m_date_modified',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_deleted . " AS 'lbl_azp_ibn_furniture_m_deleted',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_description . " AS 'lbl_azp_ibn_furniture_m_description',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_level . " AS 'lbl_azp_ibn_furniture_m_level',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_status . " AS 'lbl_azp_ibn_furniture_m_status',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_temp . " AS 'lbl_azp_ibn_furniture_m_temp',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_validate . " AS 'lbl_azp_ibn_furniture_t_validate',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_acount . " AS 'lbl_azp_ibn_furniture_t_acount',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_bcount . " AS 'lbl_azp_ibn_furniture_t_bcount',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_address . " AS 'lbl_azp_ibn_furniture_t_address',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_business_name . " AS 'lbl_azp_ibn_furniture_t_business_name',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_city . " AS 'lbl_azp_ibn_furniture_t_city',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_comment_legal . " AS 'lbl_azp_ibn_furniture_t_comment_legal',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_concept . " AS 'lbl_azp_ibn_furniture_t_concept',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_consecutive . " AS 'lbl_azp_ibn_furniture_t_consecutive',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_department . " AS 'lbl_azp_ibn_furniture_t_department',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_entity . " AS 'lbl_azp_ibn_furniture_t_entity',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_full_name . " AS 'lbl_azp_ibn_furniture_t_full_name',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_identification . " AS 'lbl_azp_ibn_furniture_t_identification',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_limitation . " AS 'lbl_azp_ibn_furniture_t_limitation',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_municipality . " AS 'lbl_azp_ibn_furniture_t_municipality',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_nit . " AS 'lbl_azp_ibn_furniture_t_nit',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_observation . " AS 'lbl_azp_ibn_furniture_t_observation',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_phone . " AS 'lbl_azp_ibn_furniture_t_phone',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_effective . " AS 'lbl_azp_ibn_furniture_t_policy_effective',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_final . " AS 'lbl_azp_ibn_furniture_t_policy_final',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_viability . " AS 'lbl_azp_ibn_furniture_t_policy_viability',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_salary . " AS 'lbl_azp_ibn_furniture_t_salary',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_viable_causal . " AS 'lbl_azp_ibn_furniture_t_viable_causal',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_well_option . " AS 'lbl_azp_ibn_furniture_t_well_option',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_well_viable . " AS 'lbl_azp_ibn_furniture_t_well_viable',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " AS 'lbl_azp_ibn_furniture_t_zmunicipality',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_control_panel',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_outcome . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_outcome',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_rank . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_rank',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_regime . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_regime',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_state',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_type_affiliate . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_type_affiliate',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_type_concept . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_type_concept',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_type_contributor . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_type_contributor',

										tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
										
										tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
										tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
									FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
										ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
										ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
											= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
										ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
											= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_furniture . " tc_azp_ibn_furniture
										ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
											= tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
										ON tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_acount . "
											= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
									-- ------------------------------------------------------------------------
									WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '12'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
										AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
											AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
										AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
										AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_bcount . " = '1'
										" . $var_qy_result . " " . $var_qy_sub_coverage . "
									-- ------------------------------------------------------------------------ 
									GROUP BY tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . " ASC,
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_identification . " ASC,
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_acount . " ASC
									-- ------------------------------------------------------------------------ 
									ORDER BY tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_consecutive . " ASC
								");
								#-------------------------------------------------------------------------#
								# Verificar si el resultado de la sql es verdadero o falso
								if (true == $var_sql) {
									foreach ($var_sql as $key => $value):
										# Array para asignar argumentos o valores a los elementos
										$var_array = array(
											d_azp_fct_research_m_by_created => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_by_modified => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_date_created => DATE_HOUR,
											d_azp_fct_research_m_date_modified => DATE_HOUR,
											d_azp_fct_research_m_deleted => '1',
											d_azp_fct_research_m_description => '',
											d_azp_fct_research_m_level => '2',
											d_azp_fct_research_m_status => '1',
											d_azp_fct_research_m_temp => '1',
											d_azp_fct_research_t_client => $value['lbl_azp_fct_client_t_name'],
											d_azp_fct_research_t_code => $value['lbl_azp_ibn_data_main_t_code'],
											d_azp_fct_research_t_consecutive => $value['lbl_azp_ibn_data_main_t_consecutive'],
											d_azp_fct_research_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
											d_azp_fct_research_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
											d_azp_fct_research_t_full_name => $value['lbl_azp_ibn_data_main_t_full_name'],
											d_azp_fct_research_t_identification => $value['lbl_azp_ibn_data_main_t_identification'],
											d_azp_fct_research_t_obligation => $value['lbl_azp_ibn_data_main_t_nro_obligation'],
											d_azp_fct_research_t_municipality => $value['lbl_azp_ibn_furniture_t_zmunicipality'],
											d_azp_fct_research_t_policy_general => $value['lbl_azp_ibn_furniture_t_policy_effective'],
											d_azp_fct_research_t_request_nro => $value['lbl_azp_ibn_control_panel_t_code_research'],
											d_azp_fct_research_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
											d_azp_fct_research_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
											d_azp_fct_research_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
											d_azp_fct_research_t_module => 'SALARIOS',
										);
										# Query Sql Insert: Registrar valores en la tabla segun sus campos
										$this->db->insert(t_azp_fct_research, $var_array);
									endforeach;
								}
							} else if ($var_id_investigation == 'VIABILIDAD') {
								# Controlo de validacion de datos de la base
								//if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_viability . " = '" . $var_id_result . "'"; } else { $var_qy_result = ''; }
								if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_viability . " = '" . $var_id_result . "'"; } else { $var_qy_result = ""; }
								# Seleccionar los registros de la tabla
								$var_sql = $this->db->query("
									SELECT
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

										tc_azp_ibn_furniture." . d_azp_ibn_furniture_id_azp_ibn_furniture . " AS 'lbl_azp_ibn_furniture_id_azp_ibn_furniture',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_by_created . " AS 'lbl_azp_ibn_furniture_m_by_created',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_by_modified . " AS 'lbl_azp_ibn_furniture_m_by_modified',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_date_created . " AS 'lbl_azp_ibn_furniture_m_date_created',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_date_modified . " AS 'lbl_azp_ibn_furniture_m_date_modified',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_deleted . " AS 'lbl_azp_ibn_furniture_m_deleted',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_description . " AS 'lbl_azp_ibn_furniture_m_description',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_level . " AS 'lbl_azp_ibn_furniture_m_level',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_status . " AS 'lbl_azp_ibn_furniture_m_status',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_m_temp . " AS 'lbl_azp_ibn_furniture_m_temp',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_validate . " AS 'lbl_azp_ibn_furniture_t_validate',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_acount . " AS 'lbl_azp_ibn_furniture_t_acount',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_bcount . " AS 'lbl_azp_ibn_furniture_t_bcount',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_address . " AS 'lbl_azp_ibn_furniture_t_address',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_business_name . " AS 'lbl_azp_ibn_furniture_t_business_name',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_city . " AS 'lbl_azp_ibn_furniture_t_city',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_comment_legal . " AS 'lbl_azp_ibn_furniture_t_comment_legal',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_concept . " AS 'lbl_azp_ibn_furniture_t_concept',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_consecutive . " AS 'lbl_azp_ibn_furniture_t_consecutive',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_department . " AS 'lbl_azp_ibn_furniture_t_department',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_entity . " AS 'lbl_azp_ibn_furniture_t_entity',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_full_name . " AS 'lbl_azp_ibn_furniture_t_full_name',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_identification . " AS 'lbl_azp_ibn_furniture_t_identification',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_limitation . " AS 'lbl_azp_ibn_furniture_t_limitation',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_municipality . " AS 'lbl_azp_ibn_furniture_t_municipality',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_nit . " AS 'lbl_azp_ibn_furniture_t_nit',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_observation . " AS 'lbl_azp_ibn_furniture_t_observation',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_phone . " AS 'lbl_azp_ibn_furniture_t_phone',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_effective . " AS 'lbl_azp_ibn_furniture_t_policy_effective',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_final . " AS 'lbl_azp_ibn_furniture_t_policy_final',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_viability . " AS 'lbl_azp_ibn_furniture_t_policy_viability',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_salary . " AS 'lbl_azp_ibn_furniture_t_salary',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_viable_causal . " AS 'lbl_azp_ibn_furniture_t_viable_causal',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_well_option . " AS 'lbl_azp_ibn_furniture_t_well_option',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_well_viable . " AS 'lbl_azp_ibn_furniture_t_well_viable',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " AS 'lbl_azp_ibn_furniture_t_zmunicipality',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_control_panel',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_outcome . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_outcome',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_rank . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_rank',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_regime . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_regime',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_state',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_type_affiliate . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_type_affiliate',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_type_concept . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_type_concept',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_type_contributor . " AS 'lbl_azp_ibn_furniture_v_id_azp_ibn_type_contributor',

										tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
										
										tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
										tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
									FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
										ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
										ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
											= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
										ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
											= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_furniture . " tc_azp_ibn_furniture
										ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
											= tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
										ON tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_acount . "
											= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
									-- ------------------------------------------------------------------------
									WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '12'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
										AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
											AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
										AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
										AND tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_bcount . " = '1'
										" . $var_qy_result . " " . $var_qy_sub_coverage . "
									-- ------------------------------------------------------------------------ 
									GROUP BY tc_azp_ibn_furniture." . d_azp_ibn_furniture_v_id_azp_ibn_control_panel . " ASC,
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_identification . " ASC,
										tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_acount . " ASC
									-- ------------------------------------------------------------------------ 
									ORDER BY tc_azp_ibn_furniture." . d_azp_ibn_furniture_t_consecutive . " ASC
								");
								#-------------------------------------------------------------------------#
								# Verificar si el resultado de la sql es verdadero o falso
								if (true == $var_sql) {
									foreach ($var_sql as $key => $value):
										# Array para asignar argumentos o valores a los elementos
										$var_array = array(
											d_azp_fct_research_m_by_created => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_by_modified => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_date_created => DATE_HOUR,
											d_azp_fct_research_m_date_modified => DATE_HOUR,
											d_azp_fct_research_m_deleted => '1',
											d_azp_fct_research_m_description => '',
											d_azp_fct_research_m_level => '2',
											d_azp_fct_research_m_status => '1',
											d_azp_fct_research_m_temp => '1',
											d_azp_fct_research_t_client => $value['lbl_azp_fct_client_t_name'],
											d_azp_fct_research_t_code => $value['lbl_azp_ibn_data_main_t_code'],
											d_azp_fct_research_t_consecutive => $value['lbl_azp_ibn_data_main_t_consecutive'],
											d_azp_fct_research_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
											d_azp_fct_research_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
											d_azp_fct_research_t_full_name => $value['lbl_azp_ibn_data_main_t_full_name'],
											d_azp_fct_research_t_identification => $value['lbl_azp_ibn_data_main_t_identification'],
											d_azp_fct_research_t_obligation => $value['lbl_azp_ibn_data_main_t_nro_obligation'],
											d_azp_fct_research_t_municipality => $value['lbl_azp_ibn_furniture_t_zmunicipality'],
											d_azp_fct_research_t_policy_general => $value['lbl_azp_ibn_furniture_t_policy_viability'],
											d_azp_fct_research_t_request_nro => $value['lbl_azp_ibn_control_panel_t_code_research'],
											d_azp_fct_research_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
											d_azp_fct_research_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
											d_azp_fct_research_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
											d_azp_fct_research_t_module => 'SALARIOS',
										);
										# Query Sql Insert: Registrar valores en la tabla segun sus campos
										$this->db->insert(t_azp_fct_research, $var_array);
									endforeach;
								}
							}
						endforeach;
					}
				endforeach;
			}
		}
		
		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_consolidated_investigation_war(string $var_id) {
			# Defincion de valores a nuevas variables
			$var_client = ''; $var_certificate = ''; $var_date_request = ''; $var_date_send = ''; $var_request = ''; $var_tariff = ''; $var_relation = '';
			$var_coverage = ''; $var_investigation = ''; $var_result = ''; $var_scale = ''; $var_service = ''; $var_sub_coverage = ''; $var_sub_service = '';
			$var_ct_3 = ''; $var_ct_4 = ''; $var_ct_5 = ''; $var_ct_6 = ''; $var_ct_7 = ''; $var_ct_8 = '';
			#-------------------------------------------------------------------------#
			# Verificar en la base de datos si existen el registro
			$var_sql = $this->db->select('*', t_azp_fct_prefacture,
				d_azp_fct_prefacture_t_certificate . " = 'GARANTIAS' AND " .
				d_azp_fct_prefacture_v_id_azp_fct_service . " = '3' AND " .
				d_azp_fct_prefacture_id_azp_fct_prefacture . " IN (" . $var_id . ")"
			);
			# Verificar si el resultado de la sql es verdadero o falso
			if (true == $var_sql) {
				foreach ($var_sql as $key => $value):
					# Asignacion de valores a nuevas variables
					$var_certificate = $value[d_azp_fct_prefacture_t_certificate];
					$var_date_request = $value[d_azp_fct_prefacture_t_date_request];
					$var_date_send = $value[d_azp_fct_prefacture_t_date_send];
					$var_request = $value[d_azp_fct_prefacture_t_request];
					$var_relation = $value[d_azp_fct_prefacture_v_id_azp_fct_relation];
					$var_tariff = $value[d_azp_fct_prefacture_v_id_azp_fct_tariff];
					#-------------------------------------------------------------------------#
					# Verificar en la base de datos si existen el registro
					$var_sql = $this->db->select('*', t_azp_fct_tariff, d_azp_fct_tariff_id_azp_fct_tariff . " = '" . $var_tariff . "'");
					# Verificar si el resultado de la sql es verdadero o falso
					if (true == $var_sql) {
						# El constructor foreach proporciona un modo sencillo de iterar sobre arrays.
						foreach ($var_sql as $key => $value):
							# Asignacion de valores a nuevas variables
							$var_client = $value[d_azp_fct_tariff_v_id_azp_fct_client];
							$var_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_coverage];
							$var_investigation = $value[d_azp_fct_tariff_v_id_azp_fct_investigation];
							$var_result = $value[d_azp_fct_tariff_v_id_azp_fct_result];
							$var_scale = $value[d_azp_fct_tariff_v_id_azp_fct_scale];
							$var_service = $value[d_azp_fct_tariff_v_id_azp_fct_service];
							$var_sub_coverage = $value[d_azp_fct_tariff_v_id_azp_fct_sub_coverage];
							$var_sub_service = $value[d_azp_fct_tariff_v_id_azp_fct_sub_service];
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_nam_service = $value[d_azp_fct_sub_service_t_name]; endforeach; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_coverage, d_azp_fct_coverage_id_azp_fct_coverage . " = '" . $var_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_coverage = $value[d_azp_fct_coverage_t_name]; endforeach; } else { $var_id_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_investigation, d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_investigation = $value[d_azp_fct_investigation_t_name]; endforeach; } else { $var_id_investigation = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_result, d_azp_fct_result_id_azp_fct_result . " = '" . $var_result . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_result = $value[d_azp_fct_result_t_name]; endforeach; } else { $var_id_result = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_scale, d_azp_fct_scale_id_azp_fct_scale . " = '" . $var_scale . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_scale = $value[d_azp_fct_scale_t_name]; endforeach; } else { $var_id_scale = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_service, d_azp_fct_service_id_azp_fct_service . " = '" . $var_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_service = $value[d_azp_fct_service_t_name]; endforeach; } else { $var_id_service = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_coverage, d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '" . $var_sub_coverage . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_coverage = $value[d_azp_fct_sub_coverage_t_name]; endforeach; } else { $var_id_sub_coverage = ''; }
							#-------------------------------------------------------------------------#
							# Verificar en la base de datos si existen el registro
							$var_sql = $this->db->select('*', t_azp_fct_sub_service, d_azp_fct_sub_service_id_azp_fct_sub_service . " = '" . $var_sub_service . "'");
							# Verificar si el resultado de la sql es verdadero o falso
							if (true == $var_sql) { foreach ($var_sql as $key => $value): $var_id_sub_service = $value[d_azp_fct_sub_service_t_name]; endforeach; } else { $var_id_sub_service = ''; }
							#-------------------------------------------------------------------------#
							if ($var_id_sub_coverage == 'NO APLICA') {
								$var_qy_sub_coverage = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " = '" . $var_id_coverage . "'";
							} else if ($var_id_sub_coverage == 'TODO') {
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_3 = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_3 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '4'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_4 = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_4 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '5'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_5 = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_5 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '6'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_6 = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_6 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '7'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_7 = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_7 = ''; }
								#-------------------------------------------------------------------------#
								# Verificar en la base de datos si existen el registro
								$var_sql = $this->db->query("
									SELECT tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_t_name . " AS 'lbl_city'
									FROM " . t_azp_fct_tariff . " tc_azp_fct_tariff
									INNER JOIN " . t_azp_fct_sub_coverage . " tc_azp_fct_sub_coverage
										ON tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_coverage . "
									WHERE tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_coverage . " = '2'
										AND tc_azp_fct_sub_coverage." . d_azp_fct_sub_coverage_id_azp_fct_sub_coverage . " = '8'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
								");
								# Recorrer los datos de la consulta de la tabla y encodificarlos
								if (true == $var_sql) { foreach ($var_sql as $key => $value) {
									$var_ct_8 = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != '" . $value['lbl_city'] . "'";
								} } else { $var_ct_8 = ''; }
								#-------------------------------------------------------------------------#
								$var_qy_sub_coverage = "AND (tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " != 'BOGOTA' " . $var_ct_3 . " " . $var_ct_4 . " " . $var_ct_5 . " " . $var_ct_6 . " " . $var_ct_7 . " " . $var_ct_8 . ")";
							} else if ($var_id_sub_coverage != 'NO APLICA' || $var_id_sub_coverage != 'TODO') {
								$var_qy_sub_coverage = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " = '" . $var_id_sub_coverage . "'";
							}
							#-------------------------------------------------------------------------#
							# Controlo de validacion de datos de la base
							if ($var_id_investigation == 'EFECTIVIDAD') {
								# Controlo de validacion de datos de la base
								//if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_effective . " = '" . $var_id_result . "'"; } else { $var_qy_result = ''; }
								if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_effective . " = '" . $var_id_result . "'"; } else { $var_qy_result = ""; }
								# Seleccionar los registros de la tabla
								$var_sql = $this->db->query("
									SELECT
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

										tc_azp_ibn_warranty." . d_azp_ibn_warranty_id_azp_ibn_warranty . " AS 'lbl_azp_ibn_warranty_id_azp_ibn_warranty',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_by_created . " AS 'lbl_azp_ibn_warranty_m_by_created',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_by_modified . " AS 'lbl_azp_ibn_warranty_m_by_modified',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_date_created . " AS 'lbl_azp_ibn_warranty_m_date_created',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_date_modified . " AS 'lbl_azp_ibn_warranty_m_date_modified',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_deleted . " AS 'lbl_azp_ibn_warranty_m_deleted',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_description . " AS 'lbl_azp_ibn_warranty_m_description',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_level . " AS 'lbl_azp_ibn_warranty_m_level',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_status . " AS 'lbl_azp_ibn_warranty_m_status',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_temp . " AS 'lbl_azp_ibn_warranty_m_temp',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_validate . " AS 'lbl_azp_ibn_warranty_t_validate',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_acount . " AS 'lbl_azp_ibn_warranty_t_acount',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_bcount . " AS 'lbl_azp_ibn_warranty_t_bcount',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_comment_legal . " AS 'lbl_azp_ibn_warranty_t_comment_legal',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_concept . " AS 'lbl_azp_ibn_warranty_t_concept',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_consecutive . " AS 'lbl_azp_ibn_warranty_t_consecutive',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_creditor . " AS 'lbl_azp_ibn_warranty_t_creditor',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_date . " AS 'lbl_azp_ibn_warranty_t_date',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_full_name . " AS 'lbl_azp_ibn_warranty_t_full_name',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_identification . " AS 'lbl_azp_ibn_warranty_t_identification',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_limitation . " AS 'lbl_azp_ibn_warranty_t_limitation',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_observation . " AS 'lbl_azp_ibn_warranty_t_observation',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_effective . " AS 'lbl_azp_ibn_warranty_t_policy_effective',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_final . " AS 'lbl_azp_ibn_warranty_t_policy_final',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_viability . " AS 'lbl_azp_ibn_warranty_t_policy_viability',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_well_detail . " AS 'lbl_azp_ibn_warranty_t_well_detail',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_well_name . " AS 'lbl_azp_ibn_warranty_t_well_name',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_value . " AS 'lbl_azp_ibn_warranty_t_value',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " AS 'lbl_azp_ibn_warranty_t_zmunicipality',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_warranty_v_id_azp_ibn_control_panel',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_warranty_v_id_azp_ibn_state',

										tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
										
										tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
										tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
									FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
										ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
										ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
											= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
										ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
											= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_warranty . " tc_azp_ibn_warranty
										ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
											= tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
										ON tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_acount . "
											= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
									-- ------------------------------------------------------------------------
									WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '13'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
										AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
											AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
										AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
										AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_bcount . " = '1'
										" . $var_qy_result . " " . $var_qy_sub_coverage . "
									-- ------------------------------------------------------------------------ 
									GROUP BY tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . " ASC,
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_identification . " ASC,
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_acount . " ASC
									-- ------------------------------------------------------------------------ 
									ORDER BY tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_consecutive . " ASC
								");
								#-------------------------------------------------------------------------#
								# Verificar si el resultado de la sql es verdadero o falso
								if (true == $var_sql) {
									foreach ($var_sql as $key => $value):
										# Array para asignar argumentos o valores a los elementos
										$var_array = array(
											d_azp_fct_research_m_by_created => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_by_modified => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_date_created => DATE_HOUR,
											d_azp_fct_research_m_date_modified => DATE_HOUR,
											d_azp_fct_research_m_deleted => '1',
											d_azp_fct_research_m_description => '',
											d_azp_fct_research_m_level => '2',
											d_azp_fct_research_m_status => '1',
											d_azp_fct_research_m_temp => '1',
											d_azp_fct_research_t_client => $value['lbl_azp_fct_client_t_name'],
											d_azp_fct_research_t_code => $value['lbl_azp_ibn_data_main_t_code'],
											d_azp_fct_research_t_consecutive => $value['lbl_azp_ibn_data_main_t_consecutive'],
											d_azp_fct_research_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
											d_azp_fct_research_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
											d_azp_fct_research_t_full_name => $value['lbl_azp_ibn_data_main_t_full_name'],
											d_azp_fct_research_t_identification => $value['lbl_azp_ibn_data_main_t_identification'],
											d_azp_fct_research_t_obligation => $value['lbl_azp_ibn_data_main_t_nro_obligation'],
											d_azp_fct_research_t_municipality => $value['lbl_azp_ibn_warranty_t_zmunicipality'],
											d_azp_fct_research_t_policy_general => $value['lbl_azp_ibn_warranty_t_policy_effective'],
											d_azp_fct_research_t_request_nro => $value['lbl_azp_ibn_control_panel_t_code_research'],
											d_azp_fct_research_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
											d_azp_fct_research_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
											d_azp_fct_research_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
											d_azp_fct_research_t_module => 'GARANTIAS',
										);
										# Query Sql Insert: Registrar valores en la tabla segun sus campos
										$this->db->insert(t_azp_fct_research, $var_array);
									endforeach;
								}
							} else if ($var_id_investigation == 'VIABILIDAD') {
								# Controlo de validacion de datos de la base
								//if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_evaluation." . d_azp_ibn_evaluation_t_policy_viability . " = '" . $var_id_result . "'"; } else { $var_qy_result = ''; }
								if ($var_id_result == 'POSITIVO' || $var_id_result == 'NEGATIVO') { $var_qy_result = "AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_viability . " = '" . $var_id_result . "'"; } else { $var_qy_result = ""; }
								# Seleccionar los registros de la tabla
								$var_sql = $this->db->query("
									SELECT
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_control_panel_id_azp_ibn_control_panel',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_s_date . " AS 'lbl_azp_ibn_control_panel_s_date',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_code_research . " AS 'lbl_azp_ibn_control_panel_t_code_research',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_camera . " AS 'lbl_azp_ibn_control_panel_t_count_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_furniture . " AS 'lbl_azp_ibn_control_panel_t_count_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_property . " AS 'lbl_azp_ibn_control_panel_t_count_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_vehicle . " AS 'lbl_azp_ibn_control_panel_t_count_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_count_warranty . " AS 'lbl_azp_ibn_control_panel_t_count_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_arrival . " AS 'lbl_azp_ibn_control_panel_t_date_arrival',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_final . " AS 'lbl_azp_ibn_control_panel_t_date_final',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " AS 'lbl_azp_ibn_control_panel_t_date_general',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_load . " AS 'lbl_azp_ibn_control_panel_t_date_load',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_reply . " AS 'lbl_azp_ibn_control_panel_t_date_reply',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_document . " AS 'lbl_azp_ibn_control_panel_t_document',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_encode . " AS 'lbl_azp_ibn_control_panel_t_encode',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_entity . " AS 'lbl_azp_ibn_control_panel_t_entity',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_finished . " AS 'lbl_azp_ibn_control_panel_t_finished',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_camera . " AS 'lbl_azp_ibn_control_panel_t_mod_camera',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_furniture . " AS 'lbl_azp_ibn_control_panel_t_mod_furniture',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_property . " AS 'lbl_azp_ibn_control_panel_t_mod_property',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_vehicle . " AS 'lbl_azp_ibn_control_panel_t_mod_vehicle',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_mod_warranty . " AS 'lbl_azp_ibn_control_panel_t_mod_warranty',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_register . " AS 'lbl_azp_ibn_control_panel_t_register',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_route . " AS 'lbl_azp_ibn_control_panel_t_route',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_state . " AS 'lbl_azp_ibn_control_panel_t_state',
										tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_control_panel_v_id_azp_ibn_client',

										tc_azp_ibn_warranty." . d_azp_ibn_warranty_id_azp_ibn_warranty . " AS 'lbl_azp_ibn_warranty_id_azp_ibn_warranty',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_by_created . " AS 'lbl_azp_ibn_warranty_m_by_created',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_by_modified . " AS 'lbl_azp_ibn_warranty_m_by_modified',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_date_created . " AS 'lbl_azp_ibn_warranty_m_date_created',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_date_modified . " AS 'lbl_azp_ibn_warranty_m_date_modified',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_deleted . " AS 'lbl_azp_ibn_warranty_m_deleted',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_description . " AS 'lbl_azp_ibn_warranty_m_description',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_level . " AS 'lbl_azp_ibn_warranty_m_level',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_status . " AS 'lbl_azp_ibn_warranty_m_status',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_m_temp . " AS 'lbl_azp_ibn_warranty_m_temp',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_validate . " AS 'lbl_azp_ibn_warranty_t_validate',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_acount . " AS 'lbl_azp_ibn_warranty_t_acount',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_bcount . " AS 'lbl_azp_ibn_warranty_t_bcount',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_comment_legal . " AS 'lbl_azp_ibn_warranty_t_comment_legal',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_concept . " AS 'lbl_azp_ibn_warranty_t_concept',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_consecutive . " AS 'lbl_azp_ibn_warranty_t_consecutive',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_creditor . " AS 'lbl_azp_ibn_warranty_t_creditor',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_date . " AS 'lbl_azp_ibn_warranty_t_date',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_full_name . " AS 'lbl_azp_ibn_warranty_t_full_name',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_identification . " AS 'lbl_azp_ibn_warranty_t_identification',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_limitation . " AS 'lbl_azp_ibn_warranty_t_limitation',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_observation . " AS 'lbl_azp_ibn_warranty_t_observation',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_effective . " AS 'lbl_azp_ibn_warranty_t_policy_effective',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_final . " AS 'lbl_azp_ibn_warranty_t_policy_final',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_viability . " AS 'lbl_azp_ibn_warranty_t_policy_viability',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_well_detail . " AS 'lbl_azp_ibn_warranty_t_well_detail',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_well_name . " AS 'lbl_azp_ibn_warranty_t_well_name',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_value . " AS 'lbl_azp_ibn_warranty_t_value',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " AS 'lbl_azp_ibn_warranty_t_zmunicipality',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_warranty_v_id_azp_ibn_control_panel',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_state . " AS 'lbl_azp_ibn_warranty_v_id_azp_ibn_state',

										tc_azp_ibn_data_main." . d_azp_ibn_data_main_id_azp_ibn_data_main . " AS 'lbl_azp_ibn_data_main_id_azp_ibn_data_main',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . " AS 'lbl_azp_ibn_data_main_t_acount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_bcount . " AS 'lbl_azp_ibn_data_main_t_bcount',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_city . " AS 'lbl_azp_ibn_data_main_t_city',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_code . " AS 'lbl_azp_ibn_data_main_t_code',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_base . " AS 'lbl_azp_ibn_data_main_t_coincidence_base',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coincidence_date . " AS 'lbl_azp_ibn_data_main_t_coincidence_date',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_consecutive . " AS 'lbl_azp_ibn_data_main_t_consecutive',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_coverage . " AS 'lbl_azp_ibn_data_main_t_coverage',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_data . " AS 'lbl_azp_ibn_data_main_t_data',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_department . " AS 'lbl_azp_ibn_data_main_t_department',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_full_name . " AS 'lbl_azp_ibn_data_main_t_full_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_identification . " AS 'lbl_azp_ibn_data_main_t_identification',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_camera . " AS 'lbl_azp_ibn_data_main_t_image_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_furniture . " AS 'lbl_azp_ibn_data_main_t_image_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_property . " AS 'lbl_azp_ibn_data_main_t_image_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_vehicle . " AS 'lbl_azp_ibn_data_main_t_image_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_image_warranty . " AS 'lbl_azp_ibn_data_main_t_image_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_nro_obligation . " AS 'lbl_azp_ibn_data_main_t_nro_obligation',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_final . " AS 'lbl_azp_ibn_data_main_t_policy_final',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_effective . " AS 'lbl_azp_ibn_data_main_t_policy_effective',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_camera . " AS 'lbl_azp_ibn_data_main_t_policy_e_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_e_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_property . " AS 'lbl_azp_ibn_data_main_t_policy_e_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_e_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_e_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_e_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_e_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_viability . " AS 'lbl_azp_ibn_data_main_t_policy_viability',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_camera . " AS 'lbl_azp_ibn_data_main_t_policy_v_camera',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_furniture . " AS 'lbl_azp_ibn_data_main_t_policy_v_furniture',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_property . " AS 'lbl_azp_ibn_data_main_t_policy_v_property',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_vehicle . " AS 'lbl_azp_ibn_data_main_t_policy_v_vehicle',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_warranty . " AS 'lbl_azp_ibn_data_main_t_policy_v_warranty',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_cam . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_cam',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_fur . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_fur',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_pro . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_pro',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_veh . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_veh',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_policy_v_con_war . " AS 'lbl_azp_ibn_data_main_t_policy_v_con_war',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_document . " AS 'lbl_azp_ibn_data_main_w_document',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_error . " AS 'lbl_azp_ibn_data_main_w_error',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_folder . " AS 'lbl_azp_ibn_data_main_w_folder',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_name . " AS 'lbl_azp_ibn_data_main_w_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_route . " AS 'lbl_azp_ibn_data_main_w_route',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_size . " AS 'lbl_azp_ibn_data_main_w_size',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_tmp_name . " AS 'lbl_azp_ibn_data_main_w_tmp_name',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_w_type . " AS 'lbl_azp_ibn_data_main_w_type',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_client . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_client',
										tc_azp_ibn_data_main." . d_azp_ibn_data_main_v_id_azp_ibn_control_panel . " AS 'lbl_azp_ibn_data_main_v_id_azp_ibn_control_panel',

										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_zmunicipality . " AS 'lbl_azp_ibn_evaluation_t_municipality',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_effective . " AS 'lbl_azp_ibn_evaluation_t_policy_effective',
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_policy_viability . " AS 'lbl_azp_ibn_evaluation_t_policy_viability',
										
										tc_azp_fct_client." . d_azp_fct_client_t_name . " AS 'lbl_azp_fct_client_t_name',
										tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . " AS 'lbl_azp_fct_tariff_v_id_azp_fct_investigation',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " AS 'lbl_azp_fct_tariff_t_value',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_iva',
										tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " + tc_azp_fct_tariff." . d_azp_fct_tariff_t_value . " * tc_azp_fct_tariff." . d_azp_fct_tariff_t_iva . " AS 'lbl_azp_fct_tariff_t_total'
									FROM " . t_azp_fct_prefacture . " tc_azp_fct_prefacture
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_tariff . " tc_azp_fct_tariff
										ON tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . "
											= tc_azp_fct_tariff." . d_azp_fct_tariff_id_azp_fct_tariff . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_client . " tc_azp_fct_client
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . "
										= tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_client . " tc_azp_ibn_client
										ON tc_azp_fct_client." . d_azp_fct_client_id_azp_fct_client . "
											= tc_azp_ibn_client." . d_azp_ibn_client_v_id_azp_fct_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_fct_investigation . " tc_azp_fct_investigation
									    ON tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_investigation . "
										= tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_control_panel . " tc_azp_ibn_control_panel
										ON tc_azp_ibn_client." . d_azp_ibn_client_id_azp_ibn_client . "
											= tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_v_id_azp_ibn_client . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_warranty . " tc_azp_ibn_warranty
										ON tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . "
											= tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . "
									-- ------------------------------------------------------------------------
									INNER JOIN " . t_azp_ibn_data_main . " tc_azp_ibn_data_main
										ON tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_acount . "
											= tc_azp_ibn_data_main." . d_azp_ibn_data_main_t_acount . "
									-- ------------------------------------------------------------------------
									WHERE tc_azp_fct_prefacture." . d_azp_fct_prefacture_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_t_request . " = '" . $var_request . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_service . " = '3'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_prefacture." . d_azp_fct_prefacture_v_id_azp_fct_tariff . " = '" . $var_tariff . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_client . " = '" . $var_client . "'
										AND tc_azp_fct_tariff." . d_azp_fct_tariff_v_id_azp_fct_sub_service . " = '13'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_id_azp_ibn_control_panel . " = '" . $var_relation . "'
										AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " != ''
										AND (tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " >= '" . $var_date_send . "'
											AND tc_azp_ibn_control_panel." . d_azp_ibn_control_panel_t_date_general . " <= '" . $var_date_send . "')
										AND tc_azp_fct_investigation." . d_azp_fct_investigation_id_azp_fct_investigation . " = '" . $var_investigation . "'
										AND tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_bcount . " = '1'
										" . $var_qy_result . " " . $var_qy_sub_coverage . "
									-- ------------------------------------------------------------------------ 
									GROUP BY tc_azp_ibn_warranty." . d_azp_ibn_warranty_v_id_azp_ibn_control_panel . " ASC,
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_identification . " ASC,
										tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_acount . " ASC
									-- ------------------------------------------------------------------------ 
									ORDER BY tc_azp_ibn_warranty." . d_azp_ibn_warranty_t_consecutive . " ASC
								");
								#-------------------------------------------------------------------------#
								# Verificar si el resultado de la sql es verdadero o falso
								if (true == $var_sql) {
									foreach ($var_sql as $key => $value):
										# Array para asignar argumentos o valores a los elementos
										$var_array = array(
											d_azp_fct_research_m_by_created => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_by_modified => $_SESSION[SESS_APP_ID],
											d_azp_fct_research_m_date_created => DATE_HOUR,
											d_azp_fct_research_m_date_modified => DATE_HOUR,
											d_azp_fct_research_m_deleted => '1',
											d_azp_fct_research_m_description => '',
											d_azp_fct_research_m_level => '2',
											d_azp_fct_research_m_status => '1',
											d_azp_fct_research_m_temp => '1',
											d_azp_fct_research_t_client => $value['lbl_azp_fct_client_t_name'],
											d_azp_fct_research_t_code => $value['lbl_azp_ibn_data_main_t_code'],
											d_azp_fct_research_t_consecutive => $value['lbl_azp_ibn_data_main_t_consecutive'],
											d_azp_fct_research_t_date_request => $value['lbl_azp_ibn_control_panel_t_date_arrival'],
											d_azp_fct_research_t_date_send => $value['lbl_azp_ibn_control_panel_t_date_general'],
											d_azp_fct_research_t_full_name => $value['lbl_azp_ibn_data_main_t_full_name'],
											d_azp_fct_research_t_identification => $value['lbl_azp_ibn_data_main_t_identification'],
											d_azp_fct_research_t_obligation => $value['lbl_azp_ibn_data_main_t_nro_obligation'],
											d_azp_fct_research_t_municipality => $value['lbl_azp_ibn_warranty_t_zmunicipality'],
											d_azp_fct_research_t_policy_general => $value['lbl_azp_ibn_warranty_t_policy_viability'],
											d_azp_fct_research_t_request_nro => $value['lbl_azp_ibn_control_panel_t_code_research'],
											d_azp_fct_research_t_tariff_iva => $value['lbl_azp_fct_tariff_t_iva'],
											d_azp_fct_research_t_tariff_total => $value['lbl_azp_fct_tariff_t_total'],
											d_azp_fct_research_t_tariff_value => $value['lbl_azp_fct_tariff_t_value'],
											d_azp_fct_research_t_module => 'GARANTIAS',
										);
										# Query Sql Insert: Registrar valores en la tabla segun sus campos
										$this->db->insert(t_azp_fct_research, $var_array);
									endforeach;
								}
							}
						endforeach;
					}
				endforeach;
			}
		}
		
		/*=========================================================================================================================*/
		# Query Sql Select Get Id
		final public function sql_controller_consolidated_investigation_bas() {
			# Seleccionar los registros de la tabla
			return $this->db->query("
				SELECT
					tc_azp_fct_research." . d_azp_fct_research_id_azp_fct_research . " AS 'lbl_azp_fct_research_id_azp_fct_research',
					tc_azp_user_created." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_created',
					tc_azp_user_modified." . d_azp_user_t_login . " AS 'lbl_azp_user_t_login_modified',
					tc_azp_fct_research." . d_azp_fct_research_m_date_created . " AS 'lbl_azp_fct_research_m_date_created',
					tc_azp_fct_research." . d_azp_fct_research_m_date_modified . " AS 'lbl_azp_fct_research_m_date_modified',
					tc_azp_fct_research." . d_azp_fct_research_m_description . " AS 'lbl_azp_fct_research_m_description',
					tc_azp_sys_level." . d_azp_sys_level_t_name . " AS 'lbl_azp_sys_level_t_name',
					tc_azp_sys_state." . d_azp_sys_state_t_name . " AS 'lbl_azp_sys_state_t_name',
					tc_azp_fct_research." . d_azp_fct_research_t_client . " AS 'lbl_azp_fct_research_t_client',
					tc_azp_fct_research." . d_azp_fct_research_t_code . " AS 'lbl_azp_fct_research_t_code',
					tc_azp_fct_research." . d_azp_fct_research_t_consecutive . " AS 'lbl_azp_fct_research_t_consecutive',
					tc_azp_fct_research." . d_azp_fct_research_t_date_request . " AS 'lbl_azp_fct_research_t_date_request',
					tc_azp_fct_research." . d_azp_fct_research_t_date_send . " AS 'lbl_azp_fct_research_t_date_send',
					tc_azp_fct_research." . d_azp_fct_research_t_full_name . " AS 'lbl_azp_fct_research_t_full_name',
					tc_azp_fct_research." . d_azp_fct_research_t_identification . " AS 'lbl_azp_fct_research_t_identification',
					tc_azp_fct_research." . d_azp_fct_research_t_obligation . " AS 'lbl_azp_fct_research_t_obligation',
					tc_azp_fct_research." . d_azp_fct_research_t_municipality . " AS 'lbl_azp_fct_research_t_municipality',
					tc_azp_fct_research." . d_azp_fct_research_t_policy_general . " AS 'lbl_azp_fct_research_t_policy_general',
					tc_azp_fct_research." . d_azp_fct_research_t_request_nro . " AS 'lbl_azp_fct_research_t_request_nro',
					tc_azp_fct_research." . d_azp_fct_research_t_tariff_iva . " AS 'lbl_azp_fct_research_t_tariff_iva',
					tc_azp_fct_research." . d_azp_fct_research_t_tariff_total . " AS 'lbl_azp_fct_research_t_tariff_total',
					tc_azp_fct_research." . d_azp_fct_research_t_tariff_value . " AS 'lbl_azp_fct_research_t_tariff_value',
					tc_azp_fct_research." . d_azp_fct_research_t_module . " AS 'lbl_azp_fct_research_t_module'
				FROM " . t_azp_fct_research . " tc_azp_fct_research
				-- ---------------------------------------------------------------
				INNER JOIN " . t_azp_user . " tc_azp_user_created
					ON tc_azp_fct_research." . d_azp_fct_research_m_by_created . "
						= tc_azp_user_created." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_user . " tc_azp_user_modified
					ON tc_azp_fct_research." . d_azp_fct_research_m_by_modified . "
						= tc_azp_user_modified." . d_azp_user_id_azp_user . "
				INNER JOIN " . t_azp_sys_level . " tc_azp_sys_level
					ON tc_azp_fct_research." . d_azp_fct_research_m_level . "
						= tc_azp_sys_level." . d_azp_sys_level_t_value . "
				INNER JOIN " . t_azp_sys_state . " tc_azp_sys_state
					ON tc_azp_fct_research." . d_azp_fct_research_m_status . "
						= tc_azp_sys_state." . d_azp_sys_state_t_value . "
				-- ---------------------------------------------------------------					
				WHERE tc_azp_fct_research." . d_azp_fct_research_m_by_created . " = '" . $_SESSION[SESS_APP_ID] . "'
			");
		}
		
		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_select_tc_azp_fct_service() {
			# Seleccionar los registros de la tabla
			return $this->db->select('*', t_azp_fct_service,
				d_azp_fct_service_id_azp_fct_service . " = '" . $this->id . "' AND " .
				d_azp_fct_service_m_deleted . " = '1' AND " .
				d_azp_fct_service_m_status . " = '1' ORDER BY " .
				d_azp_fct_service_id_azp_fct_service . " ASC"
			);
		}
		
		/*=========================================================================================================================*/
		# Query Sql Select
		final public function sql_select_tc_azp_fct_sub_service() {
			# Seleccionar los registros de la tabla
			return $this->db->select('*', t_azp_fct_sub_service,
				//d_azp_fct_sub_service_m_deleted . " = '1' AND " .
				d_azp_fct_sub_service_m_status . " = '1' AND " .
				d_azp_fct_sub_service_v_id_azp_fct_service . " = '" . $this->id . "' ORDER BY " .
				d_azp_fct_sub_service_id_azp_fct_sub_service . " ASC"
			);
		}

		/*=========================================================================================================================*/
		public function __destruct() {
			parent::__destruct();
		}
	}
?>